
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800100  0000555a  0000560e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000555a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046a  008001ca  008001ca  000056d8  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000056d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001038  00000000  00000000  000056dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000003d0  00000000  00000000  00006714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000006e8  00000000  00000000  00006ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001081  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c970  00000000  00000000  0000824d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003061  00000000  00000000  00014bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000096de  00000000  00000000  00017c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000a50  00000000  00000000  000212fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004271  00000000  00000000  00021d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006b6c  00000000  00000000  00025fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a68  00000000  00000000  0002cb29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	54 c1       	rjmp	.+680    	; 0x2ae <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	52 c1       	rjmp	.+676    	; 0x2ae <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c1       	rjmp	.+672    	; 0x2ae <__bad_interrupt>
       e:	00 00       	nop
      10:	4e c1       	rjmp	.+668    	; 0x2ae <__bad_interrupt>
      12:	00 00       	nop
      14:	4c c1       	rjmp	.+664    	; 0x2ae <__bad_interrupt>
      16:	00 00       	nop
      18:	4a c1       	rjmp	.+660    	; 0x2ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	48 c1       	rjmp	.+656    	; 0x2ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	46 c1       	rjmp	.+652    	; 0x2ae <__bad_interrupt>
      22:	00 00       	nop
      24:	44 c1       	rjmp	.+648    	; 0x2ae <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__vector_10>
      2c:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__vector_11>
      30:	3e c1       	rjmp	.+636    	; 0x2ae <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c1       	rjmp	.+632    	; 0x2ae <__bad_interrupt>
      36:	00 00       	nop
      38:	3a c1       	rjmp	.+628    	; 0x2ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	38 c1       	rjmp	.+624    	; 0x2ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	36 c1       	rjmp	.+620    	; 0x2ae <__bad_interrupt>
      42:	00 00       	nop
      44:	5c c2       	rjmp	.+1208   	; 0x4fe <__vector_17>
      46:	00 00       	nop
      48:	32 c1       	rjmp	.+612    	; 0x2ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c1       	rjmp	.+608    	; 0x2ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	2e c1       	rjmp	.+604    	; 0x2ae <__bad_interrupt>
      52:	00 00       	nop
      54:	2c c1       	rjmp	.+600    	; 0x2ae <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c1       	rjmp	.+596    	; 0x2ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	28 c1       	rjmp	.+592    	; 0x2ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	26 c1       	rjmp	.+588    	; 0x2ae <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c1       	rjmp	.+584    	; 0x2ae <__bad_interrupt>
      66:	00 00       	nop
      68:	22 c1       	rjmp	.+580    	; 0x2ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	20 c1       	rjmp	.+576    	; 0x2ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c1       	rjmp	.+572    	; 0x2ae <__bad_interrupt>
      72:	00 00       	nop
      74:	1c c1       	rjmp	.+568    	; 0x2ae <__bad_interrupt>
      76:	00 00       	nop
      78:	1a c1       	rjmp	.+564    	; 0x2ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	18 c1       	rjmp	.+560    	; 0x2ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	16 c1       	rjmp	.+556    	; 0x2ae <__bad_interrupt>
      82:	00 00       	nop
      84:	14 c1       	rjmp	.+552    	; 0x2ae <__bad_interrupt>
      86:	00 00       	nop
      88:	12 c1       	rjmp	.+548    	; 0x2ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	10 c1       	rjmp	.+544    	; 0x2ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	0e c1       	rjmp	.+540    	; 0x2ae <__bad_interrupt>
      92:	00 00       	nop
      94:	0c c1       	rjmp	.+536    	; 0x2ae <__bad_interrupt>
      96:	00 00       	nop
      98:	0a c1       	rjmp	.+532    	; 0x2ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	08 c1       	rjmp	.+528    	; 0x2ae <__bad_interrupt>
      9e:	00 00       	nop
      a0:	06 c1       	rjmp	.+524    	; 0x2ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	04 c1       	rjmp	.+520    	; 0x2ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	02 c1       	rjmp	.+516    	; 0x2ae <__bad_interrupt>
      aa:	00 00       	nop

000000ac <GenericReport>:
      ac:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
      bc:	07 81 02 09 03 15 00 25 ff 75 08 95 07 91 02 c0     .......%.u......

000000cc <DeviceDescriptor>:
      cc:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      dc:	dc 01                                               ..

000000de <ConfigurationDescriptor>:
      de:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      ee:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
      fe:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
     10e:	20 00 07 05 81 03 10 00 01                           ........

00000117 <LanguageString>:
     117:	04 03 09 04                                         ....

0000011b <ManufacturerString>:
     11b:	2a 03 4a 00 75 00 73 00 74 00 69 00 6e 00 20 00     *.J.u.s.t.i.n. .
     12b:	4a 00 61 00 6d 00 65 00 73 00 20 00 43 00 6c 00     J.a.m.e.s. .C.l.
     13b:	61 00 79 00 64 00 65 00 6e 00 00 00                 a.y.d.e.n...

00000147 <ProductString>:
     147:	3c 03 42 00 6c 00 75 00 65 00 63 00 68 00 69 00     <.B.l.u.e.c.h.i.
     157:	6c 00 6c 00 69 00 20 00 48 00 65 00 61 00 72 00     l.l.i. .H.e.a.r.
     167:	74 00 20 00 4d 00 6f 00 6e 00 69 00 74 00 6f 00     t. .M.o.n.i.t.o.
     177:	72 00 20 00 44 00 69 00 73 00 6b 00 00 00           r. .D.i.s.k...

00000185 <Temperature_Lookup>:
     185:	b4 03 b0 03 ab 03 a6 03 a0 03 9a 03 94 03 8e 03     ................
     195:	88 03 81 03 7a 03 73 03 6b 03 63 03 5b 03 53 03     ....z.s.k.c.[.S.
     1a5:	4a 03 41 03 38 03 2f 03 25 03 1b 03 11 03 07 03     J.A.8./.%.......
     1b5:	fc 02 f1 02 e6 02 db 02 d0 02 c4 02 b8 02 ac 02     ................
     1c5:	a0 02 94 02 88 02 7c 02 6f 02 63 02 56 02 4a 02     ......|.o.c.V.J.
     1d5:	3d 02 31 02 25 02 18 02 0c 02 00 02 f3 01 e7 01     =.1.%...........
     1e5:	db 01 cf 01 c4 01 b8 01 ac 01 a1 01 96 01 8b 01     ................
     1f5:	80 01 76 01 6b 01 61 01 57 01 4d 01 44 01 3a 01     ..v.k.a.W.M.D.:.
     205:	31 01 28 01 1f 01 17 01 0f 01 06 01 fe 00 f7 00     1.(.............
     215:	ef 00 e8 00 e1 00 da 00 d3 00 cd 00 c7 00 c0 00     ................
     225:	ba 00 b5 00 af 00 aa 00 a4 00 9f 00 9a 00 96 00     ................
     235:	91 00 8c 00 88 00 84 00 80 00 7c 00 78 00 74 00     ..........|.x.t.
     245:	71 00 6d 00 6a 00 67 00 64 00 61 00 5e 00 5b 00     q.m.j.g.d.a.^.[.
     255:	58 00 55 00 53 00 50 00 4e 00 4c 00 49 00 47 00     X.U.S.P.N.L.I.G.
     265:	45 00 43 00 41 00 3f 00 3d 00 3c 00 3a 00 38 00     E.C.A.?.=.<.:.8.
     275:	00                                                  .

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	da e0       	ldi	r29, 0x0A	; 10
     27e:	de bf       	out	0x3e, r29	; 62
     280:	cd bf       	out	0x3d, r28	; 61

00000282 <__do_copy_data>:
     282:	11 e0       	ldi	r17, 0x01	; 1
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	ea e5       	ldi	r30, 0x5A	; 90
     28a:	f5 e5       	ldi	r31, 0x55	; 85
     28c:	02 c0       	rjmp	.+4      	; 0x292 <.do_copy_data_start>

0000028e <.do_copy_data_loop>:
     28e:	05 90       	lpm	r0, Z+
     290:	0d 92       	st	X+, r0

00000292 <.do_copy_data_start>:
     292:	aa 3c       	cpi	r26, 0xCA	; 202
     294:	b1 07       	cpc	r27, r17
     296:	d9 f7       	brne	.-10     	; 0x28e <.do_copy_data_loop>

00000298 <__do_clear_bss>:
     298:	16 e0       	ldi	r17, 0x06	; 6
     29a:	aa ec       	ldi	r26, 0xCA	; 202
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <.do_clear_bss_start>

000002a0 <.do_clear_bss_loop>:
     2a0:	1d 92       	st	X+, r1

000002a2 <.do_clear_bss_start>:
     2a2:	a4 33       	cpi	r26, 0x34	; 52
     2a4:	b1 07       	cpc	r27, r17
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <.do_clear_bss_loop>
     2a8:	0e d1       	rcall	.+540    	; 0x4c6 <main>
     2aa:	0c 94 ab 2a 	jmp	0x5556	; 0x5556 <_exit>

000002ae <__bad_interrupt>:
     2ae:	a8 ce       	rjmp	.-688    	; 0x0 <__vectors>

000002b0 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     2b4:	89 01       	movw	r16, r18
	
	DS1307_SetTimeDate(&ReportParams->TimeDate);
     2b6:	c9 01       	movw	r24, r18
     2b8:	95 d6       	rcall	.+3370   	; 0xfe4 <DS1307_SetTimeDate>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     2ba:	f8 01       	movw	r30, r16
     2bc:	66 81       	ldd	r22, Z+6	; 0x06
     2be:	80 91 ca 01 	lds	r24, 0x01CA
     2c2:	86 17       	cp	r24, r22
     2c4:	31 f0       	breq	.+12     	; 0x2d2 <CALLBACK_HID_Device_ProcessHIDReport+0x22>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     2c6:	60 93 ca 01 	sts	0x01CA, r22
		eeprom_update_byte(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 c2 29 	call	0x5384	; 0x5384 <__eeupd_byte_m32u4>
	}
}
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	78 01       	movw	r14, r16
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     2e2:	89 01       	movw	r16, r18

	DS1307_GetTimeDate(&ReportParams->TimeDate);
     2e4:	c9 01       	movw	r24, r18
     2e6:	d6 d5       	rcall	.+2988   	; 0xe94 <DS1307_GetTimeDate>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     2e8:	80 91 ca 01 	lds	r24, 0x01CA
     2ec:	f8 01       	movw	r30, r16
     2ee:	86 83       	std	Z+6, r24	; 0x06

	*ReportSize = sizeof(Device_Report_t);
     2f0:	87 e0       	ldi	r24, 0x07	; 7
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	f7 01       	movw	r30, r14
     2f6:	91 83       	std	Z+1, r25	; 0x01
     2f8:	80 83       	st	Z, r24
	return true;
}
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	ff 90       	pop	r15
     302:	ef 90       	pop	r14
     304:	08 95       	ret

00000306 <CALLBACK_MS_Device_SCSICommandReceived>:
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     306:	76 98       	cbi	0x0e, 6	; 14
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     308:	9b d4       	rcall	.+2358   	; 0xc40 <SCSI_DecodeSCSICommand>
     30a:	76 98       	cbi	0x0e, 6	; 14
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     30c:	08 95       	ret

0000030e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     316:	87 e7       	ldi	r24, 0x77	; 119
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0c 94 31 23 	jmp	0x4662	; 0x4662 <HID_Device_ProcessControlRequest>

0000031e <EVENT_USB_Device_ConfigurationChanged>:
	OpenLogFile();
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     322:	87 e7       	ldi	r24, 0x77	; 119
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 f9 22 	call	0x45f2	; 0x45f2 <HID_Device_ConfigureEndpoints>
     32a:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     32c:	80 e4       	ldi	r24, 0x40	; 64
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	08 23       	and	r16, r24
     33a:	19 23       	and	r17, r25
     33c:	00 ff       	sbrs	r16, 0
     33e:	02 c0       	rjmp	.+4      	; 0x344 <EVENT_USB_Device_ConfigurationChanged+0x26>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	01 c0       	rjmp	.+2      	; 0x346 <EVENT_USB_Device_ConfigurationChanged+0x28>
     344:	90 e4       	ldi	r25, 0x40	; 64
     346:	8e b1       	in	r24, 0x0e	; 14
     348:	8f 7b       	andi	r24, 0xBF	; 191
     34a:	98 2b       	or	r25, r24
     34c:	9e b9       	out	0x0e, r25	; 14
}
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     354:	84 b7       	in	r24, 0x34	; 52
     356:	87 7f       	andi	r24, 0xF7	; 247
     358:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     35a:	88 e1       	ldi	r24, 0x18	; 24
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	80 93 60 00 	sts	0x0060, r24
     364:	10 92 60 00 	sts	0x0060, r1
     368:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	20 e8       	ldi	r18, 0x80	; 128
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	20 93 61 00 	sts	0x0061, r18
     378:	80 93 61 00 	sts	0x0061, r24
     37c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRE  |=  LEDS_ALL_LEDS;
     37e:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_ALL_LEDS;
     380:	76 98       	cbi	0x0e, 6	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     382:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     384:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     386:	84 b1       	in	r24, 0x04	; 4
     388:	86 60       	ori	r24, 0x06	; 6
     38a:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     38c:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     38e:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     390:	8d b5       	in	r24, 0x2d	; 45
     392:	81 60       	ori	r24, 0x01	; 1
     394:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     396:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     398:	8c e5       	ldi	r24, 0x5C	; 92
     39a:	8c bd       	out	0x2c, r24	; 44
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     39c:	87 ea       	ldi	r24, 0xA7	; 167
     39e:	80 93 7a 00 	sts	0x007A, r24
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
				{
					DDRF  &= ~(1 << ChannelIndex);
     3a2:	80 98       	cbi	0x10, 0	; 16
					DIDR0 |=  (1 << ChannelIndex);
     3a4:	ee e7       	ldi	r30, 0x7E	; 126
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	81 60       	ori	r24, 0x01	; 1
     3ac:	80 83       	st	Z, r24
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_128);
	Temperature_Init();
	Dataflash_Init();
	USB_Init();
     3ae:	0e 94 66 1d 	call	0x3acc	; 0x3acc <USB_Init>
			 *  \param[in] BitLength  Length of the bits sent on the bus.
			 */
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
     3b2:	ec eb       	ldi	r30, 0xBC	; 188
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	84 60       	ori	r24, 0x04	; 4
     3ba:	80 83       	st	Z, r24
				TWSR  = Prescale;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 b9 00 	sts	0x00B9, r24
				TWBR  = BitLength;
     3c2:	80 e2       	ldi	r24, 0x20	; 32
     3c4:	80 93 b8 00 	sts	0x00B8, r24
	TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));

	/* 500ms logging interval timer configuration */
	OCR1A   = (((F_CPU / 1024) / 2) - 1);
     3c8:	83 e8       	ldi	r24, 0x83	; 131
     3ca:	9e e1       	ldi	r25, 0x1E	; 30
     3cc:	90 93 89 00 	sts	0x0089, r25
     3d0:	80 93 88 00 	sts	0x0088, r24
	TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     3d4:	8d e0       	ldi	r24, 0x0D	; 13
     3d6:	80 93 81 00 	sts	0x0081, r24
	TIMSK1  = (1 << OCIE1A);
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	80 93 6f 00 	sts	0x006F, r24

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     3e0:	14 c2       	rjmp	.+1064   	; 0x80a <DataflashManager_ResetDataflashProtections>

000003e2 <CloseLogFile>:
	f_lseek(&TempLogFile, TempLogFile.fsize);
}

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     3e6:	0d ef       	ldi	r16, 0xFD	; 253
     3e8:	15 e0       	ldi	r17, 0x05	; 5
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 ee 13 	call	0x27dc	; 0x27dc <f_sync>
	f_close(&TempLogFile);
     3f0:	c8 01       	movw	r24, r16
     3f2:	0e 94 e5 14 	call	0x29ca	; 0x29ca <f_close>
}
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	08 95       	ret

000003fc <EVENT_USB_Device_Connect>:
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     3fc:	76 98       	cbi	0x0e, 6	; 14
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Close the log file so that the host has exclusive filesystem access */
	CloseLogFile();
}
     3fe:	f1 cf       	rjmp	.-30     	; 0x3e2 <CloseLogFile>

00000400 <OpenLogFile>:
	}
}

/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	62 97       	sbiw	r28, 0x12	; 18
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "DDMMYY.csv" */
	TimeDate_t CurrentTimeDate;
	DS1307_GetTimeDate(&CurrentTimeDate);
     41c:	ce 01       	movw	r24, r28
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	39 d5       	rcall	.+2674   	; 0xe94 <DS1307_GetTimeDate>
	sprintf(LogFileName, "%02d%02d%02d.csv", CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year);
     422:	8d b7       	in	r24, 0x3d	; 61
     424:	9e b7       	in	r25, 0x3e	; 62
     426:	0a 97       	sbiw	r24, 0x0a	; 10
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	9e bf       	out	0x3e, r25	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	8d bf       	out	0x3d, r24	; 61
     432:	ed b7       	in	r30, 0x3d	; 61
     434:	fe b7       	in	r31, 0x3e	; 62
     436:	31 96       	adiw	r30, 0x01	; 1
     438:	87 e0       	ldi	r24, 0x07	; 7
     43a:	e8 2e       	mov	r14, r24
     43c:	f1 2c       	mov	r15, r1
     43e:	ec 0e       	add	r14, r28
     440:	fd 1e       	adc	r15, r29
     442:	ad b7       	in	r26, 0x3d	; 61
     444:	be b7       	in	r27, 0x3e	; 62
     446:	12 96       	adiw	r26, 0x02	; 2
     448:	fc 92       	st	X, r15
     44a:	ee 92       	st	-X, r14
     44c:	11 97       	sbiw	r26, 0x01	; 1
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	93 83       	std	Z+3, r25	; 0x03
     454:	82 83       	std	Z+2, r24	; 0x02
     456:	8c 81       	ldd	r24, Y+4	; 0x04
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	15 82       	std	Z+5, r1	; 0x05
     45c:	8d 81       	ldd	r24, Y+5	; 0x05
     45e:	86 83       	std	Z+6, r24	; 0x06
     460:	17 82       	std	Z+7, r1	; 0x07
     462:	8e 81       	ldd	r24, Y+6	; 0x06
     464:	80 87       	std	Z+8, r24	; 0x08
     466:	11 86       	std	Z+9, r1	; 0x09
     468:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <sprintf>

	/* Mount the storage device, open the file */
	f_mount(0, &DiskFATState);
     46c:	8d b7       	in	r24, 0x3d	; 61
     46e:	9e b7       	in	r25, 0x3e	; 62
     470:	0a 96       	adiw	r24, 0x0a	; 10
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	9e bf       	out	0x3e, r25	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	8d bf       	out	0x3d, r24	; 61
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	6d ec       	ldi	r22, 0xCD	; 205
     480:	71 e0       	ldi	r23, 0x01	; 1
     482:	22 d7       	rcall	.+3652   	; 0x12c8 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     484:	0d ef       	ldi	r16, 0xFD	; 253
     486:	15 e0       	ldi	r17, 0x05	; 5
     488:	c8 01       	movw	r24, r16
     48a:	b7 01       	movw	r22, r14
     48c:	42 e1       	ldi	r20, 0x12	; 18
     48e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     492:	40 91 07 06 	lds	r20, 0x0607
     496:	50 91 08 06 	lds	r21, 0x0608
     49a:	60 91 09 06 	lds	r22, 0x0609
     49e:	70 91 0a 06 	lds	r23, 0x060A
     4a2:	c8 01       	movw	r24, r16
     4a4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <f_lseek>
}
     4a8:	62 96       	adiw	r28, 0x12	; 18
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	08 95       	ret

000004c2 <EVENT_USB_Device_Disconnect>:
     4c2:	76 9a       	sbi	0x0e, 6	; 14
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
}
     4c4:	9d cf       	rjmp	.-198    	; 0x400 <OpenLogFile>

000004c6 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     4c6:	46 df       	rcall	.-372    	; 0x354 <SetupHardware>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_byte(&LoggingInterval500MS_EEPROM);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 ba 29 	call	0x5374	; 0x5374 <__eerd_byte_m32u4>
     4d0:	80 93 ca 01 	sts	0x01CA, r24

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF)
     4d4:	8f 3f       	cpi	r24, 0xFF	; 255
     4d6:	19 f4       	brne	.+6      	; 0x4de <main+0x18>
	  LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     4d8:	8a e0       	ldi	r24, 0x0A	; 10
     4da:	80 93 ca 01 	sts	0x01CA, r24

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     4de:	90 df       	rcall	.-224    	; 0x400 <OpenLogFile>
     4e0:	76 9a       	sbi	0x0e, 6	; 14

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     4e2:	78 94       	sei

	for (;;)
	{
    LED_ON;
     4e4:	5e 9a       	sbi	0x0b, 6	; 11
		MS_Device_USBTask(&Disk_MS_Interface);
     4e6:	80 e4       	ldi	r24, 0x40	; 64
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 6d 24 	call	0x48da	; 0x48da <MS_Device_USBTask>
		HID_Device_USBTask(&Generic_HID_Interface);
     4ee:	87 e7       	ldi	r24, 0x77	; 119
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 3f 22 	call	0x447e	; 0x447e <HID_Device_USBTask>
    LED_OFF;
     4f6:	5e 98       	cbi	0x0b, 6	; 11
		USB_USBTask();
     4f8:	0e 94 2d 22 	call	0x445a	; 0x445a <USB_USBTask>
     4fc:	f3 cf       	rjmp	.-26     	; 0x4e4 <main+0x1e>

000004fe <__vector_17>:
static FIL TempLogFile;


/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	cc 56       	subi	r28, 0x6C	; 108
     53c:	d0 40       	sbci	r29, 0x00	; 0
     53e:	de bf       	out	0x3e, r29	; 62
     540:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTE & LEDS_ALL_LEDS);
     542:	0e b1       	in	r16, 0x0e	; 14
	uint8_t LEDMask = LEDs_GetLEDs();

	/* Check to see if the logging interval has expired */
	if (++CurrentLoggingTicks < LoggingInterval500MS_SRAM)
     544:	20 91 cb 01 	lds	r18, 0x01CB
     548:	30 91 cc 01 	lds	r19, 0x01CC
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	30 93 cc 01 	sts	0x01CC, r19
     554:	20 93 cb 01 	sts	0x01CB, r18
     558:	80 91 ca 01 	lds	r24, 0x01CA
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	28 17       	cp	r18, r24
     560:	39 07       	cpc	r19, r25
     562:	08 f4       	brcc	.+2      	; 0x566 <__vector_17+0x68>
     564:	5f c0       	rjmp	.+190    	; 0x624 <__vector_17+0x126>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
     566:	10 92 cc 01 	sts	0x01CC, r1
     56a:	10 92 cb 01 	sts	0x01CB, r1
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     56e:	76 98       	cbi	0x0e, 6	; 14

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	/* Only log when not connected to a USB host */
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     570:	8e b3       	in	r24, 0x1e	; 30
     572:	88 23       	and	r24, r24
     574:	09 f0       	breq	.+2      	; 0x578 <__vector_17+0x7a>
     576:	51 c0       	rjmp	.+162    	; 0x61a <__vector_17+0x11c>
	{
		TimeDate_t CurrentTimeDate;
		DS1307_GetTimeDate(&CurrentTimeDate);
     578:	ce 01       	movw	r24, r28
     57a:	03 96       	adiw	r24, 0x03	; 3
     57c:	8b d4       	rcall	.+2326   	; 0xe94 <DS1307_GetTimeDate>

		char     LineBuffer[100];
		uint16_t BytesWritten;

		BytesWritten = sprintf(LineBuffer, "%02d/%02d/20%02d, %02d:%02d:%02d, %d Degrees\r\n",
     57e:	fe 80       	ldd	r15, Y+6	; 0x06
     580:	ef 80       	ldd	r14, Y+7	; 0x07
     582:	d8 84       	ldd	r13, Y+8	; 0x08
     584:	cb 80       	ldd	r12, Y+3	; 0x03
     586:	bc 80       	ldd	r11, Y+4	; 0x04
     588:	ad 80       	ldd	r10, Y+5	; 0x05
     58a:	0e 94 09 26 	call	0x4c12	; 0x4c12 <Temperature_GetTemperature>
     58e:	2d b7       	in	r18, 0x3d	; 61
     590:	3e b7       	in	r19, 0x3e	; 62
     592:	22 51       	subi	r18, 0x12	; 18
     594:	30 40       	sbci	r19, 0x00	; 0
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	3e bf       	out	0x3e, r19	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	2d bf       	out	0x3d, r18	; 61
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	99 e0       	ldi	r25, 0x09	; 9
     5a8:	89 2e       	mov	r8, r25
     5aa:	91 2c       	mov	r9, r1
     5ac:	8c 0e       	add	r8, r28
     5ae:	9d 1e       	adc	r9, r29
     5b0:	ad b7       	in	r26, 0x3d	; 61
     5b2:	be b7       	in	r27, 0x3e	; 62
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	9c 92       	st	X, r9
     5b8:	8e 92       	st	-X, r8
     5ba:	11 97       	sbiw	r26, 0x01	; 1
     5bc:	21 e1       	ldi	r18, 0x11	; 17
     5be:	31 e0       	ldi	r19, 0x01	; 1
     5c0:	33 83       	std	Z+3, r19	; 0x03
     5c2:	22 83       	std	Z+2, r18	; 0x02
     5c4:	f4 82       	std	Z+4, r15	; 0x04
     5c6:	15 82       	std	Z+5, r1	; 0x05
     5c8:	e6 82       	std	Z+6, r14	; 0x06
     5ca:	17 82       	std	Z+7, r1	; 0x07
     5cc:	d0 86       	std	Z+8, r13	; 0x08
     5ce:	11 86       	std	Z+9, r1	; 0x09
     5d0:	c2 86       	std	Z+10, r12	; 0x0a
     5d2:	13 86       	std	Z+11, r1	; 0x0b
     5d4:	b4 86       	std	Z+12, r11	; 0x0c
     5d6:	15 86       	std	Z+13, r1	; 0x0d
     5d8:	a6 86       	std	Z+14, r10	; 0x0e
     5da:	17 86       	std	Z+15, r1	; 0x0f
     5dc:	99 27       	eor	r25, r25
     5de:	87 fd       	sbrc	r24, 7
     5e0:	90 95       	com	r25
     5e2:	91 8b       	std	Z+17, r25	; 0x11
     5e4:	80 8b       	std	Z+16, r24	; 0x10
     5e6:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <sprintf>
     5ea:	ac 01       	movw	r20, r24
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	5a 83       	std	Y+2, r21	; 0x02
		                       CurrentTimeDate.Day, CurrentTimeDate.Month, CurrentTimeDate.Year,
		                       CurrentTimeDate.Hour, CurrentTimeDate.Minute, CurrentTimeDate.Second,
		                       Temperature_GetTemperature());

		f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
     5f0:	2d b7       	in	r18, 0x3d	; 61
     5f2:	3e b7       	in	r19, 0x3e	; 62
     5f4:	2e 5e       	subi	r18, 0xEE	; 238
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	3e bf       	out	0x3e, r19	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	2d bf       	out	0x3d, r18	; 61
     602:	8d ef       	ldi	r24, 0xFD	; 253
     604:	95 e0       	ldi	r25, 0x05	; 5
     606:	b4 01       	movw	r22, r8
     608:	9e 01       	movw	r18, r28
     60a:	2f 5f       	subi	r18, 0xFF	; 255
     60c:	3f 4f       	sbci	r19, 0xFF	; 255
     60e:	0e 94 00 10 	call	0x2000	; 0x2000 <f_write>
		f_sync(&TempLogFile);
     612:	8d ef       	ldi	r24, 0xFD	; 253
     614:	95 e0       	ldi	r25, 0x05	; 5
     616:	0e 94 ee 13 	call	0x27dc	; 0x27dc <f_sync>
     61a:	8e b1       	in	r24, 0x0e	; 14
     61c:	00 74       	andi	r16, 0x40	; 64
     61e:	8f 7b       	andi	r24, 0xBF	; 191
     620:	08 2b       	or	r16, r24
     622:	0e b9       	out	0x0e, r16	; 14
	}

	LEDs_SetAllLEDs(LEDMask);
}
     624:	c4 59       	subi	r28, 0x94	; 148
     626:	df 4f       	sbci	r29, 0xFF	; 255
     628:	de bf       	out	0x3e, r29	; 62
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	ff 91       	pop	r31
     632:	ef 91       	pop	r30
     634:	bf 91       	pop	r27
     636:	af 91       	pop	r26
     638:	9f 91       	pop	r25
     63a:	8f 91       	pop	r24
     63c:	7f 91       	pop	r23
     63e:	6f 91       	pop	r22
     640:	5f 91       	pop	r21
     642:	4f 91       	pop	r20
     644:	3f 91       	pop	r19
     646:	2f 91       	pop	r18
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	bf 90       	pop	r11
     654:	af 90       	pop	r10
     656:	9f 90       	pop	r9
     658:	8f 90       	pop	r8
     65a:	0f 90       	pop	r0
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	0f 90       	pop	r0
     660:	1f 90       	pop	r1
     662:	18 95       	reti

00000664 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     664:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     666:	93 30       	cpi	r25, 0x03	; 3
     668:	b1 f0       	breq	.+44     	; 0x696 <CALLBACK_USB_GetDescriptor+0x32>
     66a:	94 30       	cpi	r25, 0x04	; 4
     66c:	28 f4       	brcc	.+10     	; 0x678 <CALLBACK_USB_GetDescriptor+0x14>
     66e:	91 30       	cpi	r25, 0x01	; 1
     670:	41 f0       	breq	.+16     	; 0x682 <CALLBACK_USB_GetDescriptor+0x1e>
     672:	92 30       	cpi	r25, 0x02	; 2
     674:	79 f5       	brne	.+94     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x70>
     676:	0a c0       	rjmp	.+20     	; 0x68c <CALLBACK_USB_GetDescriptor+0x28>
     678:	91 32       	cpi	r25, 0x21	; 33
     67a:	11 f1       	breq	.+68     	; 0x6c0 <CALLBACK_USB_GetDescriptor+0x5c>
     67c:	92 32       	cpi	r25, 0x22	; 34
     67e:	51 f5       	brne	.+84     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x70>
     680:	24 c0       	rjmp	.+72     	; 0x6ca <CALLBACK_USB_GetDescriptor+0x66>
     682:	ec ec       	ldi	r30, 0xCC	; 204
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	22 e1       	ldi	r18, 0x12	; 18
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	28 c0       	rjmp	.+80     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x78>
     68c:	ee ed       	ldi	r30, 0xDE	; 222
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	29 e3       	ldi	r18, 0x39	; 57
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	23 c0       	rjmp	.+70     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	49 f0       	breq	.+18     	; 0x6ac <CALLBACK_USB_GetDescriptor+0x48>
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	18 f0       	brcs	.+6      	; 0x6a4 <CALLBACK_USB_GetDescriptor+0x40>
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	c9 f4       	brne	.+50     	; 0x6d4 <CALLBACK_USB_GetDescriptor+0x70>
     6a2:	0a c0       	rjmp	.+20     	; 0x6b8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6a4:	e7 e1       	ldi	r30, 0x17	; 23
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	84 91       	lpm	r24, Z+
     6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6ac:	eb e1       	ldi	r30, 0x1B	; 27
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
     6b0:	84 91       	lpm	r24, Z+
     6b2:	28 2f       	mov	r18, r24
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	12 c0       	rjmp	.+36     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     6b8:	e7 e4       	ldi	r30, 0x47	; 71
     6ba:	f1 e0       	ldi	r31, 0x01	; 1
     6bc:	84 91       	lpm	r24, Z+
     6be:	f9 cf       	rjmp	.-14     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x4e>
     6c0:	e7 e0       	ldi	r30, 0x07	; 7
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	29 e0       	ldi	r18, 0x09	; 9
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     6ca:	ec ea       	ldi	r30, 0xAC	; 172
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	20 e2       	ldi	r18, 0x20	; 32
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	04 c0       	rjmp	.+8      	; 0x6dc <CALLBACK_USB_GetDescriptor+0x78>
     6d4:	e0 e0       	ldi	r30, 0x00	; 0
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     6dc:	ed 93       	st	X+, r30
     6de:	fc 93       	st	X, r31
	return Size;
}
     6e0:	c9 01       	movw	r24, r18
     6e2:	08 95       	ret

000006e4 <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e8:	84 e8       	ldi	r24, 0x84	; 132
     6ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_WriteBlocks_RAM+0x8>
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     6f6:	01 e0       	ldi	r16, 0x01	; 1
     6f8:	2d c0       	rjmp	.+90     	; 0x754 <DataflashManager_WriteBlocks_RAM+0x70>
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     6fa:	b9 01       	movw	r22, r18
     6fc:	10 e0       	ldi	r17, 0x00	; 0

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     6fe:	a0 32       	cpi	r26, 0x20	; 32
     700:	a9 f4       	brne	.+42     	; 0x72c <DataflashManager_WriteBlocks_RAM+0x48>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     702:	bb 23       	and	r27, r27
     704:	11 f4       	brne	.+4      	; 0x70a <DataflashManager_WriteBlocks_RAM+0x26>
     706:	83 e8       	ldi	r24, 0x83	; 131
     708:	01 c0       	rjmp	.+2      	; 0x70c <DataflashManager_WriteBlocks_RAM+0x28>
     70a:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     70c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     70e:	0d b4       	in	r0, 0x2d	; 45
     710:	07 fe       	sbrs	r0, 7
     712:	fd cf       	rjmp	.-6      	; 0x70e <DataflashManager_WriteBlocks_RAM+0x2a>
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     714:	2c 9b       	sbis	0x05, 4	; 5
				  UsingSecondBuffer = !(UsingSecondBuffer);
     716:	b0 27       	eor	r27, r16
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     718:	bb 23       	and	r27, r27
     71a:	11 f4       	brne	.+4      	; 0x720 <DataflashManager_WriteBlocks_RAM+0x3c>
     71c:	84 e8       	ldi	r24, 0x84	; 132
     71e:	01 c0       	rjmp	.+2      	; 0x722 <DataflashManager_WriteBlocks_RAM+0x3e>
     720:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     722:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <DataflashManager_WriteBlocks_RAM+0x40>
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	fb 01       	movw	r30, r22
     72e:	90 e0       	ldi	r25, 0x00	; 0
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
     730:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     732:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_WriteBlocks_RAM+0x50>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     73a:	9f 5f       	subi	r25, 0xFF	; 255
     73c:	90 31       	cpi	r25, 0x10	; 16
     73e:	c1 f7       	brne	.-16     	; 0x730 <DataflashManager_WriteBlocks_RAM+0x4c>
     740:	60 5f       	subi	r22, 0xF0	; 240
     742:	7f 4f       	sbci	r23, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     744:	af 5f       	subi	r26, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     746:	1f 5f       	subi	r17, 0xFF	; 255
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     748:	10 32       	cpi	r17, 0x20	; 32
     74a:	c9 f6       	brne	.-78     	; 0x6fe <DataflashManager_WriteBlocks_RAM+0x1a>
     74c:	20 50       	subi	r18, 0x00	; 0
     74e:	3e 4f       	sbci	r19, 0xFE	; 254
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     750:	41 50       	subi	r20, 0x01	; 1
     752:	50 40       	sbci	r21, 0x00	; 0

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
     754:	41 15       	cp	r20, r1
     756:	51 05       	cpc	r21, r1
     758:	81 f6       	brne	.-96     	; 0x6fa <DataflashManager_WriteBlocks_RAM+0x16>
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     75a:	bb 23       	and	r27, r27
     75c:	11 f4       	brne	.+4      	; 0x762 <DataflashManager_WriteBlocks_RAM+0x7e>
     75e:	83 e8       	ldi	r24, 0x83	; 131
     760:	01 c0       	rjmp	.+2      	; 0x764 <DataflashManager_WriteBlocks_RAM+0x80>
     762:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     764:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     766:	0d b4       	in	r0, 0x2d	; 45
     768:	07 fe       	sbrs	r0, 7
     76a:	fd cf       	rjmp	.-6      	; 0x766 <DataflashManager_WriteBlocks_RAM+0x82>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
	Dataflash_WaitWhileBusy();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	08 95       	ret

00000772 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
     772:	1f 93       	push	r17
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     774:	82 ed       	ldi	r24, 0xD2	; 210
     776:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     778:	0d b4       	in	r0, 0x2d	; 45
     77a:	07 fe       	sbrs	r0, 7
     77c:	fd cf       	rjmp	.-6      	; 0x778 <DataflashManager_ReadBlocks_RAM+0x6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <DataflashManager_ReadBlocks_RAM+0xe>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     786:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     788:	0d b4       	in	r0, 0x2d	; 45
     78a:	07 fe       	sbrs	r0, 7
     78c:	fd cf       	rjmp	.-6      	; 0x788 <DataflashManager_ReadBlocks_RAM+0x16>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     78e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     790:	0d b4       	in	r0, 0x2d	; 45
     792:	07 fe       	sbrs	r0, 7
     794:	fd cf       	rjmp	.-6      	; 0x790 <DataflashManager_ReadBlocks_RAM+0x1e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     796:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     798:	0d b4       	in	r0, 0x2d	; 45
     79a:	07 fe       	sbrs	r0, 7
     79c:	fd cf       	rjmp	.-6      	; 0x798 <DataflashManager_ReadBlocks_RAM+0x26>
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     79e:	a0 e0       	ldi	r26, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7a0:	12 ed       	ldi	r17, 0xD2	; 210
     7a2:	2e c0       	rjmp	.+92     	; 0x800 <DataflashManager_ReadBlocks_RAM+0x8e>
     7a4:	b9 01       	movw	r22, r18
     7a6:	b0 e0       	ldi	r27, 0x00	; 0

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7a8:	a0 32       	cpi	r26, 0x20	; 32
     7aa:	a9 f4       	brne	.+42     	; 0x7d6 <DataflashManager_ReadBlocks_RAM+0x64>
     7ac:	1e bd       	out	0x2e, r17	; 46
				while (!(SPSR & (1 << SPIF)));
     7ae:	0d b4       	in	r0, 0x2d	; 45
     7b0:	07 fe       	sbrs	r0, 7
     7b2:	fd cf       	rjmp	.-6      	; 0x7ae <DataflashManager_ReadBlocks_RAM+0x3c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7b4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <DataflashManager_ReadBlocks_RAM+0x44>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7be:	0d b4       	in	r0, 0x2d	; 45
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <DataflashManager_ReadBlocks_RAM+0x4c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7c4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7c6:	0d b4       	in	r0, 0x2d	; 45
     7c8:	07 fe       	sbrs	r0, 7
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <DataflashManager_ReadBlocks_RAM+0x54>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <DataflashManager_ReadBlocks_RAM+0x5c>
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	fb 01       	movw	r30, r22
     7d8:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     7da:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7dc:	0d b4       	in	r0, 0x2d	; 45
     7de:	07 fe       	sbrs	r0, 7
     7e0:	fd cf       	rjmp	.-6      	; 0x7dc <DataflashManager_ReadBlocks_RAM+0x6a>
				return SPDR;
     7e2:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
     7e4:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
     7e6:	9f 5f       	subi	r25, 0xFF	; 255
     7e8:	90 31       	cpi	r25, 0x10	; 16
     7ea:	b9 f7       	brne	.-18     	; 0x7da <DataflashManager_ReadBlocks_RAM+0x68>
     7ec:	60 5f       	subi	r22, 0xF0	; 240
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     7f0:	af 5f       	subi	r26, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     7f2:	bf 5f       	subi	r27, 0xFF	; 255
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     7f4:	b0 32       	cpi	r27, 0x20	; 32
     7f6:	c1 f6       	brne	.-80     	; 0x7a8 <DataflashManager_ReadBlocks_RAM+0x36>
     7f8:	20 50       	subi	r18, 0x00	; 0
     7fa:	3e 4f       	sbci	r19, 0xFE	; 254
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     7fc:	41 50       	subi	r20, 0x01	; 1
     7fe:	50 40       	sbci	r21, 0x00	; 0
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
     800:	41 15       	cp	r20, r1
     802:	51 05       	cpc	r21, r1
     804:	79 f6       	brne	.-98     	; 0x7a4 <DataflashManager_ReadBlocks_RAM+0x32>
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     806:	1f 91       	pop	r17
     808:	08 95       	ret

0000080a <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     80a:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     80c:	87 ed       	ldi	r24, 0xD7	; 215
     80e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     810:	0d b4       	in	r0, 0x2d	; 45
     812:	07 fe       	sbrs	r0, 7
     814:	fd cf       	rjmp	.-6      	; 0x810 <DataflashManager_ResetDataflashProtections+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     816:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     818:	0d b4       	in	r0, 0x2d	; 45
     81a:	07 fe       	sbrs	r0, 7
     81c:	fd cf       	rjmp	.-6      	; 0x818 <DataflashManager_ResetDataflashProtections+0xe>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     81e:	0e b4       	in	r0, 0x2e	; 46
     820:	01 fe       	sbrs	r0, 1
     822:	14 c0       	rjmp	.+40     	; 0x84c <DataflashManager_ResetDataflashProtections+0x42>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     824:	8d e3       	ldi	r24, 0x3D	; 61
     826:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     828:	0d b4       	in	r0, 0x2d	; 45
     82a:	07 fe       	sbrs	r0, 7
     82c:	fd cf       	rjmp	.-6      	; 0x828 <DataflashManager_ResetDataflashProtections+0x1e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82e:	8a e2       	ldi	r24, 0x2A	; 42
     830:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     832:	0d b4       	in	r0, 0x2d	; 45
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <DataflashManager_ResetDataflashProtections+0x28>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     838:	8f e7       	ldi	r24, 0x7F	; 127
     83a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     83c:	0d b4       	in	r0, 0x2d	; 45
     83e:	07 fe       	sbrs	r0, 7
     840:	fd cf       	rjmp	.-6      	; 0x83c <DataflashManager_ResetDataflashProtections+0x32>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     842:	8f ec       	ldi	r24, 0xCF	; 207
     844:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     846:	0d b4       	in	r0, 0x2d	; 45
     848:	07 fe       	sbrs	r0, 7
     84a:	fd cf       	rjmp	.-6      	; 0x846 <DataflashManager_ResetDataflashProtections+0x3c>
     84c:	08 95       	ret

0000084e <DataflashManager_CheckDataflashOperation>:
     84e:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     850:	8f e9       	ldi	r24, 0x9F	; 159
     852:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     854:	0d b4       	in	r0, 0x2d	; 45
     856:	07 fe       	sbrs	r0, 7
     858:	fd cf       	rjmp	.-6      	; 0x854 <DataflashManager_CheckDataflashOperation+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     85a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_CheckDataflashOperation+0xe>
				return SPDR;
     862:	8e b5       	in	r24, 0x2e	; 46
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	8f 31       	cpi	r24, 0x1F	; 31
     868:	09 f4       	brne	.+2      	; 0x86c <DataflashManager_CheckDataflashOperation+0x1e>
     86a:	91 e0       	ldi	r25, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     86c:	89 2f       	mov	r24, r25
     86e:	08 95       	ret

00000870 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	7c 01       	movw	r14, r24
     880:	e9 01       	movw	r28, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     882:	82 ed       	ldi	r24, 0xD2	; 210
     884:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     886:	0d b4       	in	r0, 0x2d	; 45
     888:	07 fe       	sbrs	r0, 7
     88a:	fd cf       	rjmp	.-6      	; 0x886 <DataflashManager_ReadBlocks+0x16>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     88c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     88e:	0d b4       	in	r0, 0x2d	; 45
     890:	07 fe       	sbrs	r0, 7
     892:	fd cf       	rjmp	.-6      	; 0x88e <DataflashManager_ReadBlocks+0x1e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     894:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     896:	0d b4       	in	r0, 0x2d	; 45
     898:	07 fe       	sbrs	r0, 7
     89a:	fd cf       	rjmp	.-6      	; 0x896 <DataflashManager_ReadBlocks+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     89c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     89e:	0d b4       	in	r0, 0x2d	; 45
     8a0:	07 fe       	sbrs	r0, 7
     8a2:	fd cf       	rjmp	.-6      	; 0x89e <DataflashManager_ReadBlocks+0x2e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8a6:	0d b4       	in	r0, 0x2d	; 45
     8a8:	07 fe       	sbrs	r0, 7
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <DataflashManager_ReadBlocks+0x36>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     8ac:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Endpoint_WaitUntilReady>
     8b0:	88 23       	and	r24, r24
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <DataflashManager_ReadBlocks+0x46>
     8b4:	b0 c0       	rjmp	.+352    	; 0xa16 <DataflashManager_ReadBlocks+0x1a6>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     8b6:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b8:	82 ed       	ldi	r24, 0xD2	; 210
     8ba:	d8 2e       	mov	r13, r24
     8bc:	a0 c0       	rjmp	.+320    	; 0x9fe <DataflashManager_ReadBlocks+0x18e>
     8be:	00 e0       	ldi	r16, 0x00	; 0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8c0:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     8c4:	85 fd       	sbrc	r24, 5
     8c6:	0a c0       	rjmp	.+20     	; 0x8dc <DataflashManager_ReadBlocks+0x6c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c8:	80 91 e8 00 	lds	r24, 0x00E8
     8cc:	8e 77       	andi	r24, 0x7E	; 126
     8ce:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     8d2:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Endpoint_WaitUntilReady>
     8d6:	88 23       	and	r24, r24
     8d8:	09 f0       	breq	.+2      	; 0x8dc <DataflashManager_ReadBlocks+0x6c>
     8da:	9d c0       	rjmp	.+314    	; 0xa16 <DataflashManager_ReadBlocks+0x1a6>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     8dc:	10 32       	cpi	r17, 0x20	; 32
     8de:	a9 f4       	brne	.+42     	; 0x90a <DataflashManager_ReadBlocks+0x9a>
     8e0:	de bc       	out	0x2e, r13	; 46
				while (!(SPSR & (1 << SPIF)));
     8e2:	0d b4       	in	r0, 0x2d	; 45
     8e4:	07 fe       	sbrs	r0, 7
     8e6:	fd cf       	rjmp	.-6      	; 0x8e2 <DataflashManager_ReadBlocks+0x72>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8ea:	0d b4       	in	r0, 0x2d	; 45
     8ec:	07 fe       	sbrs	r0, 7
     8ee:	fd cf       	rjmp	.-6      	; 0x8ea <DataflashManager_ReadBlocks+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8f2:	0d b4       	in	r0, 0x2d	; 45
     8f4:	07 fe       	sbrs	r0, 7
     8f6:	fd cf       	rjmp	.-6      	; 0x8f2 <DataflashManager_ReadBlocks+0x82>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     8fa:	0d b4       	in	r0, 0x2d	; 45
     8fc:	07 fe       	sbrs	r0, 7
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <DataflashManager_ReadBlocks+0x8a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     900:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     902:	0d b4       	in	r0, 0x2d	; 45
     904:	07 fe       	sbrs	r0, 7
     906:	fd cf       	rjmp	.-6      	; 0x902 <DataflashManager_ReadBlocks+0x92>
     908:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     90a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     90c:	0d b4       	in	r0, 0x2d	; 45
     90e:	07 fe       	sbrs	r0, 7
     910:	fd cf       	rjmp	.-6      	; 0x90c <DataflashManager_ReadBlocks+0x9c>
				return SPDR;
     912:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     914:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     918:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     91a:	0d b4       	in	r0, 0x2d	; 45
     91c:	07 fe       	sbrs	r0, 7
     91e:	fd cf       	rjmp	.-6      	; 0x91a <DataflashManager_ReadBlocks+0xaa>
				return SPDR;
     920:	8e b5       	in	r24, 0x2e	; 46
     922:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     926:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     928:	0d b4       	in	r0, 0x2d	; 45
     92a:	07 fe       	sbrs	r0, 7
     92c:	fd cf       	rjmp	.-6      	; 0x928 <DataflashManager_ReadBlocks+0xb8>
				return SPDR;
     92e:	8e b5       	in	r24, 0x2e	; 46
     930:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     934:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     936:	0d b4       	in	r0, 0x2d	; 45
     938:	07 fe       	sbrs	r0, 7
     93a:	fd cf       	rjmp	.-6      	; 0x936 <DataflashManager_ReadBlocks+0xc6>
				return SPDR;
     93c:	8e b5       	in	r24, 0x2e	; 46
     93e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     942:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     944:	0d b4       	in	r0, 0x2d	; 45
     946:	07 fe       	sbrs	r0, 7
     948:	fd cf       	rjmp	.-6      	; 0x944 <DataflashManager_ReadBlocks+0xd4>
				return SPDR;
     94a:	8e b5       	in	r24, 0x2e	; 46
     94c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     950:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     952:	0d b4       	in	r0, 0x2d	; 45
     954:	07 fe       	sbrs	r0, 7
     956:	fd cf       	rjmp	.-6      	; 0x952 <DataflashManager_ReadBlocks+0xe2>
				return SPDR;
     958:	8e b5       	in	r24, 0x2e	; 46
     95a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     95e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     960:	0d b4       	in	r0, 0x2d	; 45
     962:	07 fe       	sbrs	r0, 7
     964:	fd cf       	rjmp	.-6      	; 0x960 <DataflashManager_ReadBlocks+0xf0>
				return SPDR;
     966:	8e b5       	in	r24, 0x2e	; 46
     968:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     96c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     96e:	0d b4       	in	r0, 0x2d	; 45
     970:	07 fe       	sbrs	r0, 7
     972:	fd cf       	rjmp	.-6      	; 0x96e <DataflashManager_ReadBlocks+0xfe>
				return SPDR;
     974:	8e b5       	in	r24, 0x2e	; 46
     976:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     97a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     97c:	0d b4       	in	r0, 0x2d	; 45
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <DataflashManager_ReadBlocks+0x10c>
				return SPDR;
     982:	8e b5       	in	r24, 0x2e	; 46
     984:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     988:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     98a:	0d b4       	in	r0, 0x2d	; 45
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <DataflashManager_ReadBlocks+0x11a>
				return SPDR;
     990:	8e b5       	in	r24, 0x2e	; 46
     992:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     996:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     998:	0d b4       	in	r0, 0x2d	; 45
     99a:	07 fe       	sbrs	r0, 7
     99c:	fd cf       	rjmp	.-6      	; 0x998 <DataflashManager_ReadBlocks+0x128>
				return SPDR;
     99e:	8e b5       	in	r24, 0x2e	; 46
     9a0:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9a4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9a6:	0d b4       	in	r0, 0x2d	; 45
     9a8:	07 fe       	sbrs	r0, 7
     9aa:	fd cf       	rjmp	.-6      	; 0x9a6 <DataflashManager_ReadBlocks+0x136>
				return SPDR;
     9ac:	8e b5       	in	r24, 0x2e	; 46
     9ae:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9b2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <DataflashManager_ReadBlocks+0x144>
				return SPDR;
     9ba:	8e b5       	in	r24, 0x2e	; 46
     9bc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9c2:	0d b4       	in	r0, 0x2d	; 45
     9c4:	07 fe       	sbrs	r0, 7
     9c6:	fd cf       	rjmp	.-6      	; 0x9c2 <DataflashManager_ReadBlocks+0x152>
				return SPDR;
     9c8:	8e b5       	in	r24, 0x2e	; 46
     9ca:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9ce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9d0:	0d b4       	in	r0, 0x2d	; 45
     9d2:	07 fe       	sbrs	r0, 7
     9d4:	fd cf       	rjmp	.-6      	; 0x9d0 <DataflashManager_ReadBlocks+0x160>
				return SPDR;
     9d6:	8e b5       	in	r24, 0x2e	; 46
     9d8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9dc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9de:	0d b4       	in	r0, 0x2d	; 45
     9e0:	07 fe       	sbrs	r0, 7
     9e2:	fd cf       	rjmp	.-6      	; 0x9de <DataflashManager_ReadBlocks+0x16e>
				return SPDR;
     9e4:	8e b5       	in	r24, 0x2e	; 46
     9e6:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     9ea:	f7 01       	movw	r30, r14
     9ec:	86 a9       	ldd	r24, Z+54	; 0x36
     9ee:	88 23       	and	r24, r24
     9f0:	91 f4       	brne	.+36     	; 0xa16 <DataflashManager_ReadBlocks+0x1a6>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     9f2:	1f 5f       	subi	r17, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     9f4:	0f 5f       	subi	r16, 0xFF	; 255
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     9f6:	00 32       	cpi	r16, 0x20	; 32
     9f8:	09 f0       	breq	.+2      	; 0x9fc <DataflashManager_ReadBlocks+0x18c>
     9fa:	62 cf       	rjmp	.-316    	; 0x8c0 <DataflashManager_ReadBlocks+0x50>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     9fc:	21 97       	sbiw	r28, 0x01	; 1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     9fe:	20 97       	sbiw	r28, 0x00	; 0
     a00:	09 f0       	breq	.+2      	; 0xa04 <DataflashManager_ReadBlocks+0x194>
     a02:	5d cf       	rjmp	.-326    	; 0x8be <DataflashManager_ReadBlocks+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a04:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     a08:	85 fd       	sbrc	r24, 5
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <DataflashManager_ReadBlocks+0x1a6>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a0c:	80 91 e8 00 	lds	r24, 0x00E8
     a10:	8e 77       	andi	r24, 0x7E	; 126
     a12:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	08 95       	ret

00000a26 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     a26:	cf 92       	push	r12
     a28:	df 92       	push	r13
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	6c 01       	movw	r12, r24
     a38:	e9 01       	movw	r28, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a3a:	84 e8       	ldi	r24, 0x84	; 132
     a3c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a3e:	0d b4       	in	r0, 0x2d	; 45
     a40:	07 fe       	sbrs	r0, 7
     a42:	fd cf       	rjmp	.-6      	; 0xa3e <DataflashManager_WriteBlocks+0x18>
	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     a44:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Endpoint_WaitUntilReady>
     a48:	88 23       	and	r24, r24
     a4a:	09 f0       	breq	.+2      	; 0xa4e <DataflashManager_WriteBlocks+0x28>
     a4c:	ab c0       	rjmp	.+342    	; 0xba4 <__stack+0xa5>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	00 e0       	ldi	r16, 0x00	; 0
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     a52:	ee 24       	eor	r14, r14
     a54:	e3 94       	inc	r14
     a56:	91 c0       	rjmp	.+290    	; 0xb7a <__stack+0x7b>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     a58:	ff 24       	eor	r15, r15
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a5a:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     a5e:	85 fd       	sbrc	r24, 5
     a60:	0a c0       	rjmp	.+20     	; 0xa76 <DataflashManager_WriteBlocks+0x50>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a62:	80 91 e8 00 	lds	r24, 0x00E8
     a66:	8b 77       	andi	r24, 0x7B	; 123
     a68:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     a6c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <Endpoint_WaitUntilReady>
     a70:	88 23       	and	r24, r24
     a72:	09 f0       	breq	.+2      	; 0xa76 <DataflashManager_WriteBlocks+0x50>
     a74:	97 c0       	rjmp	.+302    	; 0xba4 <__stack+0xa5>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     a76:	10 32       	cpi	r17, 0x20	; 32
     a78:	a9 f4       	brne	.+42     	; 0xaa4 <DataflashManager_WriteBlocks+0x7e>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     a7a:	00 23       	and	r16, r16
     a7c:	11 f4       	brne	.+4      	; 0xa82 <DataflashManager_WriteBlocks+0x5c>
     a7e:	83 e8       	ldi	r24, 0x83	; 131
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <DataflashManager_WriteBlocks+0x5e>
     a82:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a84:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a86:	0d b4       	in	r0, 0x2d	; 45
     a88:	07 fe       	sbrs	r0, 7
     a8a:	fd cf       	rjmp	.-6      	; 0xa86 <DataflashManager_WriteBlocks+0x60>
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     a8c:	2c 9b       	sbis	0x05, 4	; 5
				  UsingSecondBuffer = !(UsingSecondBuffer);
     a8e:	0e 25       	eor	r16, r14
					Dataflash_WaitWhileBusy();
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     a90:	00 23       	and	r16, r16
     a92:	11 f4       	brne	.+4      	; 0xa98 <DataflashManager_WriteBlocks+0x72>
     a94:	84 e8       	ldi	r24, 0x84	; 132
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <DataflashManager_WriteBlocks+0x74>
     a98:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     a9a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a9c:	0d b4       	in	r0, 0x2d	; 45
     a9e:	07 fe       	sbrs	r0, 7
     aa0:	fd cf       	rjmp	.-6      	; 0xa9c <DataflashManager_WriteBlocks+0x76>
     aa2:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     aa4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     aa8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     aaa:	0d b4       	in	r0, 0x2d	; 45
     aac:	07 fe       	sbrs	r0, 7
     aae:	fd cf       	rjmp	.-6      	; 0xaaa <DataflashManager_WriteBlocks+0x84>
     ab0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ab4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ab6:	0d b4       	in	r0, 0x2d	; 45
     ab8:	07 fe       	sbrs	r0, 7
     aba:	fd cf       	rjmp	.-6      	; 0xab6 <DataflashManager_WriteBlocks+0x90>
     abc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ac0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ac2:	0d b4       	in	r0, 0x2d	; 45
     ac4:	07 fe       	sbrs	r0, 7
     ac6:	fd cf       	rjmp	.-6      	; 0xac2 <DataflashManager_WriteBlocks+0x9c>
     ac8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     acc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <DataflashManager_WriteBlocks+0xa8>
     ad4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ad8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ada:	0d b4       	in	r0, 0x2d	; 45
     adc:	07 fe       	sbrs	r0, 7
     ade:	fd cf       	rjmp	.-6      	; 0xada <DataflashManager_WriteBlocks+0xb4>
     ae0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     ae4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <DataflashManager_WriteBlocks+0xc0>
     aec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     af0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     af2:	0d b4       	in	r0, 0x2d	; 45
     af4:	07 fe       	sbrs	r0, 7
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <DataflashManager_WriteBlocks+0xcc>
     af8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     afc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     afe:	0d b4       	in	r0, 0x2d	; 45
     b00:	07 fe       	sbrs	r0, 7
     b02:	fd cf       	rjmp	.-6      	; 0xafe <DataflashManager_WriteBlocks+0xd8>
     b04:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b08:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b0a:	0d b4       	in	r0, 0x2d	; 45
     b0c:	07 fe       	sbrs	r0, 7
     b0e:	fd cf       	rjmp	.-6      	; 0xb0a <__stack+0xb>
     b10:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b14:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b16:	0d b4       	in	r0, 0x2d	; 45
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <__stack+0x17>
     b1c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b20:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b22:	0d b4       	in	r0, 0x2d	; 45
     b24:	07 fe       	sbrs	r0, 7
     b26:	fd cf       	rjmp	.-6      	; 0xb22 <__stack+0x23>
     b28:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b2c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b2e:	0d b4       	in	r0, 0x2d	; 45
     b30:	07 fe       	sbrs	r0, 7
     b32:	fd cf       	rjmp	.-6      	; 0xb2e <__stack+0x2f>
     b34:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b38:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b3a:	0d b4       	in	r0, 0x2d	; 45
     b3c:	07 fe       	sbrs	r0, 7
     b3e:	fd cf       	rjmp	.-6      	; 0xb3a <__stack+0x3b>
     b40:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b44:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b46:	0d b4       	in	r0, 0x2d	; 45
     b48:	07 fe       	sbrs	r0, 7
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <__stack+0x47>
     b4c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b50:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <__stack+0x53>
     b58:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b5c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b5e:	0d b4       	in	r0, 0x2d	; 45
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <__stack+0x5f>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     b64:	f6 01       	movw	r30, r12
     b66:	86 a9       	ldd	r24, Z+54	; 0x36
     b68:	88 23       	and	r24, r24
     b6a:	e1 f4       	brne	.+56     	; 0xba4 <__stack+0xa5>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     b6c:	1f 5f       	subi	r17, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     b6e:	f3 94       	inc	r15
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     b70:	f0 e2       	ldi	r31, 0x20	; 32
     b72:	ff 16       	cp	r15, r31
     b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x79>
     b76:	71 cf       	rjmp	.-286    	; 0xa5a <DataflashManager_WriteBlocks+0x34>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     b78:	21 97       	sbiw	r28, 0x01	; 1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     b7a:	20 97       	sbiw	r28, 0x00	; 0
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__stack+0x81>
     b7e:	6c cf       	rjmp	.-296    	; 0xa58 <DataflashManager_WriteBlocks+0x32>
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     b80:	00 23       	and	r16, r16
     b82:	11 f4       	brne	.+4      	; 0xb88 <__stack+0x89>
     b84:	83 e8       	ldi	r24, 0x83	; 131
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <__stack+0x8b>
     b88:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     b8a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     b8c:	0d b4       	in	r0, 0x2d	; 45
     b8e:	07 fe       	sbrs	r0, 7
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <__stack+0x8d>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b92:	80 91 e8 00 	lds	r24, 0x00E8
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
	Dataflash_WaitWhileBusy();

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     b96:	85 fd       	sbrc	r24, 5
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <__stack+0xa5>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b9a:	80 91 e8 00 	lds	r24, 0x00E8
     b9e:	8b 77       	andi	r24, 0x7B	; 123
     ba0:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	08 95       	ret

00000bb6 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	8c 01       	movw	r16, r24
     bc0:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     bc2:	f8 01       	movw	r30, r16
     bc4:	46 8d       	ldd	r20, Z+30	; 0x1e
     bc6:	55 8d       	ldd	r21, Z+29	; 0x1d
     bc8:	64 8d       	ldd	r22, Z+28	; 0x1c
     bca:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     bcc:	c1 a1       	ldd	r28, Z+33	; 0x21
     bce:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
     bd0:	42 30       	cpi	r20, 0x02	; 2
     bd2:	51 05       	cpc	r21, r1
     bd4:	61 05       	cpc	r22, r1
     bd6:	71 05       	cpc	r23, r1
     bd8:	68 f0       	brcs	.+26     	; 0xbf4 <SCSI_Command_ReadWrite_10+0x3e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     bda:	80 91 86 01 	lds	r24, 0x0186
     bde:	80 7f       	andi	r24, 0xF0	; 240
     be0:	85 60       	ori	r24, 0x05	; 5
     be2:	80 93 86 01 	sts	0x0186, r24
     be6:	81 e2       	ldi	r24, 0x21	; 33
     be8:	80 93 90 01 	sts	0x0190, r24
     bec:	10 92 91 01 	sts	0x0191, r1
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	21 c0       	rjmp	.+66     	; 0xc36 <SCSI_Command_ReadWrite_10+0x80>

		return false;
	}
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     bf4:	88 23       	and	r24, r24
     bf6:	21 f0       	breq	.+8      	; 0xc00 <SCSI_Command_ReadWrite_10+0x4a>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     bf8:	c8 01       	movw	r24, r16
     bfa:	9e 01       	movw	r18, r28
     bfc:	39 de       	rcall	.-910    	; 0x870 <DataflashManager_ReadBlocks>
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <SCSI_Command_ReadWrite_10+0x50>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     c00:	c8 01       	movw	r24, r16
     c02:	9e 01       	movw	r18, r28
     c04:	10 df       	rcall	.-480    	; 0xa26 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     c06:	9e 01       	movw	r18, r28
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	44 1f       	adc	r20, r20
     c14:	55 1f       	adc	r21, r21
     c16:	8a 95       	dec	r24
     c18:	d1 f7       	brne	.-12     	; 0xc0e <SCSI_Command_ReadWrite_10+0x58>
     c1a:	f8 01       	movw	r30, r16
     c1c:	82 89       	ldd	r24, Z+18	; 0x12
     c1e:	93 89       	ldd	r25, Z+19	; 0x13
     c20:	a4 89       	ldd	r26, Z+20	; 0x14
     c22:	b5 89       	ldd	r27, Z+21	; 0x15
     c24:	82 1b       	sub	r24, r18
     c26:	93 0b       	sbc	r25, r19
     c28:	a4 0b       	sbc	r26, r20
     c2a:	b5 0b       	sbc	r27, r21
     c2c:	82 8b       	std	Z+18, r24	; 0x12
     c2e:	93 8b       	std	Z+19, r25	; 0x13
     c30:	a4 8b       	std	Z+20, r26	; 0x14
     c32:	b5 8b       	std	Z+21, r27	; 0x15
     c34:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	08 95       	ret

00000c40 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     c40:	cf 92       	push	r12
     c42:	df 92       	push	r13
     c44:	ef 92       	push	r14
     c46:	ff 92       	push	r15
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	28 97       	sbiw	r28, 0x08	; 8
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     c62:	fc 01       	movw	r30, r24
     c64:	81 8d       	ldd	r24, Z+25	; 0x19
     c66:	8d 31       	cpi	r24, 0x1D	; 29
     c68:	09 f4       	brne	.+2      	; 0xc6c <SCSI_DecodeSCSICommand+0x2c>
     c6a:	ac c0       	rjmp	.+344    	; 0xdc4 <SCSI_DecodeSCSICommand+0x184>
     c6c:	8e 31       	cpi	r24, 0x1E	; 30
     c6e:	78 f4       	brcc	.+30     	; 0xc8e <SCSI_DecodeSCSICommand+0x4e>
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	09 f4       	brne	.+2      	; 0xc76 <SCSI_DecodeSCSICommand+0x36>
     c74:	54 c0       	rjmp	.+168    	; 0xd1e <SCSI_DecodeSCSICommand+0xde>
     c76:	84 30       	cpi	r24, 0x04	; 4
     c78:	20 f4       	brcc	.+8      	; 0xc82 <SCSI_DecodeSCSICommand+0x42>
     c7a:	88 23       	and	r24, r24
     c7c:	09 f4       	brne	.+2      	; 0xc80 <SCSI_DecodeSCSICommand+0x40>
     c7e:	df c0       	rjmp	.+446    	; 0xe3e <SCSI_DecodeSCSICommand+0x1fe>
     c80:	e4 c0       	rjmp	.+456    	; 0xe4a <SCSI_DecodeSCSICommand+0x20a>
     c82:	82 31       	cpi	r24, 0x12	; 18
     c84:	b9 f0       	breq	.+46     	; 0xcb4 <SCSI_DecodeSCSICommand+0x74>
     c86:	8a 31       	cpi	r24, 0x1A	; 26
     c88:	09 f0       	breq	.+2      	; 0xc8c <SCSI_DecodeSCSICommand+0x4c>
     c8a:	df c0       	rjmp	.+446    	; 0xe4a <SCSI_DecodeSCSICommand+0x20a>
     c8c:	be c0       	rjmp	.+380    	; 0xe0a <SCSI_DecodeSCSICommand+0x1ca>
     c8e:	88 32       	cpi	r24, 0x28	; 40
     c90:	09 f4       	brne	.+2      	; 0xc94 <SCSI_DecodeSCSICommand+0x54>
     c92:	b5 c0       	rjmp	.+362    	; 0xdfe <SCSI_DecodeSCSICommand+0x1be>
     c94:	89 32       	cpi	r24, 0x29	; 41
     c96:	38 f4       	brcc	.+14     	; 0xca6 <SCSI_DecodeSCSICommand+0x66>
     c98:	8e 31       	cpi	r24, 0x1E	; 30
     c9a:	09 f4       	brne	.+2      	; 0xc9e <SCSI_DecodeSCSICommand+0x5e>
     c9c:	d0 c0       	rjmp	.+416    	; 0xe3e <SCSI_DecodeSCSICommand+0x1fe>
     c9e:	85 32       	cpi	r24, 0x25	; 37
     ca0:	09 f0       	breq	.+2      	; 0xca4 <SCSI_DecodeSCSICommand+0x64>
     ca2:	d3 c0       	rjmp	.+422    	; 0xe4a <SCSI_DecodeSCSICommand+0x20a>
     ca4:	61 c0       	rjmp	.+194    	; 0xd68 <SCSI_DecodeSCSICommand+0x128>
     ca6:	8a 32       	cpi	r24, 0x2A	; 42
     ca8:	09 f4       	brne	.+2      	; 0xcac <SCSI_DecodeSCSICommand+0x6c>
     caa:	a6 c0       	rjmp	.+332    	; 0xdf8 <SCSI_DecodeSCSICommand+0x1b8>
     cac:	8f 32       	cpi	r24, 0x2F	; 47
     cae:	09 f0       	breq	.+2      	; 0xcb2 <SCSI_DecodeSCSICommand+0x72>
     cb0:	cc c0       	rjmp	.+408    	; 0xe4a <SCSI_DecodeSCSICommand+0x20a>
     cb2:	c5 c0       	rjmp	.+394    	; 0xe3e <SCSI_DecodeSCSICommand+0x1fe>
     cb4:	f7 01       	movw	r30, r14
     cb6:	05 8d       	ldd	r16, Z+29	; 0x1d
     cb8:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     cba:	82 8d       	ldd	r24, Z+26	; 0x1a
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	83 70       	andi	r24, 0x03	; 3
     cc0:	90 70       	andi	r25, 0x00	; 0
     cc2:	89 2b       	or	r24, r25
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <SCSI_DecodeSCSICommand+0x88>
     cc6:	82 c0       	rjmp	.+260    	; 0xdcc <SCSI_DecodeSCSICommand+0x18c>
     cc8:	83 8d       	ldd	r24, Z+27	; 0x1b
     cca:	88 23       	and	r24, r24
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <SCSI_DecodeSCSICommand+0x90>
     cce:	7e c0       	rjmp	.+252    	; 0xdcc <SCSI_DecodeSCSICommand+0x18c>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     cd0:	68 01       	movw	r12, r16
     cd2:	05 32       	cpi	r16, 0x25	; 37
     cd4:	11 05       	cpc	r17, r1
     cd6:	18 f0       	brcs	.+6      	; 0xcde <SCSI_DecodeSCSICommand+0x9e>
     cd8:	94 e2       	ldi	r25, 0x24	; 36
     cda:	c9 2e       	mov	r12, r25
     cdc:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     cde:	86 e9       	ldi	r24, 0x96	; 150
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	b6 01       	movw	r22, r12
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	0e 94 2d 20 	call	0x405a	; 0x405a <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     cec:	c8 01       	movw	r24, r16
     cee:	8c 19       	sub	r24, r12
     cf0:	9d 09       	sbc	r25, r13
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	0e 94 7e 20 	call	0x40fc	; 0x40fc <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
     cfe:	8e 77       	andi	r24, 0x7E	; 126
     d00:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     d04:	96 01       	movw	r18, r12
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	f7 01       	movw	r30, r14
     d0c:	82 89       	ldd	r24, Z+18	; 0x12
     d0e:	93 89       	ldd	r25, Z+19	; 0x13
     d10:	a4 89       	ldd	r26, Z+20	; 0x14
     d12:	b5 89       	ldd	r27, Z+21	; 0x15
     d14:	82 1b       	sub	r24, r18
     d16:	93 0b       	sbc	r25, r19
     d18:	a4 0b       	sbc	r26, r20
     d1a:	b5 0b       	sbc	r27, r21
     d1c:	8b c0       	rjmp	.+278    	; 0xe34 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     d1e:	f7 01       	movw	r30, r14
     d20:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     d22:	01 2f       	mov	r16, r17
     d24:	13 31       	cpi	r17, 0x13	; 19
     d26:	08 f0       	brcs	.+2      	; 0xd2a <SCSI_DecodeSCSICommand+0xea>
     d28:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     d2a:	84 e8       	ldi	r24, 0x84	; 132
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	60 2f       	mov	r22, r16
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	0e 94 2d 20 	call	0x405a	; 0x405a <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     d3a:	81 2f       	mov	r24, r17
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	80 1b       	sub	r24, r16
     d40:	91 09       	sbc	r25, r1
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	0e 94 7e 20 	call	0x40fc	; 0x40fc <Endpoint_Null_Stream>
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
     d4e:	8e 77       	andi	r24, 0x7E	; 126
     d50:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     d54:	f7 01       	movw	r30, r14
     d56:	82 89       	ldd	r24, Z+18	; 0x12
     d58:	93 89       	ldd	r25, Z+19	; 0x13
     d5a:	a4 89       	ldd	r26, Z+20	; 0x14
     d5c:	b5 89       	ldd	r27, Z+21	; 0x15
     d5e:	80 1b       	sub	r24, r16
     d60:	91 09       	sbc	r25, r1
     d62:	a1 09       	sbc	r26, r1
     d64:	b1 09       	sbc	r27, r1
     d66:	66 c0       	rjmp	.+204    	; 0xe34 <SCSI_DecodeSCSICommand+0x1f4>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	ab 83       	std	Y+3, r26	; 0x03
     d76:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	8d 83       	std	Y+5, r24	; 0x05
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	af 83       	std	Y+7, r26	; 0x07
     d86:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	64 e0       	ldi	r22, 0x04	; 4
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     d98:	ce 01       	movw	r24, r28
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	64 e0       	ldi	r22, 0x04	; 4
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <Endpoint_Write_Stream_BE>
     da8:	80 91 e8 00 	lds	r24, 0x00E8
     dac:	8e 77       	andi	r24, 0x7E	; 126
     dae:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     db2:	f7 01       	movw	r30, r14
     db4:	82 89       	ldd	r24, Z+18	; 0x12
     db6:	93 89       	ldd	r25, Z+19	; 0x13
     db8:	a4 89       	ldd	r26, Z+20	; 0x14
     dba:	b5 89       	ldd	r27, Z+21	; 0x15
     dbc:	08 97       	sbiw	r24, 0x08	; 8
     dbe:	a1 09       	sbc	r26, r1
     dc0:	b1 09       	sbc	r27, r1
     dc2:	38 c0       	rjmp	.+112    	; 0xe34 <SCSI_DecodeSCSICommand+0x1f4>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     dc4:	f7 01       	movw	r30, r14
     dc6:	82 8d       	ldd	r24, Z+26	; 0x1a
     dc8:	82 fd       	sbrc	r24, 2
     dca:	08 c0       	rjmp	.+16     	; 0xddc <SCSI_DecodeSCSICommand+0x19c>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     dcc:	80 91 86 01 	lds	r24, 0x0186
     dd0:	80 7f       	andi	r24, 0xF0	; 240
     dd2:	85 60       	ori	r24, 0x05	; 5
     dd4:	80 93 86 01 	sts	0x0186, r24
     dd8:	84 e2       	ldi	r24, 0x24	; 36
     dda:	3e c0       	rjmp	.+124    	; 0xe58 <SCSI_DecodeSCSICommand+0x218>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     ddc:	38 dd       	rcall	.-1424   	; 0x84e <DataflashManager_CheckDataflashOperation>
     dde:	88 23       	and	r24, r24
     de0:	71 f5       	brne	.+92     	; 0xe3e <SCSI_DecodeSCSICommand+0x1fe>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     de2:	80 91 86 01 	lds	r24, 0x0186
     de6:	80 7f       	andi	r24, 0xF0	; 240
     de8:	84 60       	ori	r24, 0x04	; 4
     dea:	80 93 86 01 	sts	0x0186, r24
     dee:	10 92 90 01 	sts	0x0190, r1
     df2:	10 92 91 01 	sts	0x0191, r1
     df6:	33 c0       	rjmp	.+102    	; 0xe5e <SCSI_DecodeSCSICommand+0x21e>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     df8:	c7 01       	movw	r24, r14
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <SCSI_DecodeSCSICommand+0x1c2>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     dfe:	c7 01       	movw	r24, r14
     e00:	61 e0       	ldi	r22, 0x01	; 1
     e02:	d9 de       	rcall	.-590    	; 0xbb6 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     e04:	88 23       	and	r24, r24
     e06:	59 f1       	breq	.+86     	; 0xe5e <SCSI_DecodeSCSICommand+0x21e>
     e08:	2c c0       	rjmp	.+88     	; 0xe62 <SCSI_DecodeSCSICommand+0x222>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e0a:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e0e:	10 92 f1 00 	sts	0x00F1, r1
     e12:	10 92 f1 00 	sts	0x00F1, r1
     e16:	10 92 f1 00 	sts	0x00F1, r1
     e1a:	80 91 e8 00 	lds	r24, 0x00E8
     e1e:	8e 77       	andi	r24, 0x7E	; 126
     e20:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     e24:	f7 01       	movw	r30, r14
     e26:	82 89       	ldd	r24, Z+18	; 0x12
     e28:	93 89       	ldd	r25, Z+19	; 0x13
     e2a:	a4 89       	ldd	r26, Z+20	; 0x14
     e2c:	b5 89       	ldd	r27, Z+21	; 0x15
     e2e:	04 97       	sbiw	r24, 0x04	; 4
     e30:	a1 09       	sbc	r26, r1
     e32:	b1 09       	sbc	r27, r1
     e34:	82 8b       	std	Z+18, r24	; 0x12
     e36:	93 8b       	std	Z+19, r25	; 0x13
     e38:	a4 8b       	std	Z+20, r26	; 0x14
     e3a:	b5 8b       	std	Z+21, r27	; 0x15
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <SCSI_DecodeSCSICommand+0x222>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     e3e:	f7 01       	movw	r30, r14
     e40:	12 8a       	std	Z+18, r1	; 0x12
     e42:	13 8a       	std	Z+19, r1	; 0x13
     e44:	14 8a       	std	Z+20, r1	; 0x14
     e46:	15 8a       	std	Z+21, r1	; 0x15
     e48:	0c c0       	rjmp	.+24     	; 0xe62 <SCSI_DecodeSCSICommand+0x222>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     e4a:	80 91 86 01 	lds	r24, 0x0186
     e4e:	80 7f       	andi	r24, 0xF0	; 240
     e50:	85 60       	ori	r24, 0x05	; 5
     e52:	80 93 86 01 	sts	0x0186, r24
     e56:	80 e2       	ldi	r24, 0x20	; 32
     e58:	80 93 90 01 	sts	0x0190, r24
     e5c:	ca cf       	rjmp	.-108    	; 0xdf2 <SCSI_DecodeSCSICommand+0x1b2>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <SCSI_DecodeSCSICommand+0x236>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     e62:	80 91 86 01 	lds	r24, 0x0186
     e66:	80 7f       	andi	r24, 0xF0	; 240
     e68:	80 93 86 01 	sts	0x0186, r24
     e6c:	10 92 90 01 	sts	0x0190, r1
     e70:	10 92 91 01 	sts	0x0191, r1
     e74:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     e76:	28 96       	adiw	r28, 0x08	; 8
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	08 95       	ret

00000e94 <DS1307_GetTimeDate>:

	return true;
}

bool DS1307_GetTimeDate(TimeDate_t* const TimeDate)
{
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	28 97       	sbiw	r28, 0x08	; 8
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	6c 01       	movw	r12, r24
	
	return true;
#endif

	DS1307_DateTimeRegs_t CurrentRegValues;
	const uint8_t         ReadAddress = 0;
     eb4:	19 82       	std	Y+1, r1	; 0x01
	
	// Read in the stored Time and Date from the DS1307
	if (TWI_ReadPacket(DS1307_ADDRESS, 10, &ReadAddress, sizeof(ReadAddress),
     eb6:	80 ed       	ldi	r24, 0xD0	; 208
     eb8:	6a e0       	ldi	r22, 0x0A	; 10
     eba:	ae 01       	movw	r20, r28
     ebc:	4f 5f       	subi	r20, 0xFF	; 255
     ebe:	5f 4f       	sbci	r21, 0xFF	; 255
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	8e 01       	movw	r16, r28
     ec4:	0e 5f       	subi	r16, 0xFE	; 254
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	a7 e0       	ldi	r26, 0x07	; 7
     eca:	ea 2e       	mov	r14, r26
     ecc:	0e 94 d5 26 	call	0x4daa	; 0x4daa <TWI_ReadPacket>
     ed0:	88 23       	and	r24, r24
     ed2:	11 f0       	breq	.+4      	; 0xed8 <DS1307_GetTimeDate+0x44>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	78 c0       	rjmp	.+240    	; 0xfc8 <DS1307_GetTimeDate+0x134>
	{
		return false;
	}
	
	// Convert stored time value into decimal
	TimeDate->Second  = (CurrentRegValues.Byte1.Fields.TenSec  * 10) + CurrentRegValues.Byte1.Fields.Sec;
     ed8:	4a 81       	ldd	r20, Y+2	; 0x02
     eda:	24 2f       	mov	r18, r20
     edc:	22 95       	swap	r18
     ede:	2f 70       	andi	r18, 0x0F	; 15
     ee0:	82 2f       	mov	r24, r18
     ee2:	87 70       	andi	r24, 0x07	; 7
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 01       	movw	r18, r24
     ee8:	f3 e0       	ldi	r31, 0x03	; 3
     eea:	22 0f       	add	r18, r18
     eec:	33 1f       	adc	r19, r19
     eee:	fa 95       	dec	r31
     ef0:	e1 f7       	brne	.-8      	; 0xeea <DS1307_GetTimeDate+0x56>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	28 0f       	add	r18, r24
     ef8:	39 1f       	adc	r19, r25
     efa:	4f 70       	andi	r20, 0x0F	; 15
     efc:	42 0f       	add	r20, r18
     efe:	f6 01       	movw	r30, r12
     f00:	42 83       	std	Z+2, r20	; 0x02
	TimeDate->Minute  = (CurrentRegValues.Byte2.Fields.TenMin  * 10) + CurrentRegValues.Byte2.Fields.Min;
     f02:	4b 81       	ldd	r20, Y+3	; 0x03
     f04:	24 2f       	mov	r18, r20
     f06:	22 95       	swap	r18
     f08:	2f 70       	andi	r18, 0x0F	; 15
     f0a:	82 2f       	mov	r24, r18
     f0c:	87 70       	andi	r24, 0x07	; 7
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	73 e0       	ldi	r23, 0x03	; 3
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	7a 95       	dec	r23
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <DS1307_GetTimeDate+0x80>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	28 0f       	add	r18, r24
     f22:	39 1f       	adc	r19, r25
     f24:	4f 70       	andi	r20, 0x0F	; 15
     f26:	42 0f       	add	r20, r18
     f28:	41 83       	std	Z+1, r20	; 0x01
	TimeDate->Hour    = (CurrentRegValues.Byte3.Fields.TenHour * 10) + CurrentRegValues.Byte3.Fields.Hour;
     f2a:	4c 81       	ldd	r20, Y+4	; 0x04
     f2c:	24 2f       	mov	r18, r20
     f2e:	22 95       	swap	r18
     f30:	2f 70       	andi	r18, 0x0F	; 15
     f32:	82 2f       	mov	r24, r18
     f34:	83 70       	andi	r24, 0x03	; 3
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 01       	movw	r18, r24
     f3a:	53 e0       	ldi	r21, 0x03	; 3
     f3c:	22 0f       	add	r18, r18
     f3e:	33 1f       	adc	r19, r19
     f40:	5a 95       	dec	r21
     f42:	e1 f7       	brne	.-8      	; 0xf3c <DS1307_GetTimeDate+0xa8>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	28 0f       	add	r18, r24
     f4a:	39 1f       	adc	r19, r25
     f4c:	4f 70       	andi	r20, 0x0F	; 15
     f4e:	42 0f       	add	r20, r18
     f50:	40 83       	st	Z, r20

	// Convert stored date value into decimal
	TimeDate->Day    = (CurrentRegValues.Byte5.Fields.TenDay   * 10) + CurrentRegValues.Byte5.Fields.Day;
     f52:	4e 81       	ldd	r20, Y+6	; 0x06
     f54:	24 2f       	mov	r18, r20
     f56:	22 95       	swap	r18
     f58:	2f 70       	andi	r18, 0x0F	; 15
     f5a:	82 2f       	mov	r24, r18
     f5c:	83 70       	andi	r24, 0x03	; 3
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9c 01       	movw	r18, r24
     f62:	13 e0       	ldi	r17, 0x03	; 3
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	1a 95       	dec	r17
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <DS1307_GetTimeDate+0xd0>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	28 0f       	add	r18, r24
     f72:	39 1f       	adc	r19, r25
     f74:	4f 70       	andi	r20, 0x0F	; 15
     f76:	42 0f       	add	r20, r18
     f78:	43 83       	std	Z+3, r20	; 0x03
	TimeDate->Month  = (CurrentRegValues.Byte6.Fields.TenMonth * 10) + CurrentRegValues.Byte6.Fields.Month;
     f7a:	4f 81       	ldd	r20, Y+7	; 0x07
     f7c:	24 2f       	mov	r18, r20
     f7e:	22 95       	swap	r18
     f80:	2f 70       	andi	r18, 0x0F	; 15
     f82:	82 2f       	mov	r24, r18
     f84:	81 70       	andi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9c 01       	movw	r18, r24
     f8a:	a3 e0       	ldi	r26, 0x03	; 3
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	aa 95       	dec	r26
     f92:	e1 f7       	brne	.-8      	; 0xf8c <DS1307_GetTimeDate+0xf8>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	28 0f       	add	r18, r24
     f9a:	39 1f       	adc	r19, r25
     f9c:	4f 70       	andi	r20, 0x0F	; 15
     f9e:	42 0f       	add	r20, r18
     fa0:	44 83       	std	Z+4, r20	; 0x04
	TimeDate->Year   = (CurrentRegValues.Byte7.Fields.TenYear  * 10) + CurrentRegValues.Byte7.Fields.Year;
     fa2:	48 85       	ldd	r20, Y+8	; 0x08
     fa4:	84 2f       	mov	r24, r20
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	6a 95       	dec	r22
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <DS1307_GetTimeDate+0x11c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	28 0f       	add	r18, r24
     fbe:	39 1f       	adc	r19, r25
     fc0:	4f 70       	andi	r20, 0x0F	; 15
     fc2:	42 0f       	add	r20, r18
     fc4:	45 83       	std	Z+5, r20	; 0x05
     fc6:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     fc8:	28 96       	adiw	r28, 0x08	; 8
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <DS1307_SetTimeDate>:
*/

#include "DS1307.h"

bool DS1307_SetTimeDate(const TimeDate_t* NewTimeDate)
{
     fe4:	ef 92       	push	r14
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	28 97       	sbiw	r28, 0x08	; 8
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	fc 01       	movw	r30, r24
#if defined(DUMMY_RTC)
	return true;
#endif

	DS1307_DateTimeRegs_t NewRegValues;
	const uint8_t         WriteAddress = 0;
    1000:	19 82       	std	Y+1, r1	; 0x01

	// Convert new time data to the DS1307's time register layout
	NewRegValues.Byte1.Fields.TenSec    = (NewTimeDate->Second / 10);
    1002:	32 81       	ldd	r19, Z+2	; 0x02
    1004:	83 2f       	mov	r24, r19
    1006:	6a e0       	ldi	r22, 0x0A	; 10
    1008:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    100c:	28 2f       	mov	r18, r24
    100e:	27 70       	andi	r18, 0x07	; 7
    1010:	22 95       	swap	r18
    1012:	20 7f       	andi	r18, 0xF0	; 240
	NewRegValues.Byte1.Fields.Sec       = (NewTimeDate->Second % 10);
    1014:	83 2f       	mov	r24, r19
    1016:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    101a:	9f 70       	andi	r25, 0x0F	; 15
	NewRegValues.Byte1.Fields.CH        = false;
    101c:	29 2b       	or	r18, r25
    101e:	2a 83       	std	Y+2, r18	; 0x02
	NewRegValues.Byte2.Fields.TenMin    = (NewTimeDate->Minute / 10);
    1020:	41 81       	ldd	r20, Z+1	; 0x01
    1022:	84 2f       	mov	r24, r20
    1024:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    1028:	38 2f       	mov	r19, r24
    102a:	37 70       	andi	r19, 0x07	; 7
    102c:	32 95       	swap	r19
    102e:	30 7f       	andi	r19, 0xF0	; 240
    1030:	2b 81       	ldd	r18, Y+3	; 0x03
    1032:	20 78       	andi	r18, 0x80	; 128
	NewRegValues.Byte2.Fields.Min       = (NewTimeDate->Minute % 10);
    1034:	84 2f       	mov	r24, r20
    1036:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    103a:	9f 70       	andi	r25, 0x0F	; 15
    103c:	23 2b       	or	r18, r19
    103e:	29 2b       	or	r18, r25
    1040:	2b 83       	std	Y+3, r18	; 0x03
	NewRegValues.Byte3.Fields.TenHour   = (NewTimeDate->Hour / 10);
    1042:	40 81       	ld	r20, Z
    1044:	84 2f       	mov	r24, r20
    1046:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    104a:	38 2f       	mov	r19, r24
    104c:	33 70       	andi	r19, 0x03	; 3
    104e:	32 95       	swap	r19
    1050:	30 7f       	andi	r19, 0xF0	; 240
    1052:	2c 81       	ldd	r18, Y+4	; 0x04
    1054:	20 7c       	andi	r18, 0xC0	; 192
	NewRegValues.Byte3.Fields.Hour      = (NewTimeDate->Hour % 10);
    1056:	84 2f       	mov	r24, r20
    1058:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    105c:	9f 70       	andi	r25, 0x0F	; 15
    105e:	23 2b       	or	r18, r19
    1060:	29 2b       	or	r18, r25
	NewRegValues.Byte3.Fields.TwelveHourMode = false;
    1062:	2f 7b       	andi	r18, 0xBF	; 191
    1064:	2c 83       	std	Y+4, r18	; 0x04

	// Convert new date data to the DS1307's date register layout
	NewRegValues.Byte4.Fields.DayOfWeek = 0;
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	88 7f       	andi	r24, 0xF8	; 248
    106a:	8d 83       	std	Y+5, r24	; 0x05
	NewRegValues.Byte5.Fields.TenDay    = (NewTimeDate->Day / 10);
    106c:	43 81       	ldd	r20, Z+3	; 0x03
    106e:	84 2f       	mov	r24, r20
    1070:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    1074:	38 2f       	mov	r19, r24
    1076:	33 70       	andi	r19, 0x03	; 3
    1078:	32 95       	swap	r19
    107a:	30 7f       	andi	r19, 0xF0	; 240
    107c:	2e 81       	ldd	r18, Y+6	; 0x06
    107e:	20 7c       	andi	r18, 0xC0	; 192
	NewRegValues.Byte5.Fields.Day       = (NewTimeDate->Day % 10);
    1080:	84 2f       	mov	r24, r20
    1082:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    1086:	9f 70       	andi	r25, 0x0F	; 15
    1088:	23 2b       	or	r18, r19
    108a:	29 2b       	or	r18, r25
    108c:	2e 83       	std	Y+6, r18	; 0x06
	NewRegValues.Byte6.Fields.TenMonth  = (NewTimeDate->Month / 10);
    108e:	44 81       	ldd	r20, Z+4	; 0x04
    1090:	84 2f       	mov	r24, r20
    1092:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    1096:	38 2f       	mov	r19, r24
    1098:	31 70       	andi	r19, 0x01	; 1
    109a:	32 95       	swap	r19
    109c:	30 7f       	andi	r19, 0xF0	; 240
    109e:	2f 81       	ldd	r18, Y+7	; 0x07
    10a0:	20 7e       	andi	r18, 0xE0	; 224
	NewRegValues.Byte6.Fields.Month     = (NewTimeDate->Month % 10);
    10a2:	84 2f       	mov	r24, r20
    10a4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    10a8:	9f 70       	andi	r25, 0x0F	; 15
    10aa:	23 2b       	or	r18, r19
    10ac:	29 2b       	or	r18, r25
    10ae:	2f 83       	std	Y+7, r18	; 0x07
	NewRegValues.Byte7.Fields.TenYear   = (NewTimeDate->Year / 10);
    10b0:	25 81       	ldd	r18, Z+5	; 0x05
    10b2:	82 2f       	mov	r24, r18
    10b4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    10b8:	38 2f       	mov	r19, r24
    10ba:	32 95       	swap	r19
    10bc:	30 7f       	andi	r19, 0xF0	; 240
	NewRegValues.Byte7.Fields.Year      = (NewTimeDate->Year % 10);
    10be:	82 2f       	mov	r24, r18
    10c0:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__udivmodqi4>
    10c4:	9f 70       	andi	r25, 0x0F	; 15
    10c6:	93 2b       	or	r25, r19
    10c8:	98 87       	std	Y+8, r25	; 0x08
	
	// Write the new Time and Date into the DS1307
	if (TWI_WritePacket(DS1307_ADDRESS, 10, &WriteAddress, sizeof(WriteAddress),
    10ca:	80 ed       	ldi	r24, 0xD0	; 208
    10cc:	ae 01       	movw	r20, r28
    10ce:	4f 5f       	subi	r20, 0xFF	; 255
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	8e 01       	movw	r16, r28
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	b7 e0       	ldi	r27, 0x07	; 7
    10dc:	eb 2e       	mov	r14, r27
    10de:	0e 94 18 27 	call	0x4e30	; 0x4e30 <TWI_WritePacket>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <DS1307_SetTimeDate+0x106>
    10e8:	91 e0       	ldi	r25, 0x01	; 1
	{
		return false;
	}

	return true;
}
    10ea:	89 2f       	mov	r24, r25
    10ec:	28 96       	adiw	r28, 0x08	; 8
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ef 90       	pop	r14
    1102:	08 95       	ret

00001104 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	08 95       	ret

00001108 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret

0000110c <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    110c:	66 23       	and	r22, r22
    110e:	11 f0       	breq	.+4      	; 0x1114 <disk_ioctl+0x8>
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	08 95       	ret
    1114:	80 e0       	ldi	r24, 0x00	; 0
	  return RES_OK;
	else
	  return RES_PARERR;
}
    1116:	08 95       	ret

00001118 <get_fattime>:


DWORD get_fattime (void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <get_fattime+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <get_fattime+0x8>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <get_fattime+0xa>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
	TimeDate_t CurrTimeDate;

	DS1307_GetTimeDate(&CurrTimeDate);
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	b4 de       	rcall	.-664    	; 0xe94 <DS1307_GetTimeDate>
    112c:	2c 81       	ldd	r18, Y+4	; 0x04
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	a9 01       	movw	r20, r18
    1136:	33 27       	eor	r19, r19
    1138:	22 27       	eor	r18, r18
    113a:	8d 81       	ldd	r24, Y+5	; 0x05
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	f5 e1       	ldi	r31, 0x15	; 21
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	aa 1f       	adc	r26, r26
    114a:	bb 1f       	adc	r27, r27
    114c:	fa 95       	dec	r31
    114e:	d1 f7       	brne	.-12     	; 0x1144 <get_fattime+0x2c>
    1150:	28 2b       	or	r18, r24
    1152:	39 2b       	or	r19, r25
    1154:	4a 2b       	or	r20, r26
    1156:	5b 2b       	or	r21, r27
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	eb e0       	ldi	r30, 0x0B	; 11
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	aa 1f       	adc	r26, r26
    1168:	bb 1f       	adc	r27, r27
    116a:	ea 95       	dec	r30
    116c:	d1 f7       	brne	.-12     	; 0x1162 <get_fattime+0x4a>
    116e:	28 2b       	or	r18, r24
    1170:	39 2b       	or	r19, r25
    1172:	4a 2b       	or	r20, r26
    1174:	5b 2b       	or	r21, r27
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	75 e0       	ldi	r23, 0x05	; 5
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	aa 1f       	adc	r26, r26
    1186:	bb 1f       	adc	r27, r27
    1188:	7a 95       	dec	r23
    118a:	d1 f7       	brne	.-12     	; 0x1180 <get_fattime+0x68>
    118c:	28 2b       	or	r18, r24
    118e:	39 2b       	or	r19, r25
    1190:	4a 2b       	or	r20, r26
    1192:	5b 2b       	or	r21, r27
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	86 95       	lsr	r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a0 e0       	ldi	r26, 0x00	; 0
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	28 2b       	or	r18, r24
    11a0:	39 2b       	or	r19, r25
    11a2:	4a 2b       	or	r20, r26
    11a4:	5b 2b       	or	r21, r27
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	44 96       	adiw	r24, 0x14	; 20
    11ac:	aa 27       	eor	r26, r26
    11ae:	97 fd       	sbrc	r25, 7
    11b0:	a0 95       	com	r26
    11b2:	ba 2f       	mov	r27, r26
    11b4:	69 e1       	ldi	r22, 0x19	; 25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	6a 95       	dec	r22
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <get_fattime+0x9e>
    11c2:	28 2b       	or	r18, r24
    11c4:	39 2b       	or	r19, r25
    11c6:	4a 2b       	or	r20, r26
    11c8:	5b 2b       	or	r21, r27
	             ((DWORD)CurrTimeDate.Month << 21) |
	               ((DWORD)CurrTimeDate.Day << 16) |
	              ((DWORD)CurrTimeDate.Hour << 11) |
	             ((DWORD)CurrTimeDate.Minute << 5) |
	      (((DWORD)CurrTimeDate.Second >> 1) << 0);
}
    11ca:	b9 01       	movw	r22, r18
    11cc:	ca 01       	movw	r24, r20
    11ce:	26 96       	adiw	r28, 0x06	; 6
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
    11e0:	0f 93       	push	r16
    11e2:	fb 01       	movw	r30, r22
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    11e4:	ca 01       	movw	r24, r20
    11e6:	b9 01       	movw	r22, r18
    11e8:	40 2f       	mov	r20, r16
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	9f 01       	movw	r18, r30
    11ee:	7a da       	rcall	.-2828   	; 0x6e4 <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
    11f6:	0f 93       	push	r16
    11f8:	fb 01       	movw	r30, r22
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    11fa:	ca 01       	movw	r24, r20
    11fc:	b9 01       	movw	r22, r18
    11fe:	40 2f       	mov	r20, r16
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	9f 01       	movw	r18, r30
    1204:	b6 da       	rcall	.-2708   	; 0x772 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	0c c0       	rjmp	.+24     	; 0x1230 <mem_cpy+0x24>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    1218:	fe 01       	movw	r30, r28
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	db 01       	movw	r26, r22
    1220:	a2 0f       	add	r26, r18
    1222:	b3 1f       	adc	r27, r19
    1224:	8c 91       	ld	r24, X
    1226:	80 83       	st	Z, r24
    1228:	2f 5f       	subi	r18, 0xFF	; 255
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	41 50       	subi	r20, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    1230:	41 15       	cp	r20, r1
    1232:	51 05       	cpc	r21, r1
    1234:	89 f7       	brne	.-30     	; 0x1218 <mem_cpy+0xc>
		*d++ = *s++;
}
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	08 95       	ret

0000123c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    123c:	fc 01       	movw	r30, r24
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <mem_set+0xa>

	while (cnt--)
		*d++ = (BYTE)val;
    1240:	61 93       	st	Z+, r22
    1242:	41 50       	subi	r20, 0x01	; 1
    1244:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1246:	41 15       	cp	r20, r1
    1248:	51 05       	cpc	r21, r1
    124a:	d1 f7       	brne	.-12     	; 0x1240 <mem_set+0x4>
		*d++ = (BYTE)val;
}
    124c:	08 95       	ret

0000124e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
    125c:	7a 01       	movw	r14, r20
    125e:	8b 01       	movw	r16, r22
	clst -= 2;
    1260:	8e ef       	ldi	r24, 0xFE	; 254
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	af ef       	ldi	r26, 0xFF	; 255
    1266:	bf ef       	ldi	r27, 0xFF	; 255
    1268:	e8 0e       	add	r14, r24
    126a:	f9 1e       	adc	r15, r25
    126c:	0a 1f       	adc	r16, r26
    126e:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1270:	88 8d       	ldd	r24, Y+24	; 0x18
    1272:	99 8d       	ldd	r25, Y+25	; 0x19
    1274:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1276:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1278:	02 97       	sbiw	r24, 0x02	; 2
    127a:	a1 09       	sbc	r26, r1
    127c:	b1 09       	sbc	r27, r1
    127e:	e8 16       	cp	r14, r24
    1280:	f9 06       	cpc	r15, r25
    1282:	0a 07       	cpc	r16, r26
    1284:	1b 07       	cpc	r17, r27
    1286:	28 f0       	brcs	.+10     	; 0x1292 <clust2sect+0x44>
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	12 c0       	rjmp	.+36     	; 0x12b6 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    1292:	2a 81       	ldd	r18, Y+2	; 0x02
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	c8 01       	movw	r24, r16
    129c:	b7 01       	movw	r22, r14
    129e:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <__mulsi3>
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	88 a5       	ldd	r24, Y+40	; 0x28
    12a8:	99 a5       	ldd	r25, Y+41	; 0x29
    12aa:	aa a5       	ldd	r26, Y+42	; 0x2a
    12ac:	bb a5       	ldd	r27, Y+43	; 0x2b
    12ae:	28 0f       	add	r18, r24
    12b0:	39 1f       	adc	r19, r25
    12b2:	4a 1f       	adc	r20, r26
    12b4:	5b 1f       	adc	r21, r27
}
    12b6:	b9 01       	movw	r22, r18
    12b8:	ca 01       	movw	r24, r20
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    12c8:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    12ca:	88 23       	and	r24, r24
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <f_mount+0xa>
    12ce:	8b e0       	ldi	r24, 0x0B	; 11
    12d0:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    12d2:	e0 91 24 06 	lds	r30, 0x0624
    12d6:	f0 91 25 06 	lds	r31, 0x0625

	if (rfs) {
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <f_mount+0x18>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    12de:	10 82       	st	Z, r1
	}

	if (fs) {
    12e0:	10 97       	sbiw	r26, 0x00	; 0
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    12e4:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    12e6:	b0 93 25 06 	sts	0x0625, r27
    12ea:	a0 93 24 06 	sts	0x0624, r26
    12ee:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    12f0:	08 95       	ret

000012f2 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    12f2:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	81 f0       	breq	.+32     	; 0x1318 <validate+0x26>
    12f8:	80 81       	ld	r24, Z
    12fa:	88 23       	and	r24, r24
    12fc:	69 f0       	breq	.+26     	; 0x1318 <validate+0x26>
    12fe:	86 81       	ldd	r24, Z+6	; 0x06
    1300:	97 81       	ldd	r25, Z+7	; 0x07
    1302:	86 17       	cp	r24, r22
    1304:	97 07       	cpc	r25, r23
    1306:	41 f4       	brne	.+16     	; 0x1318 <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	fe de       	rcall	.-516    	; 0x1108 <disk_status>
    130c:	80 fd       	sbrc	r24, 0
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <validate+0x22>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	08 95       	ret
    1318:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    131a:	08 95       	ret

0000131c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	4a 01       	movw	r8, r20
    133c:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    133e:	cc a4       	ldd	r12, Y+44	; 0x2c
    1340:	dd a4       	ldd	r13, Y+45	; 0x2d
    1342:	ee a4       	ldd	r14, Y+46	; 0x2e
    1344:	ff a4       	ldd	r15, Y+47	; 0x2f
	if (wsect != sector) {	/* Changed current window */
    1346:	c4 16       	cp	r12, r20
    1348:	d5 06       	cpc	r13, r21
    134a:	e6 06       	cpc	r14, r22
    134c:	f7 06       	cpc	r15, r23
    134e:	09 f4       	brne	.+2      	; 0x1352 <move_window+0x36>
    1350:	4b c0       	rjmp	.+150    	; 0x13e8 <move_window+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	88 23       	and	r24, r24
    1356:	91 f1       	breq	.+100    	; 0x13bc <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1358:	80 e3       	ldi	r24, 0x30	; 48
    135a:	68 2e       	mov	r6, r24
    135c:	71 2c       	mov	r7, r1
    135e:	6c 0e       	add	r6, r28
    1360:	7d 1e       	adc	r7, r29
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	b3 01       	movw	r22, r6
    1366:	a7 01       	movw	r20, r14
    1368:	96 01       	movw	r18, r12
    136a:	01 e0       	ldi	r16, 0x01	; 1
    136c:	39 df       	rcall	.-398    	; 0x11e0 <disk_write>
    136e:	88 23       	and	r24, r24
    1370:	c9 f5       	brne	.+114    	; 0x13e4 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1372:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1374:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1376:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1378:	ae 8d       	ldd	r26, Y+30	; 0x1e
    137a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    137c:	28 a1       	ldd	r18, Y+32	; 0x20
    137e:	39 a1       	ldd	r19, Y+33	; 0x21
    1380:	4a a1       	ldd	r20, Y+34	; 0x22
    1382:	5b a1       	ldd	r21, Y+35	; 0x23
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	a4 1f       	adc	r26, r20
    138a:	b5 1f       	adc	r27, r21
    138c:	c8 16       	cp	r12, r24
    138e:	d9 06       	cpc	r13, r25
    1390:	ea 06       	cpc	r14, r26
    1392:	fb 06       	cpc	r15, r27
    1394:	98 f4       	brcc	.+38     	; 0x13bc <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1396:	1b 81       	ldd	r17, Y+3	; 0x03
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <move_window+0x9c>
					wsect += fs->fsize;
    139a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    139c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    139e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    13a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
    13a2:	c8 0e       	add	r12, r24
    13a4:	d9 1e       	adc	r13, r25
    13a6:	ea 1e       	adc	r14, r26
    13a8:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	b3 01       	movw	r22, r6
    13ae:	a7 01       	movw	r20, r14
    13b0:	96 01       	movw	r18, r12
    13b2:	01 e0       	ldi	r16, 0x01	; 1
    13b4:	15 df       	rcall	.-470    	; 0x11e0 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    13b6:	11 50       	subi	r17, 0x01	; 1
    13b8:	12 30       	cpi	r17, 0x02	; 2
    13ba:	78 f7       	brcc	.-34     	; 0x139a <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    13bc:	81 14       	cp	r8, r1
    13be:	91 04       	cpc	r9, r1
    13c0:	a1 04       	cpc	r10, r1
    13c2:	b1 04       	cpc	r11, r1
    13c4:	89 f0       	breq	.+34     	; 0x13e8 <move_window+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    13c6:	be 01       	movw	r22, r28
    13c8:	60 5d       	subi	r22, 0xD0	; 208
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	a5 01       	movw	r20, r10
    13d0:	94 01       	movw	r18, r8
    13d2:	01 e0       	ldi	r16, 0x01	; 1
    13d4:	10 df       	rcall	.-480    	; 0x11f6 <disk_read>
    13d6:	88 23       	and	r24, r24
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->winsect = sector;
    13da:	8c a6       	std	Y+44, r8	; 0x2c
    13dc:	9d a6       	std	Y+45, r9	; 0x2d
    13de:	ae a6       	std	Y+46, r10	; 0x2e
    13e0:	bf a6       	std	Y+47, r11	; 0x2f
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <move_window+0xce>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <move_window+0xce>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	08 95       	ret

00001408 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1408:	6f 92       	push	r6
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	5c 01       	movw	r10, r24
    1426:	6a 01       	movw	r12, r20
    1428:	7b 01       	movw	r14, r22
    142a:	38 01       	movw	r6, r16
    142c:	49 01       	movw	r8, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    142e:	42 30       	cpi	r20, 0x02	; 2
    1430:	51 05       	cpc	r21, r1
    1432:	61 05       	cpc	r22, r1
    1434:	71 05       	cpc	r23, r1
    1436:	08 f4       	brcc	.+2      	; 0x143a <put_fat+0x32>
    1438:	13 c1       	rjmp	.+550    	; 0x1660 <put_fat+0x258>
    143a:	e5 01       	movw	r28, r10
    143c:	88 8d       	ldd	r24, Y+24	; 0x18
    143e:	99 8d       	ldd	r25, Y+25	; 0x19
    1440:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1442:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1444:	48 17       	cp	r20, r24
    1446:	59 07       	cpc	r21, r25
    1448:	6a 07       	cpc	r22, r26
    144a:	7b 07       	cpc	r23, r27
    144c:	08 f0       	brcs	.+2      	; 0x1450 <put_fat+0x48>
    144e:	08 c1       	rjmp	.+528    	; 0x1660 <put_fat+0x258>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1450:	88 81       	ld	r24, Y
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	09 f4       	brne	.+2      	; 0x1458 <put_fat+0x50>
    1456:	7b c0       	rjmp	.+246    	; 0x154e <put_fat+0x146>
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	09 f4       	brne	.+2      	; 0x145e <put_fat+0x56>
    145c:	a9 c0       	rjmp	.+338    	; 0x15b0 <put_fat+0x1a8>
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	11 f0       	breq	.+4      	; 0x1466 <put_fat+0x5e>
    1462:	12 e0       	ldi	r17, 0x02	; 2
    1464:	f9 c0       	rjmp	.+498    	; 0x1658 <put_fat+0x250>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1466:	ea 01       	movw	r28, r20
    1468:	d6 95       	lsr	r29
    146a:	c7 95       	ror	r28
    146c:	c4 0f       	add	r28, r20
    146e:	d5 1f       	adc	r29, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1470:	f5 01       	movw	r30, r10
    1472:	62 85       	ldd	r22, Z+10	; 0x0a
    1474:	73 85       	ldd	r23, Z+11	; 0x0b
    1476:	ce 01       	movw	r24, r28
    1478:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    147c:	ab 01       	movw	r20, r22
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	80 a1       	ldd	r24, Z+32	; 0x20
    1484:	91 a1       	ldd	r25, Z+33	; 0x21
    1486:	a2 a1       	ldd	r26, Z+34	; 0x22
    1488:	b3 a1       	ldd	r27, Z+35	; 0x23
    148a:	48 0f       	add	r20, r24
    148c:	59 1f       	adc	r21, r25
    148e:	6a 1f       	adc	r22, r26
    1490:	7b 1f       	adc	r23, r27
    1492:	c5 01       	movw	r24, r10
    1494:	43 df       	rcall	.-378    	; 0x131c <move_window>
    1496:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1498:	88 23       	and	r24, r24
    149a:	09 f0       	breq	.+2      	; 0x149e <put_fat+0x96>
    149c:	dd c0       	rjmp	.+442    	; 0x1658 <put_fat+0x250>
			p = &fs->win[bc % SS(fs)];
    149e:	f5 01       	movw	r30, r10
    14a0:	62 85       	ldd	r22, Z+10	; 0x0a
    14a2:	73 85       	ldd	r23, Z+11	; 0x0b
    14a4:	ce 01       	movw	r24, r28
    14a6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    14aa:	dc 01       	movw	r26, r24
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	e9 2e       	mov	r14, r25
    14b0:	f1 2c       	mov	r15, r1
    14b2:	ec 20       	and	r14, r12
    14b4:	fd 20       	and	r15, r13
    14b6:	e1 14       	cp	r14, r1
    14b8:	f1 04       	cpc	r15, r1
    14ba:	49 f0       	breq	.+18     	; 0x14ce <put_fat+0xc6>
    14bc:	ea 0f       	add	r30, r26
    14be:	fb 1f       	adc	r31, r27
    14c0:	80 a9       	ldd	r24, Z+48	; 0x30
    14c2:	8f 70       	andi	r24, 0x0F	; 15
    14c4:	96 2d       	mov	r25, r6
    14c6:	92 95       	swap	r25
    14c8:	90 7f       	andi	r25, 0xF0	; 240
    14ca:	98 2b       	or	r25, r24
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <put_fat+0xc8>
    14ce:	96 2d       	mov	r25, r6
    14d0:	aa 0d       	add	r26, r10
    14d2:	bb 1d       	adc	r27, r11
    14d4:	d0 96       	adiw	r26, 0x30	; 48
    14d6:	9c 93       	st	X, r25
			bc++;
    14d8:	21 96       	adiw	r28, 0x01	; 1
			fs->wflag = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	f5 01       	movw	r30, r10
    14de:	84 83       	std	Z+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    14e0:	62 85       	ldd	r22, Z+10	; 0x0a
    14e2:	73 85       	ldd	r23, Z+11	; 0x0b
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    14ea:	ab 01       	movw	r20, r22
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 a1       	ldd	r24, Z+32	; 0x20
    14f2:	91 a1       	ldd	r25, Z+33	; 0x21
    14f4:	a2 a1       	ldd	r26, Z+34	; 0x22
    14f6:	b3 a1       	ldd	r27, Z+35	; 0x23
    14f8:	48 0f       	add	r20, r24
    14fa:	59 1f       	adc	r21, r25
    14fc:	6a 1f       	adc	r22, r26
    14fe:	7b 1f       	adc	r23, r27
    1500:	c5 01       	movw	r24, r10
    1502:	0c df       	rcall	.-488    	; 0x131c <move_window>
    1504:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1506:	88 23       	and	r24, r24
    1508:	09 f0       	breq	.+2      	; 0x150c <put_fat+0x104>
    150a:	a6 c0       	rjmp	.+332    	; 0x1658 <put_fat+0x250>
			p = &fs->win[bc % SS(fs)];
    150c:	f5 01       	movw	r30, r10
    150e:	62 85       	ldd	r22, Z+10	; 0x0a
    1510:	73 85       	ldd	r23, Z+11	; 0x0b
    1512:	ce 01       	movw	r24, r28
    1514:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1518:	ec 01       	movw	r28, r24
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    151a:	ef 28       	or	r14, r15
    151c:	49 f0       	breq	.+18     	; 0x1530 <put_fat+0x128>
    151e:	84 e0       	ldi	r24, 0x04	; 4
    1520:	96 94       	lsr	r9
    1522:	87 94       	ror	r8
    1524:	77 94       	ror	r7
    1526:	67 94       	ror	r6
    1528:	8a 95       	dec	r24
    152a:	d1 f7       	brne	.-12     	; 0x1520 <put_fat+0x118>
    152c:	46 2d       	mov	r20, r6
    152e:	0b c0       	rjmp	.+22     	; 0x1546 <put_fat+0x13e>
    1530:	f5 01       	movw	r30, r10
    1532:	e8 0f       	add	r30, r24
    1534:	f9 1f       	adc	r31, r25
    1536:	40 a9       	ldd	r20, Z+48	; 0x30
    1538:	40 7f       	andi	r20, 0xF0	; 240
    153a:	bb 27       	eor	r27, r27
    153c:	a9 2d       	mov	r26, r9
    153e:	98 2d       	mov	r25, r8
    1540:	87 2d       	mov	r24, r7
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	48 2b       	or	r20, r24
    1546:	ca 0d       	add	r28, r10
    1548:	db 1d       	adc	r29, r11
    154a:	48 ab       	std	Y+48, r20	; 0x30
    154c:	85 c0       	rjmp	.+266    	; 0x1658 <put_fat+0x250>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    154e:	e5 01       	movw	r28, r10
    1550:	2a 85       	ldd	r18, Y+10	; 0x0a
    1552:	3b 85       	ldd	r19, Y+11	; 0x0b
    1554:	36 95       	lsr	r19
    1556:	27 95       	ror	r18
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	c7 01       	movw	r24, r14
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1564:	da 01       	movw	r26, r20
    1566:	c9 01       	movw	r24, r18
    1568:	48 a1       	ldd	r20, Y+32	; 0x20
    156a:	59 a1       	ldd	r21, Y+33	; 0x21
    156c:	6a a1       	ldd	r22, Y+34	; 0x22
    156e:	7b a1       	ldd	r23, Y+35	; 0x23
    1570:	48 0f       	add	r20, r24
    1572:	59 1f       	adc	r21, r25
    1574:	6a 1f       	adc	r22, r26
    1576:	7b 1f       	adc	r23, r27
    1578:	c5 01       	movw	r24, r10
    157a:	d0 de       	rcall	.-608    	; 0x131c <move_window>
    157c:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    157e:	88 23       	and	r24, r24
    1580:	09 f0       	breq	.+2      	; 0x1584 <put_fat+0x17c>
    1582:	6a c0       	rjmp	.+212    	; 0x1658 <put_fat+0x250>
			p = &fs->win[clst * 2 % SS(fs)];
    1584:	cc 0c       	add	r12, r12
    1586:	dd 1c       	adc	r13, r13
    1588:	ee 1c       	adc	r14, r14
    158a:	ff 1c       	adc	r15, r15
    158c:	2a 85       	ldd	r18, Y+10	; 0x0a
    158e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	c7 01       	movw	r24, r14
    1596:	b6 01       	movw	r22, r12
    1598:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
			ST_WORD(p, (WORD)val);
    15a0:	f5 01       	movw	r30, r10
    15a2:	e8 0f       	add	r30, r24
    15a4:	f9 1f       	adc	r31, r25
    15a6:	60 aa       	std	Z+48, r6	; 0x30
    15a8:	27 2d       	mov	r18, r7
    15aa:	33 27       	eor	r19, r19
    15ac:	21 ab       	std	Z+49, r18	; 0x31
    15ae:	54 c0       	rjmp	.+168    	; 0x1658 <put_fat+0x250>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    15b0:	e5 01       	movw	r28, r10
    15b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15b4:	3b 85       	ldd	r19, Y+11	; 0x0b
    15b6:	36 95       	lsr	r19
    15b8:	27 95       	ror	r18
    15ba:	36 95       	lsr	r19
    15bc:	27 95       	ror	r18
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	c7 01       	movw	r24, r14
    15c4:	b6 01       	movw	r22, r12
    15c6:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    15ca:	da 01       	movw	r26, r20
    15cc:	c9 01       	movw	r24, r18
    15ce:	48 a1       	ldd	r20, Y+32	; 0x20
    15d0:	59 a1       	ldd	r21, Y+33	; 0x21
    15d2:	6a a1       	ldd	r22, Y+34	; 0x22
    15d4:	7b a1       	ldd	r23, Y+35	; 0x23
    15d6:	48 0f       	add	r20, r24
    15d8:	59 1f       	adc	r21, r25
    15da:	6a 1f       	adc	r22, r26
    15dc:	7b 1f       	adc	r23, r27
    15de:	c5 01       	movw	r24, r10
    15e0:	9d de       	rcall	.-710    	; 0x131c <move_window>
    15e2:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    15e4:	88 23       	and	r24, r24
    15e6:	c1 f5       	brne	.+112    	; 0x1658 <put_fat+0x250>
			p = &fs->win[clst * 4 % SS(fs)];
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	cc 0c       	add	r12, r12
    15ec:	dd 1c       	adc	r13, r13
    15ee:	ee 1c       	adc	r14, r14
    15f0:	ff 1c       	adc	r15, r15
    15f2:	6a 95       	dec	r22
    15f4:	d1 f7       	brne	.-12     	; 0x15ea <put_fat+0x1e2>
    15f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    15f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	20 5d       	subi	r18, 0xD0	; 208
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	f5 01       	movw	r30, r10
    1610:	e2 0f       	add	r30, r18
    1612:	f3 1f       	adc	r31, r19
    1614:	20 53       	subi	r18, 0x30	; 48
    1616:	30 40       	sbci	r19, 0x00	; 0
			val |= LD_DWORD(p) & 0xF0000000;
    1618:	83 81       	ldd	r24, Z+3	; 0x03
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	b8 2f       	mov	r27, r24
    1622:	aa 27       	eor	r26, r26
    1624:	99 27       	eor	r25, r25
    1626:	88 27       	eor	r24, r24
    1628:	2a 0d       	add	r18, r10
    162a:	3b 1d       	adc	r19, r11
    162c:	80 70       	andi	r24, 0x00	; 0
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	a0 70       	andi	r26, 0x00	; 0
    1632:	b0 7f       	andi	r27, 0xF0	; 240
    1634:	86 29       	or	r24, r6
    1636:	97 29       	or	r25, r7
    1638:	a8 29       	or	r26, r8
    163a:	b9 29       	or	r27, r9
			ST_DWORD(p, val);
    163c:	e9 01       	movw	r28, r18
    163e:	88 ab       	std	Y+48, r24	; 0x30
    1640:	29 2f       	mov	r18, r25
    1642:	33 27       	eor	r19, r19
    1644:	21 83       	std	Z+1, r18	; 0x01
    1646:	9d 01       	movw	r18, r26
    1648:	44 27       	eor	r20, r20
    164a:	55 27       	eor	r21, r21
    164c:	22 83       	std	Z+2, r18	; 0x02
    164e:	8b 2f       	mov	r24, r27
    1650:	99 27       	eor	r25, r25
    1652:	aa 27       	eor	r26, r26
    1654:	bb 27       	eor	r27, r27
    1656:	83 83       	std	Z+3, r24	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	f5 01       	movw	r30, r10
    165c:	84 83       	std	Z+4, r24	; 0x04
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <put_fat+0x25a>
    1660:	12 e0       	ldi	r17, 0x02	; 2
	}

	return res;
}
    1662:	81 2f       	mov	r24, r17
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	08 95       	ret

00001682 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	7a 01       	movw	r14, r20
    1698:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    169a:	42 30       	cpi	r20, 0x02	; 2
    169c:	51 05       	cpc	r21, r1
    169e:	61 05       	cpc	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <get_fat+0x24>
    16a4:	06 c1       	rjmp	.+524    	; 0x18b2 <get_fat+0x230>
    16a6:	88 8d       	ldd	r24, Y+24	; 0x18
    16a8:	99 8d       	ldd	r25, Y+25	; 0x19
    16aa:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16ac:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16ae:	48 17       	cp	r20, r24
    16b0:	59 07       	cpc	r21, r25
    16b2:	6a 07       	cpc	r22, r26
    16b4:	7b 07       	cpc	r23, r27
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <get_fat+0x38>
    16b8:	fc c0       	rjmp	.+504    	; 0x18b2 <get_fat+0x230>
		return 1;

	switch (fs->fs_type) {
    16ba:	88 81       	ld	r24, Y
    16bc:	82 30       	cpi	r24, 0x02	; 2
    16be:	09 f4       	brne	.+2      	; 0x16c2 <get_fat+0x40>
    16c0:	62 c0       	rjmp	.+196    	; 0x1786 <get_fat+0x104>
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <get_fat+0x46>
    16c6:	93 c0       	rjmp	.+294    	; 0x17ee <get_fat+0x16c>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	09 f0       	breq	.+2      	; 0x16ce <get_fat+0x4c>
    16cc:	f8 c0       	rjmp	.+496    	; 0x18be <get_fat+0x23c>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    16ce:	6a 01       	movw	r12, r20
    16d0:	d6 94       	lsr	r13
    16d2:	c7 94       	ror	r12
    16d4:	c4 0e       	add	r12, r20
    16d6:	d5 1e       	adc	r13, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    16d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    16da:	7b 85       	ldd	r23, Y+11	; 0x0b
    16dc:	c6 01       	movw	r24, r12
    16de:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    16e2:	ab 01       	movw	r20, r22
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	88 a1       	ldd	r24, Y+32	; 0x20
    16ea:	99 a1       	ldd	r25, Y+33	; 0x21
    16ec:	aa a1       	ldd	r26, Y+34	; 0x22
    16ee:	bb a1       	ldd	r27, Y+35	; 0x23
    16f0:	48 0f       	add	r20, r24
    16f2:	59 1f       	adc	r21, r25
    16f4:	6a 1f       	adc	r22, r26
    16f6:	7b 1f       	adc	r23, r27
    16f8:	ce 01       	movw	r24, r28
    16fa:	10 de       	rcall	.-992    	; 0x131c <move_window>
    16fc:	88 23       	and	r24, r24
    16fe:	09 f0       	breq	.+2      	; 0x1702 <get_fat+0x80>
    1700:	de c0       	rjmp	.+444    	; 0x18be <get_fat+0x23c>
		wc = fs->win[bc % SS(fs)]; bc++;
    1702:	2a 85       	ldd	r18, Y+10	; 0x0a
    1704:	3b 85       	ldd	r19, Y+11	; 0x0b
    1706:	c6 01       	movw	r24, r12
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 0f       	add	r30, r24
    1712:	f9 1f       	adc	r31, r25
    1714:	b0 a8       	ldd	r11, Z+48	; 0x30
    1716:	08 94       	sec
    1718:	c1 1c       	adc	r12, r1
    171a:	d1 1c       	adc	r13, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    171c:	c6 01       	movw	r24, r12
    171e:	b9 01       	movw	r22, r18
    1720:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1724:	ab 01       	movw	r20, r22
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	88 a1       	ldd	r24, Y+32	; 0x20
    172c:	99 a1       	ldd	r25, Y+33	; 0x21
    172e:	aa a1       	ldd	r26, Y+34	; 0x22
    1730:	bb a1       	ldd	r27, Y+35	; 0x23
    1732:	48 0f       	add	r20, r24
    1734:	59 1f       	adc	r21, r25
    1736:	6a 1f       	adc	r22, r26
    1738:	7b 1f       	adc	r23, r27
    173a:	ce 01       	movw	r24, r28
    173c:	ef dd       	rcall	.-1058   	; 0x131c <move_window>
    173e:	88 23       	and	r24, r24
    1740:	09 f0       	breq	.+2      	; 0x1744 <get_fat+0xc2>
    1742:	bd c0       	rjmp	.+378    	; 0x18be <get_fat+0x23c>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1744:	2b 2d       	mov	r18, r11
    1746:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1748:	6a 85       	ldd	r22, Y+10	; 0x0a
    174a:	7b 85       	ldd	r23, Y+11	; 0x0b
    174c:	c6 01       	movw	r24, r12
    174e:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1752:	c8 0f       	add	r28, r24
    1754:	d9 1f       	adc	r29, r25
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	28 2b       	or	r18, r24
    175c:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    175e:	c7 01       	movw	r24, r14
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	89 2b       	or	r24, r25
    1766:	39 f0       	breq	.+14     	; 0x1776 <get_fat+0xf4>
    1768:	a4 e0       	ldi	r26, 0x04	; 4
    176a:	36 95       	lsr	r19
    176c:	27 95       	ror	r18
    176e:	aa 95       	dec	r26
    1770:	e1 f7       	brne	.-8      	; 0x176a <get_fat+0xe8>
    1772:	79 01       	movw	r14, r18
    1774:	39 c0       	rjmp	.+114    	; 0x17e8 <get_fat+0x166>
    1776:	79 01       	movw	r14, r18
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f e0       	ldi	r25, 0x0F	; 15
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	91 c0       	rjmp	.+290    	; 0x18a8 <get_fat+0x226>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1786:	2a 85       	ldd	r18, Y+10	; 0x0a
    1788:	3b 85       	ldd	r19, Y+11	; 0x0b
    178a:	36 95       	lsr	r19
    178c:	27 95       	ror	r18
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	c8 01       	movw	r24, r16
    1794:	b7 01       	movw	r22, r14
    1796:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    179a:	da 01       	movw	r26, r20
    179c:	c9 01       	movw	r24, r18
    179e:	48 a1       	ldd	r20, Y+32	; 0x20
    17a0:	59 a1       	ldd	r21, Y+33	; 0x21
    17a2:	6a a1       	ldd	r22, Y+34	; 0x22
    17a4:	7b a1       	ldd	r23, Y+35	; 0x23
    17a6:	48 0f       	add	r20, r24
    17a8:	59 1f       	adc	r21, r25
    17aa:	6a 1f       	adc	r22, r26
    17ac:	7b 1f       	adc	r23, r27
    17ae:	ce 01       	movw	r24, r28
    17b0:	b5 dd       	rcall	.-1174   	; 0x131c <move_window>
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <get_fat+0x136>
    17b6:	83 c0       	rjmp	.+262    	; 0x18be <get_fat+0x23c>
		p = &fs->win[clst * 2 % SS(fs)];
    17b8:	ee 0c       	add	r14, r14
    17ba:	ff 1c       	adc	r15, r15
    17bc:	00 1f       	adc	r16, r16
    17be:	11 1f       	adc	r17, r17
    17c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    17c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	c8 01       	movw	r24, r16
    17ca:	b7 01       	movw	r22, r14
    17cc:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
		return LD_WORD(p);
    17d4:	fe 01       	movw	r30, r28
    17d6:	e8 0f       	add	r30, r24
    17d8:	f9 1f       	adc	r31, r25
    17da:	40 a9       	ldd	r20, Z+48	; 0x30
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	31 a9       	ldd	r19, Z+49	; 0x31
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	42 2b       	or	r20, r18
    17e4:	53 2b       	or	r21, r19
    17e6:	7a 01       	movw	r14, r20
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	6c c0       	rjmp	.+216    	; 0x18c6 <get_fat+0x244>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    17ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    17f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    17f2:	36 95       	lsr	r19
    17f4:	27 95       	ror	r18
    17f6:	36 95       	lsr	r19
    17f8:	27 95       	ror	r18
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	c8 01       	movw	r24, r16
    1800:	b7 01       	movw	r22, r14
    1802:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1806:	da 01       	movw	r26, r20
    1808:	c9 01       	movw	r24, r18
    180a:	48 a1       	ldd	r20, Y+32	; 0x20
    180c:	59 a1       	ldd	r21, Y+33	; 0x21
    180e:	6a a1       	ldd	r22, Y+34	; 0x22
    1810:	7b a1       	ldd	r23, Y+35	; 0x23
    1812:	48 0f       	add	r20, r24
    1814:	59 1f       	adc	r21, r25
    1816:	6a 1f       	adc	r22, r26
    1818:	7b 1f       	adc	r23, r27
    181a:	ce 01       	movw	r24, r28
    181c:	7f dd       	rcall	.-1282   	; 0x131c <move_window>
    181e:	88 23       	and	r24, r24
    1820:	09 f0       	breq	.+2      	; 0x1824 <get_fat+0x1a2>
    1822:	4d c0       	rjmp	.+154    	; 0x18be <get_fat+0x23c>
		p = &fs->win[clst * 4 % SS(fs)];
    1824:	62 e0       	ldi	r22, 0x02	; 2
    1826:	ee 0c       	add	r14, r14
    1828:	ff 1c       	adc	r15, r15
    182a:	00 1f       	adc	r16, r16
    182c:	11 1f       	adc	r17, r17
    182e:	6a 95       	dec	r22
    1830:	d1 f7       	brne	.-12     	; 0x1826 <get_fat+0x1a4>
    1832:	2a 85       	ldd	r18, Y+10	; 0x0a
    1834:	3b 85       	ldd	r19, Y+11	; 0x0b
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	c8 01       	movw	r24, r16
    183c:	b7 01       	movw	r22, r14
    183e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	20 5d       	subi	r18, 0xD0	; 208
    1848:	3f 4f       	sbci	r19, 0xFF	; 255
    184a:	fe 01       	movw	r30, r28
    184c:	e2 0f       	add	r30, r18
    184e:	f3 1f       	adc	r31, r19
    1850:	20 53       	subi	r18, 0x30	; 48
    1852:	30 40       	sbci	r19, 0x00	; 0
		return LD_DWORD(p) & 0x0FFFFFFF;
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	8c 01       	movw	r16, r24
    185e:	ff 24       	eor	r15, r15
    1860:	ee 24       	eor	r14, r14
    1862:	83 81       	ldd	r24, Z+3	; 0x03
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	b8 2f       	mov	r27, r24
    186c:	aa 27       	eor	r26, r26
    186e:	99 27       	eor	r25, r25
    1870:	88 27       	eor	r24, r24
    1872:	e8 2a       	or	r14, r24
    1874:	f9 2a       	or	r15, r25
    1876:	0a 2b       	or	r16, r26
    1878:	1b 2b       	or	r17, r27
    187a:	91 81       	ldd	r25, Z+1	; 0x01
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	a0 e0       	ldi	r26, 0x00	; 0
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e8 2a       	or	r14, r24
    1884:	f9 2a       	or	r15, r25
    1886:	0a 2b       	or	r16, r26
    1888:	1b 2b       	or	r17, r27
    188a:	2c 0f       	add	r18, r28
    188c:	3d 1f       	adc	r19, r29
    188e:	f9 01       	movw	r30, r18
    1890:	80 a9       	ldd	r24, Z+48	; 0x30
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	a0 e0       	ldi	r26, 0x00	; 0
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e8 2a       	or	r14, r24
    189a:	f9 2a       	or	r15, r25
    189c:	0a 2b       	or	r16, r26
    189e:	1b 2b       	or	r17, r27
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	9f ef       	ldi	r25, 0xFF	; 255
    18a4:	af ef       	ldi	r26, 0xFF	; 255
    18a6:	bf e0       	ldi	r27, 0x0F	; 15
    18a8:	e8 22       	and	r14, r24
    18aa:	f9 22       	and	r15, r25
    18ac:	0a 23       	and	r16, r26
    18ae:	1b 23       	and	r17, r27
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <get_fat+0x244>
    18b2:	31 e0       	ldi	r19, 0x01	; 1
    18b4:	e3 2e       	mov	r14, r19
    18b6:	f1 2c       	mov	r15, r1
    18b8:	01 2d       	mov	r16, r1
    18ba:	11 2d       	mov	r17, r1
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <get_fat+0x244>
    18be:	ee 24       	eor	r14, r14
    18c0:	ea 94       	dec	r14
    18c2:	fe 2c       	mov	r15, r14
    18c4:	87 01       	movw	r16, r14
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    18c6:	b7 01       	movw	r22, r14
    18c8:	c8 01       	movw	r24, r16
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	08 95       	ret

000018de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    18de:	4f 92       	push	r4
    18e0:	5f 92       	push	r5
    18e2:	6f 92       	push	r6
    18e4:	7f 92       	push	r7
    18e6:	8f 92       	push	r8
    18e8:	9f 92       	push	r9
    18ea:	af 92       	push	r10
    18ec:	bf 92       	push	r11
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
    1900:	2a 01       	movw	r4, r20
    1902:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1904:	41 15       	cp	r20, r1
    1906:	51 05       	cpc	r21, r1
    1908:	61 05       	cpc	r22, r1
    190a:	71 05       	cpc	r23, r1
    190c:	99 f4       	brne	.+38     	; 0x1934 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    190e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1910:	9d 84       	ldd	r9, Y+13	; 0x0d
    1912:	ae 84       	ldd	r10, Y+14	; 0x0e
    1914:	bf 84       	ldd	r11, Y+15	; 0x0f
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1916:	81 14       	cp	r8, r1
    1918:	91 04       	cpc	r9, r1
    191a:	a1 04       	cpc	r10, r1
    191c:	b1 04       	cpc	r11, r1
    191e:	01 f1       	breq	.+64     	; 0x1960 <create_chain+0x82>
    1920:	88 8d       	ldd	r24, Y+24	; 0x18
    1922:	99 8d       	ldd	r25, Y+25	; 0x19
    1924:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1926:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1928:	88 16       	cp	r8, r24
    192a:	99 06       	cpc	r9, r25
    192c:	aa 06       	cpc	r10, r26
    192e:	bb 06       	cpc	r11, r27
    1930:	b8 f4       	brcc	.+46     	; 0x1960 <create_chain+0x82>
    1932:	1b c0       	rjmp	.+54     	; 0x196a <create_chain+0x8c>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1934:	a6 de       	rcall	.-692    	; 0x1682 <get_fat>
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    193a:	62 30       	cpi	r22, 0x02	; 2
    193c:	71 05       	cpc	r23, r1
    193e:	81 05       	cpc	r24, r1
    1940:	91 05       	cpc	r25, r1
    1942:	08 f4       	brcc	.+2      	; 0x1946 <create_chain+0x68>
    1944:	87 c0       	rjmp	.+270    	; 0x1a54 <create_chain+0x176>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1946:	88 8d       	ldd	r24, Y+24	; 0x18
    1948:	99 8d       	ldd	r25, Y+25	; 0x19
    194a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    194c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	4a 07       	cpc	r20, r26
    1954:	5b 07       	cpc	r21, r27
    1956:	08 f4       	brcc	.+2      	; 0x195a <create_chain+0x7c>
    1958:	8b c0       	rjmp	.+278    	; 0x1a70 <create_chain+0x192>
    195a:	53 01       	movw	r10, r6
    195c:	42 01       	movw	r8, r4
    195e:	05 c0       	rjmp	.+10     	; 0x196a <create_chain+0x8c>
    1960:	01 e0       	ldi	r16, 0x01	; 1
    1962:	80 2e       	mov	r8, r16
    1964:	91 2c       	mov	r9, r1
    1966:	a1 2c       	mov	r10, r1
    1968:	b1 2c       	mov	r11, r1
    196a:	75 01       	movw	r14, r10
    196c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    196e:	08 94       	sec
    1970:	c1 1c       	adc	r12, r1
    1972:	d1 1c       	adc	r13, r1
    1974:	e1 1c       	adc	r14, r1
    1976:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1978:	88 8d       	ldd	r24, Y+24	; 0x18
    197a:	99 8d       	ldd	r25, Y+25	; 0x19
    197c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    197e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1980:	c8 16       	cp	r12, r24
    1982:	d9 06       	cpc	r13, r25
    1984:	ea 06       	cpc	r14, r26
    1986:	fb 06       	cpc	r15, r27
    1988:	60 f0       	brcs	.+24     	; 0x19a2 <create_chain+0xc4>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    198a:	22 e0       	ldi	r18, 0x02	; 2
    198c:	82 16       	cp	r8, r18
    198e:	91 04       	cpc	r9, r1
    1990:	a1 04       	cpc	r10, r1
    1992:	b1 04       	cpc	r11, r1
    1994:	08 f4       	brcc	.+2      	; 0x1998 <create_chain+0xba>
    1996:	68 c0       	rjmp	.+208    	; 0x1a68 <create_chain+0x18a>
    1998:	12 e0       	ldi	r17, 0x02	; 2
    199a:	c1 2e       	mov	r12, r17
    199c:	d1 2c       	mov	r13, r1
    199e:	e1 2c       	mov	r14, r1
    19a0:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    19a2:	ce 01       	movw	r24, r28
    19a4:	b7 01       	movw	r22, r14
    19a6:	a6 01       	movw	r20, r12
    19a8:	6c de       	rcall	.-808    	; 0x1682 <get_fat>
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    19ae:	61 15       	cp	r22, r1
    19b0:	71 05       	cpc	r23, r1
    19b2:	81 05       	cpc	r24, r1
    19b4:	91 05       	cpc	r25, r1
    19b6:	a9 f0       	breq	.+42     	; 0x19e2 <create_chain+0x104>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    19b8:	2f 3f       	cpi	r18, 0xFF	; 255
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	38 07       	cpc	r19, r24
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	48 07       	cpc	r20, r24
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	58 07       	cpc	r21, r24
    19c6:	09 f4       	brne	.+2      	; 0x19ca <create_chain+0xec>
    19c8:	53 c0       	rjmp	.+166    	; 0x1a70 <create_chain+0x192>
    19ca:	21 30       	cpi	r18, 0x01	; 1
    19cc:	31 05       	cpc	r19, r1
    19ce:	41 05       	cpc	r20, r1
    19d0:	51 05       	cpc	r21, r1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <create_chain+0xf8>
    19d4:	4d c0       	rjmp	.+154    	; 0x1a70 <create_chain+0x192>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    19d6:	c8 14       	cp	r12, r8
    19d8:	d9 04       	cpc	r13, r9
    19da:	ea 04       	cpc	r14, r10
    19dc:	fb 04       	cpc	r15, r11
    19de:	39 f6       	brne	.-114    	; 0x196e <create_chain+0x90>
    19e0:	43 c0       	rjmp	.+134    	; 0x1a68 <create_chain+0x18a>
    19e2:	bc 2c       	mov	r11, r12
    19e4:	ad 2c       	mov	r10, r13
    19e6:	9e 2c       	mov	r9, r14
    19e8:	8f 2c       	mov	r8, r15
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    19ea:	ce 01       	movw	r24, r28
    19ec:	a6 01       	movw	r20, r12
    19ee:	b7 01       	movw	r22, r14
    19f0:	0f ef       	ldi	r16, 0xFF	; 255
    19f2:	1f ef       	ldi	r17, 0xFF	; 255
    19f4:	2f ef       	ldi	r18, 0xFF	; 255
    19f6:	3f e0       	ldi	r19, 0x0F	; 15
    19f8:	07 dd       	rcall	.-1522   	; 0x1408 <put_fat>
	if (res == FR_OK && clst != 0) {
    19fa:	88 23       	and	r24, r24
    19fc:	49 f5       	brne	.+82     	; 0x1a50 <create_chain+0x172>
    19fe:	41 14       	cp	r4, r1
    1a00:	51 04       	cpc	r5, r1
    1a02:	61 04       	cpc	r6, r1
    1a04:	71 04       	cpc	r7, r1
    1a06:	41 f0       	breq	.+16     	; 0x1a18 <create_chain+0x13a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1a08:	ce 01       	movw	r24, r28
    1a0a:	b3 01       	movw	r22, r6
    1a0c:	a2 01       	movw	r20, r4
    1a0e:	86 01       	movw	r16, r12
    1a10:	97 01       	movw	r18, r14
    1a12:	fa dc       	rcall	.-1548   	; 0x1408 <put_fat>
	}
	if (res == FR_OK) {
    1a14:	88 23       	and	r24, r24
    1a16:	e1 f4       	brne	.+56     	; 0x1a50 <create_chain+0x172>
		fs->last_clust = ncl;			/* Update FSINFO */
    1a18:	bc 86       	std	Y+12, r11	; 0x0c
    1a1a:	ad 86       	std	Y+13, r10	; 0x0d
    1a1c:	9e 86       	std	Y+14, r9	; 0x0e
    1a1e:	8f 86       	std	Y+15, r8	; 0x0f
		if (fs->free_clust != 0xFFFFFFFF) {
    1a20:	88 89       	ldd	r24, Y+16	; 0x10
    1a22:	99 89       	ldd	r25, Y+17	; 0x11
    1a24:	aa 89       	ldd	r26, Y+18	; 0x12
    1a26:	bb 89       	ldd	r27, Y+19	; 0x13
    1a28:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2a:	2f ef       	ldi	r18, 0xFF	; 255
    1a2c:	92 07       	cpc	r25, r18
    1a2e:	2f ef       	ldi	r18, 0xFF	; 255
    1a30:	a2 07       	cpc	r26, r18
    1a32:	2f ef       	ldi	r18, 0xFF	; 255
    1a34:	b2 07       	cpc	r27, r18
    1a36:	49 f0       	breq	.+18     	; 0x1a4a <create_chain+0x16c>
			fs->free_clust--;
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	a1 09       	sbc	r26, r1
    1a3c:	b1 09       	sbc	r27, r1
    1a3e:	88 8b       	std	Y+16, r24	; 0x10
    1a40:	99 8b       	std	Y+17, r25	; 0x11
    1a42:	aa 8b       	std	Y+18, r26	; 0x12
    1a44:	bb 8b       	std	Y+19, r27	; 0x13
			fs->fsi_flag = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	a7 01       	movw	r20, r14
    1a4c:	96 01       	movw	r18, r12
    1a4e:	10 c0       	rjmp	.+32     	; 0x1a70 <create_chain+0x192>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	29 f0       	breq	.+10     	; 0x1a5e <create_chain+0x180>
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e0       	ldi	r20, 0x00	; 0
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <create_chain+0x192>
    1a5e:	2f ef       	ldi	r18, 0xFF	; 255
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f ef       	ldi	r20, 0xFF	; 255
    1a64:	5f ef       	ldi	r21, 0xFF	; 255
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <create_chain+0x192>
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1a70:	b9 01       	movw	r22, r18
    1a72:	ca 01       	movw	r24, r20
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	df 90       	pop	r13
    1a82:	cf 90       	pop	r12
    1a84:	bf 90       	pop	r11
    1a86:	af 90       	pop	r10
    1a88:	9f 90       	pop	r9
    1a8a:	8f 90       	pop	r8
    1a8c:	7f 90       	pop	r7
    1a8e:	6f 90       	pop	r6
    1a90:	5f 90       	pop	r5
    1a92:	4f 90       	pop	r4
    1a94:	08 95       	ret

00001a96 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1a96:	2f 92       	push	r2
    1a98:	3f 92       	push	r3
    1a9a:	4f 92       	push	r4
    1a9c:	5f 92       	push	r5
    1a9e:	6f 92       	push	r6
    1aa0:	7f 92       	push	r7
    1aa2:	8f 92       	push	r8
    1aa4:	9f 92       	push	r9
    1aa6:	af 92       	push	r10
    1aa8:	bf 92       	push	r11
    1aaa:	cf 92       	push	r12
    1aac:	df 92       	push	r13
    1aae:	ef 92       	push	r14
    1ab0:	ff 92       	push	r15
    1ab2:	0f 93       	push	r16
    1ab4:	1f 93       	push	r17
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <f_lseek+0x26>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <f_lseek+0x28>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9d 83       	std	Y+5, r25	; 0x05
    1ac6:	8c 83       	std	Y+4, r24	; 0x04
    1ac8:	7a 01       	movw	r14, r20
    1aca:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    1acc:	dc 01       	movw	r26, r24
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	6d 91       	ld	r22, X+
    1ad2:	7c 91       	ld	r23, X
    1ad4:	13 97       	sbiw	r26, 0x03	; 3
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	9c 91       	ld	r25, X
    1ada:	0b dc       	rcall	.-2026   	; 0x12f2 <validate>
    1adc:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <f_lseek+0x4e>
    1ae2:	93 c1       	rjmp	.+806    	; 0x1e0a <f_lseek+0x374>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    1ae4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae8:	84 81       	ldd	r24, Z+4	; 0x04
    1aea:	87 fd       	sbrc	r24, 7
    1aec:	8f c0       	rjmp	.+286    	; 0x1c0c <f_lseek+0x176>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    1aee:	ac 81       	ldd	r26, Y+4	; 0x04
    1af0:	bd 81       	ldd	r27, Y+5	; 0x05
    1af2:	1a 96       	adiw	r26, 0x0a	; 10
    1af4:	ad 90       	ld	r10, X+
    1af6:	bd 90       	ld	r11, X+
    1af8:	cd 90       	ld	r12, X+
    1afa:	dc 90       	ld	r13, X
    1afc:	1d 97       	sbiw	r26, 0x0d	; 13
    1afe:	ae 14       	cp	r10, r14
    1b00:	bf 04       	cpc	r11, r15
    1b02:	c0 06       	cpc	r12, r16
    1b04:	d1 06       	cpc	r13, r17
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <f_lseek+0x76>
    1b08:	81 ff       	sbrs	r24, 1
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <f_lseek+0x7a>
    1b0c:	57 01       	movw	r10, r14
    1b0e:	68 01       	movw	r12, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    1b10:	ec 81       	ldd	r30, Y+4	; 0x04
    1b12:	fd 81       	ldd	r31, Y+5	; 0x05
    1b14:	e6 80       	ldd	r14, Z+6	; 0x06
    1b16:	f7 80       	ldd	r15, Z+7	; 0x07
    1b18:	00 85       	ldd	r16, Z+8	; 0x08
    1b1a:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    1b1c:	16 82       	std	Z+6, r1	; 0x06
    1b1e:	17 82       	std	Z+7, r1	; 0x07
    1b20:	10 86       	std	Z+8, r1	; 0x08
    1b22:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    1b24:	a1 14       	cp	r10, r1
    1b26:	b1 04       	cpc	r11, r1
    1b28:	c1 04       	cpc	r12, r1
    1b2a:	d1 04       	cpc	r13, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <f_lseek+0x9a>
    1b2e:	2f c1       	rjmp	.+606    	; 0x1d8e <f_lseek+0x2f8>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    1b30:	01 90       	ld	r0, Z+
    1b32:	f0 81       	ld	r31, Z
    1b34:	e0 2d       	mov	r30, r0
    1b36:	fa 83       	std	Y+2, r31	; 0x02
    1b38:	e9 83       	std	Y+1, r30	; 0x01
    1b3a:	62 85       	ldd	r22, Z+10	; 0x0a
    1b3c:	73 85       	ldd	r23, Z+11	; 0x0b
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	22 81       	ldd	r18, Z+2	; 0x02
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <__mulsi3>
    1b4e:	3b 01       	movw	r6, r22
    1b50:	4c 01       	movw	r8, r24
			if (ifptr > 0 &&
    1b52:	e1 14       	cp	r14, r1
    1b54:	f1 04       	cpc	r15, r1
    1b56:	01 05       	cpc	r16, r1
    1b58:	11 05       	cpc	r17, r1
    1b5a:	c1 f1       	breq	.+112    	; 0x1bcc <f_lseek+0x136>
    1b5c:	17 01       	movw	r2, r14
    1b5e:	28 01       	movw	r4, r16
    1b60:	08 94       	sec
    1b62:	21 08       	sbc	r2, r1
    1b64:	31 08       	sbc	r3, r1
    1b66:	41 08       	sbc	r4, r1
    1b68:	51 08       	sbc	r5, r1
    1b6a:	c6 01       	movw	r24, r12
    1b6c:	b5 01       	movw	r22, r10
    1b6e:	61 50       	subi	r22, 0x01	; 1
    1b70:	70 40       	sbci	r23, 0x00	; 0
    1b72:	80 40       	sbci	r24, 0x00	; 0
    1b74:	90 40       	sbci	r25, 0x00	; 0
    1b76:	a4 01       	movw	r20, r8
    1b78:	93 01       	movw	r18, r6
    1b7a:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1b7e:	79 01       	movw	r14, r18
    1b80:	8a 01       	movw	r16, r20
    1b82:	c2 01       	movw	r24, r4
    1b84:	b1 01       	movw	r22, r2
    1b86:	a4 01       	movw	r20, r8
    1b88:	93 01       	movw	r18, r6
    1b8a:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1b8e:	e2 16       	cp	r14, r18
    1b90:	f3 06       	cpc	r15, r19
    1b92:	04 07       	cpc	r16, r20
    1b94:	15 07       	cpc	r17, r21
    1b96:	d0 f0       	brcs	.+52     	; 0x1bcc <f_lseek+0x136>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    1b98:	88 27       	eor	r24, r24
    1b9a:	99 27       	eor	r25, r25
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	86 19       	sub	r24, r6
    1ba0:	97 09       	sbc	r25, r7
    1ba2:	a8 09       	sbc	r26, r8
    1ba4:	b9 09       	sbc	r27, r9
    1ba6:	82 21       	and	r24, r2
    1ba8:	93 21       	and	r25, r3
    1baa:	a4 21       	and	r26, r4
    1bac:	b5 21       	and	r27, r5
    1bae:	ec 81       	ldd	r30, Y+4	; 0x04
    1bb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bb2:	86 83       	std	Z+6, r24	; 0x06
    1bb4:	97 83       	std	Z+7, r25	; 0x07
    1bb6:	a0 87       	std	Z+8, r26	; 0x08
    1bb8:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    1bba:	a8 1a       	sub	r10, r24
    1bbc:	b9 0a       	sbc	r11, r25
    1bbe:	ca 0a       	sbc	r12, r26
    1bc0:	db 0a       	sbc	r13, r27
				clst = fp->clust;
    1bc2:	e2 88       	ldd	r14, Z+18	; 0x12
    1bc4:	f3 88       	ldd	r15, Z+19	; 0x13
    1bc6:	04 89       	ldd	r16, Z+20	; 0x14
    1bc8:	15 89       	ldd	r17, Z+21	; 0x15
    1bca:	3a c0       	rjmp	.+116    	; 0x1c40 <f_lseek+0x1aa>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    1bcc:	ac 81       	ldd	r26, Y+4	; 0x04
    1bce:	bd 81       	ldd	r27, Y+5	; 0x05
    1bd0:	1e 96       	adiw	r26, 0x0e	; 14
    1bd2:	ed 90       	ld	r14, X+
    1bd4:	fd 90       	ld	r15, X+
    1bd6:	0d 91       	ld	r16, X+
    1bd8:	1c 91       	ld	r17, X
    1bda:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    1bdc:	e1 14       	cp	r14, r1
    1bde:	f1 04       	cpc	r15, r1
    1be0:	01 05       	cpc	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	29 f5       	brne	.+74     	; 0x1c30 <f_lseek+0x19a>
					clst = create_chain(fp->fs, 0);
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	75 de       	rcall	.-790    	; 0x18de <create_chain>
    1bf4:	7b 01       	movw	r14, r22
    1bf6:	8c 01       	movw	r16, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1bf8:	61 30       	cpi	r22, 0x01	; 1
    1bfa:	71 05       	cpc	r23, r1
    1bfc:	81 05       	cpc	r24, r1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	41 f4       	brne	.+16     	; 0x1c12 <f_lseek+0x17c>
    1c02:	ec 81       	ldd	r30, Y+4	; 0x04
    1c04:	fd 81       	ldd	r31, Y+5	; 0x05
    1c06:	84 81       	ldd	r24, Z+4	; 0x04
    1c08:	80 68       	ori	r24, 0x80	; 128
    1c0a:	84 83       	std	Z+4, r24	; 0x04
    1c0c:	f2 e0       	ldi	r31, 0x02	; 2
    1c0e:	fb 83       	std	Y+3, r31	; 0x03
    1c10:	fc c0       	rjmp	.+504    	; 0x1e0a <f_lseek+0x374>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	e8 16       	cp	r14, r24
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	f8 06       	cpc	r15, r24
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	08 07       	cpc	r16, r24
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	18 07       	cpc	r17, r24
    1c22:	c9 f1       	breq	.+114    	; 0x1c96 <f_lseek+0x200>
					fp->sclust = clst;
    1c24:	ec 81       	ldd	r30, Y+4	; 0x04
    1c26:	fd 81       	ldd	r31, Y+5	; 0x05
    1c28:	e6 86       	std	Z+14, r14	; 0x0e
    1c2a:	f7 86       	std	Z+15, r15	; 0x0f
    1c2c:	00 8b       	std	Z+16, r16	; 0x10
    1c2e:	11 8b       	std	Z+17, r17	; 0x11
				}
#endif
				fp->clust = clst;
    1c30:	ac 81       	ldd	r26, Y+4	; 0x04
    1c32:	bd 81       	ldd	r27, Y+5	; 0x05
    1c34:	52 96       	adiw	r26, 0x12	; 18
    1c36:	ed 92       	st	X+, r14
    1c38:	fd 92       	st	X+, r15
    1c3a:	0d 93       	st	X+, r16
    1c3c:	1c 93       	st	X, r17
    1c3e:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    1c40:	e1 14       	cp	r14, r1
    1c42:	f1 04       	cpc	r15, r1
    1c44:	01 05       	cpc	r16, r1
    1c46:	11 05       	cpc	r17, r1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <f_lseek+0x1b6>
    1c4a:	5f c0       	rjmp	.+190    	; 0x1d0a <f_lseek+0x274>
    1c4c:	a0 c0       	rjmp	.+320    	; 0x1d8e <f_lseek+0x2f8>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    1c4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c50:	fd 81       	ldd	r31, Y+5	; 0x05
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	20 81       	ld	r18, Z
    1c56:	31 81       	ldd	r19, Z+1	; 0x01
    1c58:	81 ff       	sbrs	r24, 1
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <f_lseek+0x1e2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    1c5c:	c9 01       	movw	r24, r18
    1c5e:	b8 01       	movw	r22, r16
    1c60:	a7 01       	movw	r20, r14
    1c62:	3d de       	rcall	.-902    	; 0x18de <create_chain>
    1c64:	7b 01       	movw	r14, r22
    1c66:	8c 01       	movw	r16, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    1c68:	61 15       	cp	r22, r1
    1c6a:	71 05       	cpc	r23, r1
    1c6c:	81 05       	cpc	r24, r1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	49 f4       	brne	.+18     	; 0x1c84 <f_lseek+0x1ee>
    1c72:	64 01       	movw	r12, r8
    1c74:	53 01       	movw	r10, r6
    1c76:	4f c0       	rjmp	.+158    	; 0x1d16 <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1c78:	c9 01       	movw	r24, r18
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	a7 01       	movw	r20, r14
    1c7e:	01 dd       	rcall	.-1534   	; 0x1682 <get_fat>
    1c80:	7b 01       	movw	r14, r22
    1c82:	8c 01       	movw	r16, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1c84:	ff ef       	ldi	r31, 0xFF	; 255
    1c86:	ef 16       	cp	r14, r31
    1c88:	ff ef       	ldi	r31, 0xFF	; 255
    1c8a:	ff 06       	cpc	r15, r31
    1c8c:	ff ef       	ldi	r31, 0xFF	; 255
    1c8e:	0f 07       	cpc	r16, r31
    1c90:	ff ef       	ldi	r31, 0xFF	; 255
    1c92:	1f 07       	cpc	r17, r31
    1c94:	59 f4       	brne	.+22     	; 0x1cac <f_lseek+0x216>
    1c96:	ac 81       	ldd	r26, Y+4	; 0x04
    1c98:	bd 81       	ldd	r27, Y+5	; 0x05
    1c9a:	14 96       	adiw	r26, 0x04	; 4
    1c9c:	8c 91       	ld	r24, X
    1c9e:	14 97       	sbiw	r26, 0x04	; 4
    1ca0:	80 68       	ori	r24, 0x80	; 128
    1ca2:	14 96       	adiw	r26, 0x04	; 4
    1ca4:	8c 93       	st	X, r24
    1ca6:	b1 e0       	ldi	r27, 0x01	; 1
    1ca8:	bb 83       	std	Y+3, r27	; 0x03
    1caa:	af c0       	rjmp	.+350    	; 0x1e0a <f_lseek+0x374>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    1cac:	e2 e0       	ldi	r30, 0x02	; 2
    1cae:	ee 16       	cp	r14, r30
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	01 05       	cpc	r16, r1
    1cb4:	11 05       	cpc	r17, r1
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <f_lseek+0x224>
    1cb8:	a4 cf       	rjmp	.-184    	; 0x1c02 <f_lseek+0x16c>
    1cba:	ac 81       	ldd	r26, Y+4	; 0x04
    1cbc:	bd 81       	ldd	r27, Y+5	; 0x05
    1cbe:	ed 91       	ld	r30, X+
    1cc0:	fc 91       	ld	r31, X
    1cc2:	80 8d       	ldd	r24, Z+24	; 0x18
    1cc4:	91 8d       	ldd	r25, Z+25	; 0x19
    1cc6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cc8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1cca:	e8 16       	cp	r14, r24
    1ccc:	f9 06       	cpc	r15, r25
    1cce:	0a 07       	cpc	r16, r26
    1cd0:	1b 07       	cpc	r17, r27
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <f_lseek+0x240>
    1cd4:	96 cf       	rjmp	.-212    	; 0x1c02 <f_lseek+0x16c>
					fp->clust = clst;
    1cd6:	ac 81       	ldd	r26, Y+4	; 0x04
    1cd8:	bd 81       	ldd	r27, Y+5	; 0x05
    1cda:	52 96       	adiw	r26, 0x12	; 18
    1cdc:	ed 92       	st	X+, r14
    1cde:	fd 92       	st	X+, r15
    1ce0:	0d 93       	st	X+, r16
    1ce2:	1c 93       	st	X, r17
    1ce4:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    1ce6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce8:	fd 81       	ldd	r31, Y+5	; 0x05
    1cea:	86 81       	ldd	r24, Z+6	; 0x06
    1cec:	97 81       	ldd	r25, Z+7	; 0x07
    1cee:	a0 85       	ldd	r26, Z+8	; 0x08
    1cf0:	b1 85       	ldd	r27, Z+9	; 0x09
    1cf2:	86 0d       	add	r24, r6
    1cf4:	97 1d       	adc	r25, r7
    1cf6:	a8 1d       	adc	r26, r8
    1cf8:	b9 1d       	adc	r27, r9
    1cfa:	86 83       	std	Z+6, r24	; 0x06
    1cfc:	97 83       	std	Z+7, r25	; 0x07
    1cfe:	a0 87       	std	Z+8, r26	; 0x08
    1d00:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    1d02:	a6 18       	sub	r10, r6
    1d04:	b7 08       	sbc	r11, r7
    1d06:	c8 08       	sbc	r12, r8
    1d08:	d9 08       	sbc	r13, r9
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    1d0a:	6a 14       	cp	r6, r10
    1d0c:	7b 04       	cpc	r7, r11
    1d0e:	8c 04       	cpc	r8, r12
    1d10:	9d 04       	cpc	r9, r13
    1d12:	08 f4       	brcc	.+2      	; 0x1d16 <f_lseek+0x280>
    1d14:	9c cf       	rjmp	.-200    	; 0x1c4e <f_lseek+0x1b8>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    1d16:	ec 81       	ldd	r30, Y+4	; 0x04
    1d18:	fd 81       	ldd	r31, Y+5	; 0x05
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	97 81       	ldd	r25, Z+7	; 0x07
    1d1e:	a0 85       	ldd	r26, Z+8	; 0x08
    1d20:	b1 85       	ldd	r27, Z+9	; 0x09
    1d22:	8a 0d       	add	r24, r10
    1d24:	9b 1d       	adc	r25, r11
    1d26:	ac 1d       	adc	r26, r12
    1d28:	bd 1d       	adc	r27, r13
    1d2a:	86 83       	std	Z+6, r24	; 0x06
    1d2c:	97 83       	std	Z+7, r25	; 0x07
    1d2e:	a0 87       	std	Z+8, r26	; 0x08
    1d30:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    1d32:	80 80       	ld	r8, Z
    1d34:	91 80       	ldd	r9, Z+1	; 0x01
    1d36:	d4 01       	movw	r26, r8
    1d38:	1a 96       	adiw	r26, 0x0a	; 10
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9c 91       	ld	r25, X
    1d3e:	1b 97       	sbiw	r26, 0x0b	; 11
    1d40:	1c 01       	movw	r2, r24
    1d42:	44 24       	eor	r4, r4
    1d44:	55 24       	eor	r5, r5
    1d46:	c6 01       	movw	r24, r12
    1d48:	b5 01       	movw	r22, r10
    1d4a:	a2 01       	movw	r20, r4
    1d4c:	91 01       	movw	r18, r2
    1d4e:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1d52:	61 15       	cp	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	81 05       	cpc	r24, r1
    1d58:	91 05       	cpc	r25, r1
    1d5a:	c9 f0       	breq	.+50     	; 0x1d8e <f_lseek+0x2f8>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1d5c:	c4 01       	movw	r24, r8
    1d5e:	b8 01       	movw	r22, r16
    1d60:	a7 01       	movw	r20, r14
    1d62:	75 da       	rcall	.-2838   	; 0x124e <clust2sect>
    1d64:	3b 01       	movw	r6, r22
    1d66:	4c 01       	movw	r8, r24
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    1d68:	61 15       	cp	r22, r1
    1d6a:	71 05       	cpc	r23, r1
    1d6c:	81 05       	cpc	r24, r1
    1d6e:	91 05       	cpc	r25, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <f_lseek+0x2de>
    1d72:	47 cf       	rjmp	.-370    	; 0x1c02 <f_lseek+0x16c>
					nsect += ofs / SS(fp->fs);
    1d74:	c6 01       	movw	r24, r12
    1d76:	b5 01       	movw	r22, r10
    1d78:	a2 01       	movw	r20, r4
    1d7a:	91 01       	movw	r18, r2
    1d7c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1d80:	79 01       	movw	r14, r18
    1d82:	8a 01       	movw	r16, r20
    1d84:	e6 0c       	add	r14, r6
    1d86:	f7 1c       	adc	r15, r7
    1d88:	08 1d       	adc	r16, r8
    1d8a:	19 1d       	adc	r17, r9
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <f_lseek+0x2fe>
    1d8e:	ee 24       	eor	r14, r14
    1d90:	ff 24       	eor	r15, r15
    1d92:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    1d94:	ac 81       	ldd	r26, Y+4	; 0x04
    1d96:	bd 81       	ldd	r27, Y+5	; 0x05
    1d98:	ed 91       	ld	r30, X+
    1d9a:	fc 91       	ld	r31, X
    1d9c:	11 97       	sbiw	r26, 0x01	; 1
    1d9e:	22 85       	ldd	r18, Z+10	; 0x0a
    1da0:	33 85       	ldd	r19, Z+11	; 0x0b
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	16 96       	adiw	r26, 0x06	; 6
    1da8:	6d 91       	ld	r22, X+
    1daa:	7d 91       	ld	r23, X+
    1dac:	8d 91       	ld	r24, X+
    1dae:	9c 91       	ld	r25, X
    1db0:	19 97       	sbiw	r26, 0x09	; 9
    1db2:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    1db6:	61 15       	cp	r22, r1
    1db8:	71 05       	cpc	r23, r1
    1dba:	81 05       	cpc	r24, r1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	79 f0       	breq	.+30     	; 0x1dde <f_lseek+0x348>
    1dc0:	ec 81       	ldd	r30, Y+4	; 0x04
    1dc2:	fd 81       	ldd	r31, Y+5	; 0x05
    1dc4:	86 89       	ldd	r24, Z+22	; 0x16
    1dc6:	97 89       	ldd	r25, Z+23	; 0x17
    1dc8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dca:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dcc:	e8 16       	cp	r14, r24
    1dce:	f9 06       	cpc	r15, r25
    1dd0:	0a 07       	cpc	r16, r26
    1dd2:	1b 07       	cpc	r17, r27
    1dd4:	21 f0       	breq	.+8      	; 0x1dde <f_lseek+0x348>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    1dd6:	e6 8a       	std	Z+22, r14	; 0x16
    1dd8:	f7 8a       	std	Z+23, r15	; 0x17
    1dda:	00 8f       	std	Z+24, r16	; 0x18
    1ddc:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    1dde:	ec 81       	ldd	r30, Y+4	; 0x04
    1de0:	fd 81       	ldd	r31, Y+5	; 0x05
    1de2:	26 81       	ldd	r18, Z+6	; 0x06
    1de4:	37 81       	ldd	r19, Z+7	; 0x07
    1de6:	40 85       	ldd	r20, Z+8	; 0x08
    1de8:	51 85       	ldd	r21, Z+9	; 0x09
    1dea:	82 85       	ldd	r24, Z+10	; 0x0a
    1dec:	93 85       	ldd	r25, Z+11	; 0x0b
    1dee:	a4 85       	ldd	r26, Z+12	; 0x0c
    1df0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	a4 07       	cpc	r26, r20
    1df8:	b5 07       	cpc	r27, r21
    1dfa:	38 f4       	brcc	.+14     	; 0x1e0a <f_lseek+0x374>
			fp->fsize = fp->fptr;
    1dfc:	22 87       	std	Z+10, r18	; 0x0a
    1dfe:	33 87       	std	Z+11, r19	; 0x0b
    1e00:	44 87       	std	Z+12, r20	; 0x0c
    1e02:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    1e04:	84 81       	ldd	r24, Z+4	; 0x04
    1e06:	80 62       	ori	r24, 0x20	; 32
    1e08:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	bf 90       	pop	r11
    1e28:	af 90       	pop	r10
    1e2a:	9f 90       	pop	r9
    1e2c:	8f 90       	pop	r8
    1e2e:	7f 90       	pop	r7
    1e30:	6f 90       	pop	r6
    1e32:	5f 90       	pop	r5
    1e34:	4f 90       	pop	r4
    1e36:	3f 90       	pop	r3
    1e38:	2f 90       	pop	r2
    1e3a:	08 95       	ret

00001e3c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    1e3c:	cf 92       	push	r12
    1e3e:	df 92       	push	r13
    1e40:	ef 92       	push	r14
    1e42:	ff 92       	push	r15
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	7c 01       	movw	r14, r24
    1e4e:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1e50:	dc 01       	movw	r26, r24
    1e52:	15 96       	adiw	r26, 0x05	; 5
    1e54:	7c 93       	st	X, r23
    1e56:	6e 93       	st	-X, r22
    1e58:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    1e5a:	16 96       	adiw	r26, 0x06	; 6
    1e5c:	4d 91       	ld	r20, X+
    1e5e:	5d 91       	ld	r21, X+
    1e60:	6d 91       	ld	r22, X+
    1e62:	7c 91       	ld	r23, X
    1e64:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1e66:	41 30       	cpi	r20, 0x01	; 1
    1e68:	51 05       	cpc	r21, r1
    1e6a:	61 05       	cpc	r22, r1
    1e6c:	71 05       	cpc	r23, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <dir_sdi+0x36>
    1e70:	bd c0       	rjmp	.+378    	; 0x1fec <dir_sdi+0x1b0>
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	80 8d       	ldd	r24, Z+24	; 0x18
    1e78:	91 8d       	ldd	r25, Z+25	; 0x19
    1e7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e7c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1e7e:	48 17       	cp	r20, r24
    1e80:	59 07       	cpc	r21, r25
    1e82:	6a 07       	cpc	r22, r26
    1e84:	7b 07       	cpc	r23, r27
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <dir_sdi+0x4e>
    1e88:	b1 c0       	rjmp	.+354    	; 0x1fec <dir_sdi+0x1b0>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1e8a:	41 15       	cp	r20, r1
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	61 05       	cpc	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	b1 f5       	brne	.+108    	; 0x1f00 <dir_sdi+0xc4>
    1e94:	80 81       	ld	r24, Z
    1e96:	83 30       	cpi	r24, 0x03	; 3
    1e98:	49 f4       	brne	.+18     	; 0x1eac <dir_sdi+0x70>
		clst = dj->fs->dirbase;
    1e9a:	44 a1       	ldd	r20, Z+36	; 0x24
    1e9c:	55 a1       	ldd	r21, Z+37	; 0x25
    1e9e:	66 a1       	ldd	r22, Z+38	; 0x26
    1ea0:	77 a1       	ldd	r23, Z+39	; 0x27

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1ea2:	41 15       	cp	r20, r1
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	61 05       	cpc	r22, r1
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	51 f5       	brne	.+84     	; 0x1f00 <dir_sdi+0xc4>
		dj->clust = clst;
    1eac:	f7 01       	movw	r30, r14
    1eae:	12 86       	std	Z+10, r1	; 0x0a
    1eb0:	13 86       	std	Z+11, r1	; 0x0b
    1eb2:	14 86       	std	Z+12, r1	; 0x0c
    1eb4:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	80 85       	ldd	r24, Z+8	; 0x08
    1ebe:	91 85       	ldd	r25, Z+9	; 0x09
    1ec0:	c8 16       	cp	r12, r24
    1ec2:	d9 06       	cpc	r13, r25
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <dir_sdi+0x8c>
    1ec6:	92 c0       	rjmp	.+292    	; 0x1fec <dir_sdi+0x1b0>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1ec8:	62 85       	ldd	r22, Z+10	; 0x0a
    1eca:	73 85       	ldd	r23, Z+11	; 0x0b
    1ecc:	a5 e0       	ldi	r26, 0x05	; 5
    1ece:	76 95       	lsr	r23
    1ed0:	67 95       	ror	r22
    1ed2:	aa 95       	dec	r26
    1ed4:	e1 f7       	brne	.-8      	; 0x1ece <dir_sdi+0x92>
    1ed6:	c6 01       	movw	r24, r12
    1ed8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	24 a1       	ldd	r18, Z+36	; 0x24
    1ee2:	35 a1       	ldd	r19, Z+37	; 0x25
    1ee4:	46 a1       	ldd	r20, Z+38	; 0x26
    1ee6:	57 a1       	ldd	r21, Z+39	; 0x27
    1ee8:	62 0f       	add	r22, r18
    1eea:	73 1f       	adc	r23, r19
    1eec:	84 1f       	adc	r24, r20
    1eee:	95 1f       	adc	r25, r21
    1ef0:	d7 01       	movw	r26, r14
    1ef2:	1e 96       	adiw	r26, 0x0e	; 14
    1ef4:	6d 93       	st	X+, r22
    1ef6:	7d 93       	st	X+, r23
    1ef8:	8d 93       	st	X+, r24
    1efa:	9c 93       	st	X, r25
    1efc:	51 97       	sbiw	r26, 0x11	; 17
    1efe:	5a c0       	rjmp	.+180    	; 0x1fb4 <dir_sdi+0x178>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1f00:	22 81       	ldd	r18, Z+2	; 0x02
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	82 85       	ldd	r24, Z+10	; 0x0a
    1f06:	93 85       	ldd	r25, Z+11	; 0x0b
    1f08:	e5 e0       	ldi	r30, 0x05	; 5
    1f0a:	96 95       	lsr	r25
    1f0c:	87 95       	ror	r24
    1f0e:	ea 95       	dec	r30
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <dir_sdi+0xce>
    1f12:	28 9f       	mul	r18, r24
    1f14:	80 01       	movw	r16, r0
    1f16:	29 9f       	mul	r18, r25
    1f18:	10 0d       	add	r17, r0
    1f1a:	38 9f       	mul	r19, r24
    1f1c:	10 0d       	add	r17, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	23 c0       	rjmp	.+70     	; 0x1f68 <dir_sdi+0x12c>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1f22:	ce 01       	movw	r24, r28
    1f24:	ae db       	rcall	.-2212   	; 0x1682 <get_fat>
    1f26:	ab 01       	movw	r20, r22
    1f28:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1f2a:	4f 3f       	cpi	r20, 0xFF	; 255
    1f2c:	bf ef       	ldi	r27, 0xFF	; 255
    1f2e:	5b 07       	cpc	r21, r27
    1f30:	bf ef       	ldi	r27, 0xFF	; 255
    1f32:	6b 07       	cpc	r22, r27
    1f34:	bf ef       	ldi	r27, 0xFF	; 255
    1f36:	7b 07       	cpc	r23, r27
    1f38:	11 f4       	brne	.+4      	; 0x1f3e <dir_sdi+0x102>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	58 c0       	rjmp	.+176    	; 0x1fee <dir_sdi+0x1b2>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1f3e:	42 30       	cpi	r20, 0x02	; 2
    1f40:	51 05       	cpc	r21, r1
    1f42:	61 05       	cpc	r22, r1
    1f44:	71 05       	cpc	r23, r1
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <dir_sdi+0x10e>
    1f48:	51 c0       	rjmp	.+162    	; 0x1fec <dir_sdi+0x1b0>
    1f4a:	d7 01       	movw	r26, r14
    1f4c:	ed 91       	ld	r30, X+
    1f4e:	fc 91       	ld	r31, X
    1f50:	80 8d       	ldd	r24, Z+24	; 0x18
    1f52:	91 8d       	ldd	r25, Z+25	; 0x19
    1f54:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f56:	b3 8d       	ldd	r27, Z+27	; 0x1b
    1f58:	48 17       	cp	r20, r24
    1f5a:	59 07       	cpc	r21, r25
    1f5c:	6a 07       	cpc	r22, r26
    1f5e:	7b 07       	cpc	r23, r27
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <dir_sdi+0x128>
    1f62:	44 c0       	rjmp	.+136    	; 0x1fec <dir_sdi+0x1b0>
				return FR_INT_ERR;
			idx -= ic;
    1f64:	c0 1a       	sub	r12, r16
    1f66:	d1 0a       	sbc	r13, r17
    1f68:	f7 01       	movw	r30, r14
    1f6a:	c0 81       	ld	r28, Z
    1f6c:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1f6e:	c0 16       	cp	r12, r16
    1f70:	d1 06       	cpc	r13, r17
    1f72:	b8 f6       	brcc	.-82     	; 0x1f22 <dir_sdi+0xe6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1f74:	d7 01       	movw	r26, r14
    1f76:	1a 96       	adiw	r26, 0x0a	; 10
    1f78:	4d 93       	st	X+, r20
    1f7a:	5d 93       	st	X+, r21
    1f7c:	6d 93       	st	X+, r22
    1f7e:	7c 93       	st	X, r23
    1f80:	1d 97       	sbiw	r26, 0x0d	; 13
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1f82:	ce 01       	movw	r24, r28
    1f84:	64 d9       	rcall	.-3384   	; 0x124e <clust2sect>
    1f86:	8b 01       	movw	r16, r22
    1f88:	9c 01       	movw	r18, r24
    1f8a:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f8c:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f8e:	45 e0       	ldi	r20, 0x05	; 5
    1f90:	76 95       	lsr	r23
    1f92:	67 95       	ror	r22
    1f94:	4a 95       	dec	r20
    1f96:	e1 f7       	brne	.-8      	; 0x1f90 <dir_sdi+0x154>
    1f98:	c6 01       	movw	r24, r12
    1f9a:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	60 0f       	add	r22, r16
    1fa4:	71 1f       	adc	r23, r17
    1fa6:	82 1f       	adc	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	f7 01       	movw	r30, r14
    1fac:	66 87       	std	Z+14, r22	; 0x0e
    1fae:	77 87       	std	Z+15, r23	; 0x0f
    1fb0:	80 8b       	std	Z+16, r24	; 0x10
    1fb2:	91 8b       	std	Z+17, r25	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1fb4:	d7 01       	movw	r26, r14
    1fb6:	ed 91       	ld	r30, X+
    1fb8:	fc 91       	ld	r31, X
    1fba:	62 85       	ldd	r22, Z+10	; 0x0a
    1fbc:	73 85       	ldd	r23, Z+11	; 0x0b
    1fbe:	35 e0       	ldi	r19, 0x05	; 5
    1fc0:	76 95       	lsr	r23
    1fc2:	67 95       	ror	r22
    1fc4:	3a 95       	dec	r19
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <dir_sdi+0x184>
    1fc8:	c6 01       	movw	r24, r12
    1fca:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    1fce:	25 e0       	ldi	r18, 0x05	; 5
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	2a 95       	dec	r18
    1fd6:	e1 f7       	brne	.-8      	; 0x1fd0 <dir_sdi+0x194>
    1fd8:	c0 96       	adiw	r24, 0x30	; 48
    1fda:	e8 0f       	add	r30, r24
    1fdc:	f9 1f       	adc	r31, r25
    1fde:	d7 01       	movw	r26, r14
    1fe0:	53 96       	adiw	r26, 0x13	; 19
    1fe2:	fc 93       	st	X, r31
    1fe4:	ee 93       	st	-X, r30
    1fe6:	52 97       	sbiw	r26, 0x12	; 18
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <dir_sdi+0x1b2>

	return FR_OK;	/* Seek succeeded */
    1fec:	82 e0       	ldi	r24, 0x02	; 2
}
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	df 90       	pop	r13
    1ffc:	cf 90       	pop	r12
    1ffe:	08 95       	ret

00002000 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2000:	2f 92       	push	r2
    2002:	3f 92       	push	r3
    2004:	4f 92       	push	r4
    2006:	5f 92       	push	r5
    2008:	6f 92       	push	r6
    200a:	7f 92       	push	r7
    200c:	8f 92       	push	r8
    200e:	9f 92       	push	r9
    2010:	af 92       	push	r10
    2012:	bf 92       	push	r11
    2014:	cf 92       	push	r12
    2016:	df 92       	push	r13
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	9f 83       	std	Y+7, r25	; 0x07
    2036:	8e 83       	std	Y+6, r24	; 0x06
    2038:	06 2f       	mov	r16, r22
    203a:	f7 2e       	mov	r15, r23
    203c:	1a 01       	movw	r2, r20
    203e:	3d 83       	std	Y+5, r19	; 0x05
    2040:	2c 83       	std	Y+4, r18	; 0x04
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    2042:	d9 01       	movw	r26, r18
    2044:	1d 92       	st	X+, r1
    2046:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    2048:	fc 01       	movw	r30, r24
    204a:	62 81       	ldd	r22, Z+2	; 0x02
    204c:	73 81       	ldd	r23, Z+3	; 0x03
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	4f d9       	rcall	.-3426   	; 0x12f2 <validate>
    2054:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2056:	88 23       	and	r24, r24
    2058:	09 f0       	breq	.+2      	; 0x205c <f_write+0x5c>
    205a:	fa c1       	rjmp	.+1012   	; 0x2450 <f_write+0x450>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    205c:	ae 81       	ldd	r26, Y+6	; 0x06
    205e:	bf 81       	ldd	r27, Y+7	; 0x07
    2060:	14 96       	adiw	r26, 0x04	; 4
    2062:	8c 91       	ld	r24, X
    2064:	87 ff       	sbrs	r24, 7
    2066:	02 c0       	rjmp	.+4      	; 0x206c <f_write+0x6c>
    2068:	b2 e0       	ldi	r27, 0x02	; 2
    206a:	8f c0       	rjmp	.+286    	; 0x218a <f_write+0x18a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    206c:	81 fd       	sbrc	r24, 1
    206e:	03 c0       	rjmp	.+6      	; 0x2076 <f_write+0x76>
    2070:	e7 e0       	ldi	r30, 0x07	; 7
    2072:	eb 83       	std	Y+3, r30	; 0x03
    2074:	ed c1       	rjmp	.+986    	; 0x2450 <f_write+0x450>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2076:	ae 81       	ldd	r26, Y+6	; 0x06
    2078:	bf 81       	ldd	r27, Y+7	; 0x07
    207a:	1a 96       	adiw	r26, 0x0a	; 10
    207c:	2d 91       	ld	r18, X+
    207e:	3d 91       	ld	r19, X+
    2080:	4d 91       	ld	r20, X+
    2082:	5c 91       	ld	r21, X
    2084:	1d 97       	sbiw	r26, 0x0d	; 13
    2086:	c1 01       	movw	r24, r2
    2088:	a0 e0       	ldi	r26, 0x00	; 0
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	82 0f       	add	r24, r18
    208e:	93 1f       	adc	r25, r19
    2090:	a4 1f       	adc	r26, r20
    2092:	b5 1f       	adc	r27, r21
    2094:	82 17       	cp	r24, r18
    2096:	93 07       	cpc	r25, r19
    2098:	a4 07       	cpc	r26, r20
    209a:	b5 07       	cpc	r27, r21
    209c:	10 f4       	brcc	.+4      	; 0x20a2 <f_write+0xa2>
    209e:	22 24       	eor	r2, r2
    20a0:	33 24       	eor	r3, r3
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    20a2:	80 2f       	mov	r24, r16
    20a4:	9f 2d       	mov	r25, r15
    20a6:	9c 01       	movw	r18, r24
    20a8:	3a 83       	std	Y+2, r19	; 0x02
    20aa:	29 83       	std	Y+1, r18	; 0x01
    20ac:	ac c1       	rjmp	.+856    	; 0x2406 <f_write+0x406>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    20ae:	ee 81       	ldd	r30, Y+6	; 0x06
    20b0:	ff 81       	ldd	r31, Y+7	; 0x07
    20b2:	c6 80       	ldd	r12, Z+6	; 0x06
    20b4:	d7 80       	ldd	r13, Z+7	; 0x07
    20b6:	e0 84       	ldd	r14, Z+8	; 0x08
    20b8:	f1 84       	ldd	r15, Z+9	; 0x09
    20ba:	60 80       	ld	r6, Z
    20bc:	71 80       	ldd	r7, Z+1	; 0x01
    20be:	d3 01       	movw	r26, r6
    20c0:	1a 96       	adiw	r26, 0x0a	; 10
    20c2:	8d 91       	ld	r24, X+
    20c4:	9c 91       	ld	r25, X
    20c6:	1b 97       	sbiw	r26, 0x0b	; 11
    20c8:	4c 01       	movw	r8, r24
    20ca:	aa 24       	eor	r10, r10
    20cc:	bb 24       	eor	r11, r11
    20ce:	c7 01       	movw	r24, r14
    20d0:	b6 01       	movw	r22, r12
    20d2:	a5 01       	movw	r20, r10
    20d4:	94 01       	movw	r18, r8
    20d6:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    20da:	61 15       	cp	r22, r1
    20dc:	71 05       	cpc	r23, r1
    20de:	81 05       	cpc	r24, r1
    20e0:	91 05       	cpc	r25, r1
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <f_write+0xe6>
    20e4:	1e c1       	rjmp	.+572    	; 0x2322 <f_write+0x322>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    20e6:	c7 01       	movw	r24, r14
    20e8:	b6 01       	movw	r22, r12
    20ea:	a5 01       	movw	r20, r10
    20ec:	94 01       	movw	r18, r8
    20ee:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    20f2:	f3 01       	movw	r30, r6
    20f4:	02 81       	ldd	r16, Z+2	; 0x02
    20f6:	01 50       	subi	r16, 0x01	; 1
    20f8:	02 23       	and	r16, r18
			if (!csect) {					/* On the cluster boundary? */
    20fa:	09 f0       	breq	.+2      	; 0x20fe <f_write+0xfe>
    20fc:	4e c0       	rjmp	.+156    	; 0x219a <f_write+0x19a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    20fe:	c1 14       	cp	r12, r1
    2100:	d1 04       	cpc	r13, r1
    2102:	e1 04       	cpc	r14, r1
    2104:	f1 04       	cpc	r15, r1
    2106:	d1 f4       	brne	.+52     	; 0x213c <f_write+0x13c>
					clst = fp->sclust;		/* Follow from the origin */
    2108:	ae 81       	ldd	r26, Y+6	; 0x06
    210a:	bf 81       	ldd	r27, Y+7	; 0x07
    210c:	1e 96       	adiw	r26, 0x0e	; 14
    210e:	6d 91       	ld	r22, X+
    2110:	7d 91       	ld	r23, X+
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    2118:	61 15       	cp	r22, r1
    211a:	71 05       	cpc	r23, r1
    211c:	81 05       	cpc	r24, r1
    211e:	91 05       	cpc	r25, r1
    2120:	e9 f4       	brne	.+58     	; 0x215c <f_write+0x15c>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2122:	c3 01       	movw	r24, r6
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	d8 db       	rcall	.-2128   	; 0x18de <create_chain>
    212e:	ee 81       	ldd	r30, Y+6	; 0x06
    2130:	ff 81       	ldd	r31, Y+7	; 0x07
    2132:	66 87       	std	Z+14, r22	; 0x0e
    2134:	77 87       	std	Z+15, r23	; 0x0f
    2136:	80 8b       	std	Z+16, r24	; 0x10
    2138:	91 8b       	std	Z+17, r25	; 0x11
    213a:	0a c0       	rjmp	.+20     	; 0x2150 <f_write+0x150>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    213c:	ae 81       	ldd	r26, Y+6	; 0x06
    213e:	bf 81       	ldd	r27, Y+7	; 0x07
    2140:	52 96       	adiw	r26, 0x12	; 18
    2142:	4d 91       	ld	r20, X+
    2144:	5d 91       	ld	r21, X+
    2146:	6d 91       	ld	r22, X+
    2148:	7c 91       	ld	r23, X
    214a:	55 97       	sbiw	r26, 0x15	; 21
    214c:	c3 01       	movw	r24, r6
    214e:	c7 db       	rcall	.-2162   	; 0x18de <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2150:	61 15       	cp	r22, r1
    2152:	71 05       	cpc	r23, r1
    2154:	81 05       	cpc	r24, r1
    2156:	91 05       	cpc	r25, r1
    2158:	09 f4       	brne	.+2      	; 0x215c <f_write+0x15c>
    215a:	59 c1       	rjmp	.+690    	; 0x240e <f_write+0x40e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    215c:	61 30       	cpi	r22, 0x01	; 1
    215e:	71 05       	cpc	r23, r1
    2160:	81 05       	cpc	r24, r1
    2162:	91 05       	cpc	r25, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <f_write+0x168>
    2166:	48 c0       	rjmp	.+144    	; 0x21f8 <f_write+0x1f8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2168:	6f 3f       	cpi	r22, 0xFF	; 255
    216a:	2f ef       	ldi	r18, 0xFF	; 255
    216c:	72 07       	cpc	r23, r18
    216e:	2f ef       	ldi	r18, 0xFF	; 255
    2170:	82 07       	cpc	r24, r18
    2172:	2f ef       	ldi	r18, 0xFF	; 255
    2174:	92 07       	cpc	r25, r18
    2176:	59 f4       	brne	.+22     	; 0x218e <f_write+0x18e>
    2178:	ae 81       	ldd	r26, Y+6	; 0x06
    217a:	bf 81       	ldd	r27, Y+7	; 0x07
    217c:	14 96       	adiw	r26, 0x04	; 4
    217e:	8c 91       	ld	r24, X
    2180:	14 97       	sbiw	r26, 0x04	; 4
    2182:	80 68       	ori	r24, 0x80	; 128
    2184:	14 96       	adiw	r26, 0x04	; 4
    2186:	8c 93       	st	X, r24
    2188:	b1 e0       	ldi	r27, 0x01	; 1
    218a:	bb 83       	std	Y+3, r27	; 0x03
    218c:	61 c1       	rjmp	.+706    	; 0x2450 <f_write+0x450>
				fp->clust = clst;			/* Update current cluster */
    218e:	ee 81       	ldd	r30, Y+6	; 0x06
    2190:	ff 81       	ldd	r31, Y+7	; 0x07
    2192:	62 8b       	std	Z+18, r22	; 0x12
    2194:	73 8b       	std	Z+19, r23	; 0x13
    2196:	84 8b       	std	Z+20, r24	; 0x14
    2198:	95 8b       	std	Z+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    219a:	ae 81       	ldd	r26, Y+6	; 0x06
    219c:	bf 81       	ldd	r27, Y+7	; 0x07
    219e:	ed 91       	ld	r30, X+
    21a0:	fc 91       	ld	r31, X
    21a2:	11 97       	sbiw	r26, 0x01	; 1
    21a4:	24 a5       	ldd	r18, Z+44	; 0x2c
    21a6:	35 a5       	ldd	r19, Z+45	; 0x2d
    21a8:	46 a5       	ldd	r20, Z+46	; 0x2e
    21aa:	57 a5       	ldd	r21, Z+47	; 0x2f
    21ac:	56 96       	adiw	r26, 0x16	; 22
    21ae:	cd 90       	ld	r12, X+
    21b0:	dd 90       	ld	r13, X+
    21b2:	ed 90       	ld	r14, X+
    21b4:	fc 90       	ld	r15, X
    21b6:	59 97       	sbiw	r26, 0x19	; 25
    21b8:	2c 15       	cp	r18, r12
    21ba:	3d 05       	cpc	r19, r13
    21bc:	4e 05       	cpc	r20, r14
    21be:	5f 05       	cpc	r21, r15
    21c0:	49 f4       	brne	.+18     	; 0x21d4 <f_write+0x1d4>
    21c2:	cf 01       	movw	r24, r30
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	a7 d8       	rcall	.-3762   	; 0x131c <move_window>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <f_write+0x1d4>
    21d2:	bf c0       	rjmp	.+382    	; 0x2352 <f_write+0x352>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    21d4:	ae 81       	ldd	r26, Y+6	; 0x06
    21d6:	bf 81       	ldd	r27, Y+7	; 0x07
    21d8:	ed 90       	ld	r14, X+
    21da:	fc 90       	ld	r15, X
    21dc:	11 97       	sbiw	r26, 0x01	; 1
    21de:	52 96       	adiw	r26, 0x12	; 18
    21e0:	4d 91       	ld	r20, X+
    21e2:	5d 91       	ld	r21, X+
    21e4:	6d 91       	ld	r22, X+
    21e6:	7c 91       	ld	r23, X
    21e8:	55 97       	sbiw	r26, 0x15	; 21
    21ea:	c7 01       	movw	r24, r14
    21ec:	30 d8       	rcall	.-4000   	; 0x124e <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    21ee:	61 15       	cp	r22, r1
    21f0:	71 05       	cpc	r23, r1
    21f2:	81 05       	cpc	r24, r1
    21f4:	91 05       	cpc	r25, r1
    21f6:	39 f4       	brne	.+14     	; 0x2206 <f_write+0x206>
    21f8:	ee 81       	ldd	r30, Y+6	; 0x06
    21fa:	ff 81       	ldd	r31, Y+7	; 0x07
    21fc:	84 81       	ldd	r24, Z+4	; 0x04
    21fe:	80 68       	ori	r24, 0x80	; 128
    2200:	84 83       	std	Z+4, r24	; 0x04
    2202:	f2 e0       	ldi	r31, 0x02	; 2
    2204:	ac c0       	rjmp	.+344    	; 0x235e <f_write+0x35e>
			sect += csect;
    2206:	3b 01       	movw	r6, r22
    2208:	4c 01       	movw	r8, r24
    220a:	60 0e       	add	r6, r16
    220c:	71 1c       	adc	r7, r1
    220e:	81 1c       	adc	r8, r1
    2210:	91 1c       	adc	r9, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2212:	d7 01       	movw	r26, r14
    2214:	1a 96       	adiw	r26, 0x0a	; 10
    2216:	6d 91       	ld	r22, X+
    2218:	7c 91       	ld	r23, X
    221a:	1b 97       	sbiw	r26, 0x0b	; 11
    221c:	c1 01       	movw	r24, r2
    221e:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    2222:	2b 01       	movw	r4, r22
			if (cc) {						/* Write maximum contiguous sectors directly */
    2224:	61 15       	cp	r22, r1
    2226:	71 05       	cpc	r23, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <f_write+0x22c>
    222a:	55 c0       	rjmp	.+170    	; 0x22d6 <f_write+0x2d6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    222c:	f7 01       	movw	r30, r14
    222e:	22 81       	ldd	r18, Z+2	; 0x02
    2230:	40 2f       	mov	r20, r16
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	cb 01       	movw	r24, r22
    2236:	84 0f       	add	r24, r20
    2238:	95 1f       	adc	r25, r21
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	28 17       	cp	r18, r24
    223e:	39 07       	cpc	r19, r25
    2240:	18 f4       	brcc	.+6      	; 0x2248 <f_write+0x248>
					cc = fp->fs->csize - csect;
    2242:	29 01       	movw	r4, r18
    2244:	44 1a       	sub	r4, r20
    2246:	55 0a       	sbc	r5, r21
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2248:	d7 01       	movw	r26, r14
    224a:	11 96       	adiw	r26, 0x01	; 1
    224c:	8c 91       	ld	r24, X
    224e:	69 81       	ldd	r22, Y+1	; 0x01
    2250:	7a 81       	ldd	r23, Y+2	; 0x02
    2252:	a4 01       	movw	r20, r8
    2254:	93 01       	movw	r18, r6
    2256:	04 2d       	mov	r16, r4
    2258:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <disk_write>
    225c:	88 23       	and	r24, r24
    225e:	09 f0       	breq	.+2      	; 0x2262 <f_write+0x262>
    2260:	78 c0       	rjmp	.+240    	; 0x2352 <f_write+0x352>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2262:	ae 81       	ldd	r26, Y+6	; 0x06
    2264:	bf 81       	ldd	r27, Y+7	; 0x07
    2266:	ad 90       	ld	r10, X+
    2268:	bc 90       	ld	r11, X
    226a:	f5 01       	movw	r30, r10
    226c:	c4 a4       	ldd	r12, Z+44	; 0x2c
    226e:	d5 a4       	ldd	r13, Z+45	; 0x2d
    2270:	e6 a4       	ldd	r14, Z+46	; 0x2e
    2272:	f7 a4       	ldd	r15, Z+47	; 0x2f
    2274:	c6 18       	sub	r12, r6
    2276:	d7 08       	sbc	r13, r7
    2278:	e8 08       	sbc	r14, r8
    227a:	f9 08       	sbc	r15, r9
    227c:	c2 01       	movw	r24, r4
    227e:	a0 e0       	ldi	r26, 0x00	; 0
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	c8 16       	cp	r12, r24
    2284:	d9 06       	cpc	r13, r25
    2286:	ea 06       	cpc	r14, r26
    2288:	fb 06       	cpc	r15, r27
    228a:	b8 f4       	brcc	.+46     	; 0x22ba <f_write+0x2ba>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    228c:	02 85       	ldd	r16, Z+10	; 0x0a
    228e:	13 85       	ldd	r17, Z+11	; 0x0b
    2290:	98 01       	movw	r18, r16
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	c7 01       	movw	r24, r14
    2298:	b6 01       	movw	r22, r12
    229a:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <__mulsi3>
    229e:	29 81       	ldd	r18, Y+1	; 0x01
    22a0:	3a 81       	ldd	r19, Y+2	; 0x02
    22a2:	62 0f       	add	r22, r18
    22a4:	73 1f       	adc	r23, r19
    22a6:	c5 01       	movw	r24, r10
    22a8:	c0 96       	adiw	r24, 0x30	; 48
    22aa:	a8 01       	movw	r20, r16
    22ac:	0e 94 06 09 	call	0x120c	; 0x120c <mem_cpy>
					fp->fs->wflag = 0;
    22b0:	ae 81       	ldd	r26, Y+6	; 0x06
    22b2:	bf 81       	ldd	r27, Y+7	; 0x07
    22b4:	ed 91       	ld	r30, X+
    22b6:	fc 91       	ld	r31, X
    22b8:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    22ba:	ae 81       	ldd	r26, Y+6	; 0x06
    22bc:	bf 81       	ldd	r27, Y+7	; 0x07
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	82 85       	ldd	r24, Z+10	; 0x0a
    22c4:	93 85       	ldd	r25, Z+11	; 0x0b
    22c6:	48 9e       	mul	r4, r24
    22c8:	70 01       	movw	r14, r0
    22ca:	49 9e       	mul	r4, r25
    22cc:	f0 0c       	add	r15, r0
    22ce:	58 9e       	mul	r5, r24
    22d0:	f0 0c       	add	r15, r0
    22d2:	11 24       	eor	r1, r1
    22d4:	77 c0       	rjmp	.+238    	; 0x23c4 <f_write+0x3c4>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    22d6:	ee 81       	ldd	r30, Y+6	; 0x06
    22d8:	ff 81       	ldd	r31, Y+7	; 0x07
    22da:	26 81       	ldd	r18, Z+6	; 0x06
    22dc:	37 81       	ldd	r19, Z+7	; 0x07
    22de:	40 85       	ldd	r20, Z+8	; 0x08
    22e0:	51 85       	ldd	r21, Z+9	; 0x09
    22e2:	82 85       	ldd	r24, Z+10	; 0x0a
    22e4:	93 85       	ldd	r25, Z+11	; 0x0b
    22e6:	a4 85       	ldd	r26, Z+12	; 0x0c
    22e8:	b5 85       	ldd	r27, Z+13	; 0x0d
    22ea:	28 17       	cp	r18, r24
    22ec:	39 07       	cpc	r19, r25
    22ee:	4a 07       	cpc	r20, r26
    22f0:	5b 07       	cpc	r21, r27
    22f2:	88 f0       	brcs	.+34     	; 0x2316 <f_write+0x316>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    22f4:	c7 01       	movw	r24, r14
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	0e d8       	rcall	.-4068   	; 0x131c <move_window>
    2300:	88 23       	and	r24, r24
    2302:	09 f0       	breq	.+2      	; 0x2306 <f_write+0x306>
    2304:	39 cf       	rjmp	.-398    	; 0x2178 <f_write+0x178>
				fp->fs->winsect = sect;
    2306:	ae 81       	ldd	r26, Y+6	; 0x06
    2308:	bf 81       	ldd	r27, Y+7	; 0x07
    230a:	ed 91       	ld	r30, X+
    230c:	fc 91       	ld	r31, X
    230e:	64 a6       	std	Z+44, r6	; 0x2c
    2310:	75 a6       	std	Z+45, r7	; 0x2d
    2312:	86 a6       	std	Z+46, r8	; 0x2e
    2314:	97 a6       	std	Z+47, r9	; 0x2f
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2316:	ee 81       	ldd	r30, Y+6	; 0x06
    2318:	ff 81       	ldd	r31, Y+7	; 0x07
    231a:	66 8a       	std	Z+22, r6	; 0x16
    231c:	77 8a       	std	Z+23, r7	; 0x17
    231e:	80 8e       	std	Z+24, r8	; 0x18
    2320:	91 8e       	std	Z+25, r9	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2322:	ae 81       	ldd	r26, Y+6	; 0x06
    2324:	bf 81       	ldd	r27, Y+7	; 0x07
    2326:	16 96       	adiw	r26, 0x06	; 6
    2328:	cd 90       	ld	r12, X+
    232a:	dd 90       	ld	r13, X+
    232c:	ed 90       	ld	r14, X+
    232e:	fc 90       	ld	r15, X
    2330:	19 97       	sbiw	r26, 0x09	; 9
    2332:	ed 91       	ld	r30, X+
    2334:	fc 91       	ld	r31, X
    2336:	11 97       	sbiw	r26, 0x01	; 1
    2338:	a2 84       	ldd	r10, Z+10	; 0x0a
    233a:	b3 84       	ldd	r11, Z+11	; 0x0b
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    233c:	56 96       	adiw	r26, 0x16	; 22
    233e:	4d 91       	ld	r20, X+
    2340:	5d 91       	ld	r21, X+
    2342:	6d 91       	ld	r22, X+
    2344:	7c 91       	ld	r23, X
    2346:	59 97       	sbiw	r26, 0x19	; 25
    2348:	cf 01       	movw	r24, r30
    234a:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    234e:	88 23       	and	r24, r24
    2350:	41 f0       	breq	.+16     	; 0x2362 <f_write+0x362>
			ABORT(fp->fs, FR_DISK_ERR);
    2352:	ee 81       	ldd	r30, Y+6	; 0x06
    2354:	ff 81       	ldd	r31, Y+7	; 0x07
    2356:	84 81       	ldd	r24, Z+4	; 0x04
    2358:	80 68       	ori	r24, 0x80	; 128
    235a:	84 83       	std	Z+4, r24	; 0x04
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	fb 83       	std	Y+3, r31	; 0x03
    2360:	77 c0       	rjmp	.+238    	; 0x2450 <f_write+0x450>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2362:	95 01       	movw	r18, r10
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	c7 01       	movw	r24, r14
    236a:	b6 01       	movw	r22, r12
    236c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    2370:	95 01       	movw	r18, r10
    2372:	26 1b       	sub	r18, r22
    2374:	37 0b       	sbc	r19, r23
    2376:	71 01       	movw	r14, r2
    2378:	22 15       	cp	r18, r2
    237a:	33 05       	cpc	r19, r3
    237c:	08 f4       	brcc	.+2      	; 0x2380 <f_write+0x380>
    237e:	79 01       	movw	r14, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2380:	ae 81       	ldd	r26, Y+6	; 0x06
    2382:	bf 81       	ldd	r27, Y+7	; 0x07
    2384:	0d 91       	ld	r16, X+
    2386:	1c 91       	ld	r17, X
    2388:	11 97       	sbiw	r26, 0x01	; 1
    238a:	f8 01       	movw	r30, r16
    238c:	22 85       	ldd	r18, Z+10	; 0x0a
    238e:	33 85       	ldd	r19, Z+11	; 0x0b
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	16 96       	adiw	r26, 0x06	; 6
    2396:	6d 91       	ld	r22, X+
    2398:	7d 91       	ld	r23, X+
    239a:	8d 91       	ld	r24, X+
    239c:	9c 91       	ld	r25, X
    239e:	19 97       	sbiw	r26, 0x09	; 9
    23a0:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    23a4:	60 5d       	subi	r22, 0xD0	; 208
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	c8 01       	movw	r24, r16
    23aa:	86 0f       	add	r24, r22
    23ac:	97 1f       	adc	r25, r23
    23ae:	69 81       	ldd	r22, Y+1	; 0x01
    23b0:	7a 81       	ldd	r23, Y+2	; 0x02
    23b2:	a7 01       	movw	r20, r14
    23b4:	0e 94 06 09 	call	0x120c	; 0x120c <mem_cpy>
		fp->fs->wflag = 1;
    23b8:	ae 81       	ldd	r26, Y+6	; 0x06
    23ba:	bf 81       	ldd	r27, Y+7	; 0x07
    23bc:	ed 91       	ld	r30, X+
    23be:	fc 91       	ld	r31, X
    23c0:	b1 e0       	ldi	r27, 0x01	; 1
    23c2:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	ee 0d       	add	r30, r14
    23ca:	ff 1d       	adc	r31, r15
    23cc:	fa 83       	std	Y+2, r31	; 0x02
    23ce:	e9 83       	std	Y+1, r30	; 0x01
    23d0:	c7 01       	movw	r24, r14
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	ee 81       	ldd	r30, Y+6	; 0x06
    23d8:	ff 81       	ldd	r31, Y+7	; 0x07
    23da:	26 81       	ldd	r18, Z+6	; 0x06
    23dc:	37 81       	ldd	r19, Z+7	; 0x07
    23de:	40 85       	ldd	r20, Z+8	; 0x08
    23e0:	51 85       	ldd	r21, Z+9	; 0x09
    23e2:	28 0f       	add	r18, r24
    23e4:	39 1f       	adc	r19, r25
    23e6:	4a 1f       	adc	r20, r26
    23e8:	5b 1f       	adc	r21, r27
    23ea:	26 83       	std	Z+6, r18	; 0x06
    23ec:	37 83       	std	Z+7, r19	; 0x07
    23ee:	40 87       	std	Z+8, r20	; 0x08
    23f0:	51 87       	std	Z+9, r21	; 0x09
    23f2:	ec 81       	ldd	r30, Y+4	; 0x04
    23f4:	fd 81       	ldd	r31, Y+5	; 0x05
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	8e 0d       	add	r24, r14
    23fc:	9f 1d       	adc	r25, r15
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
    2402:	2e 18       	sub	r2, r14
    2404:	3f 08       	sbc	r3, r15
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2406:	21 14       	cp	r2, r1
    2408:	31 04       	cpc	r3, r1
    240a:	09 f0       	breq	.+2      	; 0x240e <f_write+0x40e>
    240c:	50 ce       	rjmp	.-864    	; 0x20ae <f_write+0xae>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    240e:	ae 81       	ldd	r26, Y+6	; 0x06
    2410:	bf 81       	ldd	r27, Y+7	; 0x07
    2412:	16 96       	adiw	r26, 0x06	; 6
    2414:	2d 91       	ld	r18, X+
    2416:	3d 91       	ld	r19, X+
    2418:	4d 91       	ld	r20, X+
    241a:	5c 91       	ld	r21, X
    241c:	19 97       	sbiw	r26, 0x09	; 9
    241e:	1a 96       	adiw	r26, 0x0a	; 10
    2420:	8d 91       	ld	r24, X+
    2422:	9d 91       	ld	r25, X+
    2424:	0d 90       	ld	r0, X+
    2426:	bc 91       	ld	r27, X
    2428:	a0 2d       	mov	r26, r0
    242a:	82 17       	cp	r24, r18
    242c:	93 07       	cpc	r25, r19
    242e:	a4 07       	cpc	r26, r20
    2430:	b5 07       	cpc	r27, r21
    2432:	30 f4       	brcc	.+12     	; 0x2440 <f_write+0x440>
    2434:	ee 81       	ldd	r30, Y+6	; 0x06
    2436:	ff 81       	ldd	r31, Y+7	; 0x07
    2438:	22 87       	std	Z+10, r18	; 0x0a
    243a:	33 87       	std	Z+11, r19	; 0x0b
    243c:	44 87       	std	Z+12, r20	; 0x0c
    243e:	55 87       	std	Z+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2440:	ae 81       	ldd	r26, Y+6	; 0x06
    2442:	bf 81       	ldd	r27, Y+7	; 0x07
    2444:	14 96       	adiw	r26, 0x04	; 4
    2446:	8c 91       	ld	r24, X
    2448:	14 97       	sbiw	r26, 0x04	; 4
    244a:	80 62       	ori	r24, 0x20	; 32
    244c:	14 96       	adiw	r26, 0x04	; 4
    244e:	8c 93       	st	X, r24

	LEAVE_FF(fp->fs, FR_OK);
}
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	27 96       	adiw	r28, 0x07	; 7
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	1f 91       	pop	r17
    2464:	0f 91       	pop	r16
    2466:	ff 90       	pop	r15
    2468:	ef 90       	pop	r14
    246a:	df 90       	pop	r13
    246c:	cf 90       	pop	r12
    246e:	bf 90       	pop	r11
    2470:	af 90       	pop	r10
    2472:	9f 90       	pop	r9
    2474:	8f 90       	pop	r8
    2476:	7f 90       	pop	r7
    2478:	6f 90       	pop	r6
    247a:	5f 90       	pop	r5
    247c:	4f 90       	pop	r4
    247e:	3f 90       	pop	r3
    2480:	2f 90       	pop	r2
    2482:	08 95       	ret

00002484 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2484:	8f 92       	push	r8
    2486:	9f 92       	push	r9
    2488:	af 92       	push	r10
    248a:	bf 92       	push	r11
    248c:	cf 92       	push	r12
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	ec 01       	movw	r28, r24
    249e:	4b 01       	movw	r8, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    24a0:	ac 80       	ldd	r10, Y+4	; 0x04
    24a2:	bd 80       	ldd	r11, Y+5	; 0x05
    24a4:	08 94       	sec
    24a6:	a1 1c       	adc	r10, r1
    24a8:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    24aa:	a1 14       	cp	r10, r1
    24ac:	b1 04       	cpc	r11, r1
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <dir_next+0x2e>
    24b0:	00 c1       	rjmp	.+512    	; 0x26b2 <dir_next+0x22e>
    24b2:	0e 85       	ldd	r16, Y+14	; 0x0e
    24b4:	1f 85       	ldd	r17, Y+15	; 0x0f
    24b6:	28 89       	ldd	r18, Y+16	; 0x10
    24b8:	39 89       	ldd	r19, Y+17	; 0x11
    24ba:	01 15       	cp	r16, r1
    24bc:	11 05       	cpc	r17, r1
    24be:	21 05       	cpc	r18, r1
    24c0:	31 05       	cpc	r19, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <dir_next+0x42>
    24c4:	f6 c0       	rjmp	.+492    	; 0x26b2 <dir_next+0x22e>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    24c6:	e8 81       	ld	r30, Y
    24c8:	f9 81       	ldd	r31, Y+1	; 0x01
    24ca:	62 85       	ldd	r22, Z+10	; 0x0a
    24cc:	73 85       	ldd	r23, Z+11	; 0x0b
    24ce:	95 e0       	ldi	r25, 0x05	; 5
    24d0:	76 95       	lsr	r23
    24d2:	67 95       	ror	r22
    24d4:	9a 95       	dec	r25
    24d6:	e1 f7       	brne	.-8      	; 0x24d0 <dir_next+0x4c>
    24d8:	c5 01       	movw	r24, r10
    24da:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    24de:	89 2b       	or	r24, r25
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <dir_next+0x60>
    24e2:	cd c0       	rjmp	.+410    	; 0x267e <dir_next+0x1fa>
		dj->sect++;					/* Next sector */
    24e4:	0f 5f       	subi	r16, 0xFF	; 255
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	2f 4f       	sbci	r18, 0xFF	; 255
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	0e 87       	std	Y+14, r16	; 0x0e
    24ee:	1f 87       	std	Y+15, r17	; 0x0f
    24f0:	28 8b       	std	Y+16, r18	; 0x10
    24f2:	39 8b       	std	Y+17, r19	; 0x11

		if (dj->clust == 0) {	/* Static table */
    24f4:	ea 84       	ldd	r14, Y+10	; 0x0a
    24f6:	fb 84       	ldd	r15, Y+11	; 0x0b
    24f8:	0c 85       	ldd	r16, Y+12	; 0x0c
    24fa:	1d 85       	ldd	r17, Y+13	; 0x0d
    24fc:	e1 14       	cp	r14, r1
    24fe:	f1 04       	cpc	r15, r1
    2500:	01 05       	cpc	r16, r1
    2502:	11 05       	cpc	r17, r1
    2504:	39 f4       	brne	.+14     	; 0x2514 <dir_next+0x90>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2506:	80 85       	ldd	r24, Z+8	; 0x08
    2508:	91 85       	ldd	r25, Z+9	; 0x09
    250a:	a8 16       	cp	r10, r24
    250c:	b9 06       	cpc	r11, r25
    250e:	08 f4       	brcc	.+2      	; 0x2512 <dir_next+0x8e>
    2510:	b6 c0       	rjmp	.+364    	; 0x267e <dir_next+0x1fa>
    2512:	cf c0       	rjmp	.+414    	; 0x26b2 <dir_next+0x22e>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2514:	22 81       	ldd	r18, Z+2	; 0x02
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	21 50       	subi	r18, 0x01	; 1
    251a:	30 40       	sbci	r19, 0x00	; 0
    251c:	62 85       	ldd	r22, Z+10	; 0x0a
    251e:	73 85       	ldd	r23, Z+11	; 0x0b
    2520:	85 e0       	ldi	r24, 0x05	; 5
    2522:	76 95       	lsr	r23
    2524:	67 95       	ror	r22
    2526:	8a 95       	dec	r24
    2528:	e1 f7       	brne	.-8      	; 0x2522 <dir_next+0x9e>
    252a:	c5 01       	movw	r24, r10
    252c:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    2530:	26 23       	and	r18, r22
    2532:	37 23       	and	r19, r23
    2534:	23 2b       	or	r18, r19
    2536:	09 f0       	breq	.+2      	; 0x253a <dir_next+0xb6>
    2538:	a2 c0       	rjmp	.+324    	; 0x267e <dir_next+0x1fa>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    253a:	cf 01       	movw	r24, r30
    253c:	b8 01       	movw	r22, r16
    253e:	a7 01       	movw	r20, r14
    2540:	a0 d8       	rcall	.-3776   	; 0x1682 <get_fat>
    2542:	6b 01       	movw	r12, r22
    2544:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	c8 16       	cp	r12, r24
    254a:	d1 04       	cpc	r13, r1
    254c:	e1 04       	cpc	r14, r1
    254e:	f1 04       	cpc	r15, r1
    2550:	08 f4       	brcc	.+2      	; 0x2554 <dir_next+0xd0>
    2552:	b1 c0       	rjmp	.+354    	; 0x26b6 <dir_next+0x232>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2554:	ef ef       	ldi	r30, 0xFF	; 255
    2556:	ce 16       	cp	r12, r30
    2558:	ef ef       	ldi	r30, 0xFF	; 255
    255a:	de 06       	cpc	r13, r30
    255c:	ef ef       	ldi	r30, 0xFF	; 255
    255e:	ee 06       	cpc	r14, r30
    2560:	ef ef       	ldi	r30, 0xFF	; 255
    2562:	fe 06       	cpc	r15, r30
    2564:	09 f4       	brne	.+2      	; 0x2568 <dir_next+0xe4>
    2566:	a9 c0       	rjmp	.+338    	; 0x26ba <dir_next+0x236>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    2568:	e8 81       	ld	r30, Y
    256a:	f9 81       	ldd	r31, Y+1	; 0x01
    256c:	80 8d       	ldd	r24, Z+24	; 0x18
    256e:	91 8d       	ldd	r25, Z+25	; 0x19
    2570:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2572:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2574:	c8 16       	cp	r12, r24
    2576:	d9 06       	cpc	r13, r25
    2578:	ea 06       	cpc	r14, r26
    257a:	fb 06       	cpc	r15, r27
    257c:	08 f4       	brcc	.+2      	; 0x2580 <dir_next+0xfc>
    257e:	71 c0       	rjmp	.+226    	; 0x2662 <dir_next+0x1de>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2580:	89 28       	or	r8, r9
    2582:	09 f4       	brne	.+2      	; 0x2586 <dir_next+0x102>
    2584:	96 c0       	rjmp	.+300    	; 0x26b2 <dir_next+0x22e>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    2586:	4a 85       	ldd	r20, Y+10	; 0x0a
    2588:	5b 85       	ldd	r21, Y+11	; 0x0b
    258a:	6c 85       	ldd	r22, Y+12	; 0x0c
    258c:	7d 85       	ldd	r23, Y+13	; 0x0d
    258e:	cf 01       	movw	r24, r30
    2590:	a6 d9       	rcall	.-3252   	; 0x18de <create_chain>
    2592:	6b 01       	movw	r12, r22
    2594:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2596:	61 15       	cp	r22, r1
    2598:	71 05       	cpc	r23, r1
    259a:	81 05       	cpc	r24, r1
    259c:	91 05       	cpc	r25, r1
    259e:	11 f4       	brne	.+4      	; 0x25a4 <dir_next+0x120>
    25a0:	87 e0       	ldi	r24, 0x07	; 7
    25a2:	8c c0       	rjmp	.+280    	; 0x26bc <dir_next+0x238>
					if (clst == 1) return FR_INT_ERR;
    25a4:	61 30       	cpi	r22, 0x01	; 1
    25a6:	71 05       	cpc	r23, r1
    25a8:	81 05       	cpc	r24, r1
    25aa:	91 05       	cpc	r25, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <dir_next+0x12c>
    25ae:	83 c0       	rjmp	.+262    	; 0x26b6 <dir_next+0x232>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	c8 16       	cp	r12, r24
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	d8 06       	cpc	r13, r24
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	e8 06       	cpc	r14, r24
    25bc:	8f ef       	ldi	r24, 0xFF	; 255
    25be:	f8 06       	cpc	r15, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <dir_next+0x140>
    25c2:	7b c0       	rjmp	.+246    	; 0x26ba <dir_next+0x236>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    25c4:	88 81       	ld	r24, Y
    25c6:	99 81       	ldd	r25, Y+1	; 0x01
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	70 e0       	ldi	r23, 0x00	; 0
    25d0:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    25d4:	88 23       	and	r24, r24
    25d6:	09 f0       	breq	.+2      	; 0x25da <dir_next+0x156>
    25d8:	70 c0       	rjmp	.+224    	; 0x26ba <dir_next+0x236>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    25da:	e8 81       	ld	r30, Y
    25dc:	f9 81       	ldd	r31, Y+1	; 0x01
    25de:	42 85       	ldd	r20, Z+10	; 0x0a
    25e0:	53 85       	ldd	r21, Z+11	; 0x0b
    25e2:	cf 01       	movw	r24, r30
    25e4:	c0 96       	adiw	r24, 0x30	; 48
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	0e 94 1e 09 	call	0x123c	; 0x123c <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    25ee:	08 81       	ld	r16, Y
    25f0:	19 81       	ldd	r17, Y+1	; 0x01
    25f2:	c8 01       	movw	r24, r16
    25f4:	b7 01       	movw	r22, r14
    25f6:	a6 01       	movw	r20, r12
    25f8:	0e 94 27 09 	call	0x124e	; 0x124e <clust2sect>
    25fc:	f8 01       	movw	r30, r16
    25fe:	64 a7       	std	Z+44, r22	; 0x2c
    2600:	75 a7       	std	Z+45, r23	; 0x2d
    2602:	86 a7       	std	Z+46, r24	; 0x2e
    2604:	97 a7       	std	Z+47, r25	; 0x2f
    2606:	10 e0       	ldi	r17, 0x00	; 0
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    2608:	01 e0       	ldi	r16, 0x01	; 1
    260a:	1a c0       	rjmp	.+52     	; 0x2640 <dir_next+0x1bc>
    260c:	04 83       	std	Z+4, r16	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    260e:	88 81       	ld	r24, Y
    2610:	99 81       	ldd	r25, Y+1	; 0x01
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    261e:	88 23       	and	r24, r24
    2620:	09 f0       	breq	.+2      	; 0x2624 <dir_next+0x1a0>
    2622:	4b c0       	rjmp	.+150    	; 0x26ba <dir_next+0x236>
						dj->fs->winsect++;
    2624:	e8 81       	ld	r30, Y
    2626:	f9 81       	ldd	r31, Y+1	; 0x01
    2628:	84 a5       	ldd	r24, Z+44	; 0x2c
    262a:	95 a5       	ldd	r25, Z+45	; 0x2d
    262c:	a6 a5       	ldd	r26, Z+46	; 0x2e
    262e:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2630:	01 96       	adiw	r24, 0x01	; 1
    2632:	a1 1d       	adc	r26, r1
    2634:	b1 1d       	adc	r27, r1
    2636:	84 a7       	std	Z+44, r24	; 0x2c
    2638:	95 a7       	std	Z+45, r25	; 0x2d
    263a:	a6 a7       	std	Z+46, r26	; 0x2e
    263c:	b7 a7       	std	Z+47, r27	; 0x2f
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    263e:	1f 5f       	subi	r17, 0xFF	; 255
    2640:	e8 81       	ld	r30, Y
    2642:	f9 81       	ldd	r31, Y+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	18 17       	cp	r17, r24
    2648:	08 f3       	brcs	.-62     	; 0x260c <dir_next+0x188>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    264a:	84 a5       	ldd	r24, Z+44	; 0x2c
    264c:	95 a5       	ldd	r25, Z+45	; 0x2d
    264e:	a6 a5       	ldd	r26, Z+46	; 0x2e
    2650:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2652:	81 1b       	sub	r24, r17
    2654:	91 09       	sbc	r25, r1
    2656:	a1 09       	sbc	r26, r1
    2658:	b1 09       	sbc	r27, r1
    265a:	84 a7       	std	Z+44, r24	; 0x2c
    265c:	95 a7       	std	Z+45, r25	; 0x2d
    265e:	a6 a7       	std	Z+46, r26	; 0x2e
    2660:	b7 a7       	std	Z+47, r27	; 0x2f
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    2662:	ca 86       	std	Y+10, r12	; 0x0a
    2664:	db 86       	std	Y+11, r13	; 0x0b
    2666:	ec 86       	std	Y+12, r14	; 0x0c
    2668:	fd 86       	std	Y+13, r15	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    266a:	88 81       	ld	r24, Y
    266c:	99 81       	ldd	r25, Y+1	; 0x01
    266e:	b7 01       	movw	r22, r14
    2670:	a6 01       	movw	r20, r12
    2672:	0e 94 27 09 	call	0x124e	; 0x124e <clust2sect>
    2676:	6e 87       	std	Y+14, r22	; 0x0e
    2678:	7f 87       	std	Y+15, r23	; 0x0f
    267a:	88 8b       	std	Y+16, r24	; 0x10
    267c:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    267e:	bd 82       	std	Y+5, r11	; 0x05
    2680:	ac 82       	std	Y+4, r10	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    2682:	e8 81       	ld	r30, Y
    2684:	f9 81       	ldd	r31, Y+1	; 0x01
    2686:	62 85       	ldd	r22, Z+10	; 0x0a
    2688:	73 85       	ldd	r23, Z+11	; 0x0b
    268a:	15 e0       	ldi	r17, 0x05	; 5
    268c:	76 95       	lsr	r23
    268e:	67 95       	ror	r22
    2690:	1a 95       	dec	r17
    2692:	e1 f7       	brne	.-8      	; 0x268c <dir_next+0x208>
    2694:	c5 01       	movw	r24, r10
    2696:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    269a:	b5 e0       	ldi	r27, 0x05	; 5
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	ba 95       	dec	r27
    26a2:	e1 f7       	brne	.-8      	; 0x269c <dir_next+0x218>
    26a4:	c0 96       	adiw	r24, 0x30	; 48
    26a6:	e8 0f       	add	r30, r24
    26a8:	f9 1f       	adc	r31, r25
    26aa:	fb 8b       	std	Y+19, r31	; 0x13
    26ac:	ea 8b       	std	Y+18, r30	; 0x12
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <dir_next+0x238>

	return FR_OK;
    26b2:	84 e0       	ldi	r24, 0x04	; 4
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <dir_next+0x238>
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	01 c0       	rjmp	.+2      	; 0x26bc <dir_next+0x238>
    26ba:	81 e0       	ldi	r24, 0x01	; 1
}
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	9f 90       	pop	r9
    26d2:	8f 90       	pop	r8
    26d4:	08 95       	ret

000026d6 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    26d6:	0f 93       	push	r16
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	ec 01       	movw	r28, r24
    26de:	9a 01       	movw	r18, r20
    26e0:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    26e2:	bc 01       	movw	r22, r24
    26e4:	60 5d       	subi	r22, 0xD0	; 208
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	01 e0       	ldi	r16, 0x01	; 1
    26ec:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <disk_read>
    26f0:	88 23       	and	r24, r24
    26f2:	11 f0       	breq	.+4      	; 0x26f8 <check_fs+0x22>
    26f4:	63 e0       	ldi	r22, 0x03	; 3
    26f6:	6d c0       	rjmp	.+218    	; 0x27d2 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    26f8:	c1 5d       	subi	r28, 0xD1	; 209
    26fa:	dd 4f       	sbci	r29, 0xFD	; 253
    26fc:	98 81       	ld	r25, Y
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	2a 91       	ld	r18, -Y
    2702:	ce 52       	subi	r28, 0x2E	; 46
    2704:	d2 40       	sbci	r29, 0x02	; 2
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	82 2b       	or	r24, r18
    270a:	93 2b       	or	r25, r19
    270c:	85 55       	subi	r24, 0x55	; 85
    270e:	9a 4a       	sbci	r25, 0xAA	; 170
    2710:	11 f0       	breq	.+4      	; 0x2716 <check_fs+0x40>
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	5e c0       	rjmp	.+188    	; 0x27d2 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2716:	c7 59       	subi	r28, 0x97	; 151
    2718:	df 4f       	sbci	r29, 0xFF	; 255
    271a:	28 81       	ld	r18, Y
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	50 e0       	ldi	r21, 0x00	; 0
    2722:	52 2f       	mov	r21, r18
    2724:	44 27       	eor	r20, r20
    2726:	33 27       	eor	r19, r19
    2728:	22 27       	eor	r18, r18
    272a:	8a 91       	ld	r24, -Y
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	dc 01       	movw	r26, r24
    2734:	99 27       	eor	r25, r25
    2736:	88 27       	eor	r24, r24
    2738:	28 2b       	or	r18, r24
    273a:	39 2b       	or	r19, r25
    273c:	4a 2b       	or	r20, r26
    273e:	5b 2b       	or	r21, r27
    2740:	22 97       	sbiw	r28, 0x02	; 2
    2742:	89 91       	ld	r24, Y+
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 e0       	ldi	r26, 0x00	; 0
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	28 2b       	or	r18, r24
    274c:	39 2b       	or	r19, r25
    274e:	4a 2b       	or	r20, r26
    2750:	5b 2b       	or	r21, r27
    2752:	98 81       	ld	r25, Y
    2754:	c7 56       	subi	r28, 0x67	; 103
    2756:	d0 40       	sbci	r29, 0x00	; 0
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	28 2b       	or	r18, r24
    2760:	39 2b       	or	r19, r25
    2762:	4a 2b       	or	r20, r26
    2764:	5b 2b       	or	r21, r27
    2766:	50 70       	andi	r21, 0x00	; 0
    2768:	26 54       	subi	r18, 0x46	; 70
    276a:	31 44       	sbci	r19, 0x41	; 65
    276c:	44 45       	sbci	r20, 0x54	; 84
    276e:	50 40       	sbci	r21, 0x00	; 0
    2770:	11 f4       	brne	.+4      	; 0x2776 <check_fs+0xa0>
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	2e c0       	rjmp	.+92     	; 0x27d2 <check_fs+0xfc>
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	cb 57       	subi	r28, 0x7B	; 123
    277a:	df 4f       	sbci	r29, 0xFF	; 255
    277c:	28 81       	ld	r18, Y
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	52 2f       	mov	r21, r18
    2786:	44 27       	eor	r20, r20
    2788:	33 27       	eor	r19, r19
    278a:	22 27       	eor	r18, r18
    278c:	8a 91       	ld	r24, -Y
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	dc 01       	movw	r26, r24
    2796:	99 27       	eor	r25, r25
    2798:	88 27       	eor	r24, r24
    279a:	28 2b       	or	r18, r24
    279c:	39 2b       	or	r19, r25
    279e:	4a 2b       	or	r20, r26
    27a0:	5b 2b       	or	r21, r27
    27a2:	22 97       	sbiw	r28, 0x02	; 2
    27a4:	89 91       	ld	r24, Y+
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e0       	ldi	r26, 0x00	; 0
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	28 2b       	or	r18, r24
    27ae:	39 2b       	or	r19, r25
    27b0:	4a 2b       	or	r20, r26
    27b2:	5b 2b       	or	r21, r27
    27b4:	98 81       	ld	r25, Y
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	a0 e0       	ldi	r26, 0x00	; 0
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	28 2b       	or	r18, r24
    27be:	39 2b       	or	r19, r25
    27c0:	4a 2b       	or	r20, r26
    27c2:	5b 2b       	or	r21, r27
    27c4:	50 70       	andi	r21, 0x00	; 0
    27c6:	26 54       	subi	r18, 0x46	; 70
    27c8:	31 44       	sbci	r19, 0x41	; 65
    27ca:	44 45       	sbci	r20, 0x54	; 84
    27cc:	50 40       	sbci	r21, 0x00	; 0
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <check_fs+0xfc>
    27d0:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    27d2:	86 2f       	mov	r24, r22
    27d4:	df 91       	pop	r29
    27d6:	cf 91       	pop	r28
    27d8:	0f 91       	pop	r16
    27da:	08 95       	ret

000027dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    27e6:	6a 81       	ldd	r22, Y+2	; 0x02
    27e8:	7b 81       	ldd	r23, Y+3	; 0x03
    27ea:	88 81       	ld	r24, Y
    27ec:	99 81       	ldd	r25, Y+1	; 0x01
    27ee:	0e 94 79 09 	call	0x12f2	; 0x12f2 <validate>
    27f2:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    27f4:	88 23       	and	r24, r24
    27f6:	09 f0       	breq	.+2      	; 0x27fa <f_sync+0x1e>
    27f8:	e2 c0       	rjmp	.+452    	; 0x29be <f_sync+0x1e2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	85 ff       	sbrs	r24, 5
    27fe:	df c0       	rjmp	.+446    	; 0x29be <f_sync+0x1e2>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2800:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2802:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2804:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2806:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2808:	88 81       	ld	r24, Y
    280a:	99 81       	ldd	r25, Y+1	; 0x01
    280c:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    2810:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    2812:	88 23       	and	r24, r24
    2814:	09 f0       	breq	.+2      	; 0x2818 <f_sync+0x3c>
    2816:	d3 c0       	rjmp	.+422    	; 0x29be <f_sync+0x1e2>
				dir = fp->dir_ptr;
    2818:	0e 8d       	ldd	r16, Y+30	; 0x1e
    281a:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    281c:	f8 01       	movw	r30, r16
    281e:	83 85       	ldd	r24, Z+11	; 0x0b
    2820:	80 62       	ori	r24, 0x20	; 32
    2822:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2824:	8a 85       	ldd	r24, Y+10	; 0x0a
    2826:	84 8f       	std	Z+28, r24	; 0x1c
    2828:	8b 85       	ldd	r24, Y+11	; 0x0b
    282a:	85 8f       	std	Z+29, r24	; 0x1d
    282c:	8a 85       	ldd	r24, Y+10	; 0x0a
    282e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2830:	ac 85       	ldd	r26, Y+12	; 0x0c
    2832:	bd 85       	ldd	r27, Y+13	; 0x0d
    2834:	cd 01       	movw	r24, r26
    2836:	aa 27       	eor	r26, r26
    2838:	bb 27       	eor	r27, r27
    283a:	86 8f       	std	Z+30, r24	; 0x1e
    283c:	8a 85       	ldd	r24, Y+10	; 0x0a
    283e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2840:	ac 85       	ldd	r26, Y+12	; 0x0c
    2842:	bd 85       	ldd	r27, Y+13	; 0x0d
    2844:	8b 2f       	mov	r24, r27
    2846:	99 27       	eor	r25, r25
    2848:	aa 27       	eor	r26, r26
    284a:	bb 27       	eor	r27, r27
    284c:	87 8f       	std	Z+31, r24	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    284e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2850:	82 8f       	std	Z+26, r24	; 0x1a
    2852:	8f 85       	ldd	r24, Y+15	; 0x0f
    2854:	83 8f       	std	Z+27, r24	; 0x1b
    2856:	8e 85       	ldd	r24, Y+14	; 0x0e
    2858:	9f 85       	ldd	r25, Y+15	; 0x0f
    285a:	a8 89       	ldd	r26, Y+16	; 0x10
    285c:	b9 89       	ldd	r27, Y+17	; 0x11
    285e:	cd 01       	movw	r24, r26
    2860:	aa 27       	eor	r26, r26
    2862:	bb 27       	eor	r27, r27
    2864:	84 8b       	std	Z+20, r24	; 0x14
    2866:	8e 85       	ldd	r24, Y+14	; 0x0e
    2868:	9f 85       	ldd	r25, Y+15	; 0x0f
    286a:	a8 89       	ldd	r26, Y+16	; 0x10
    286c:	b9 89       	ldd	r27, Y+17	; 0x11
    286e:	cd 01       	movw	r24, r26
    2870:	aa 27       	eor	r26, r26
    2872:	bb 27       	eor	r27, r27
    2874:	89 2f       	mov	r24, r25
    2876:	99 27       	eor	r25, r25
    2878:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();						/* Update updated time */
    287a:	0e 94 8c 08 	call	0x1118	; 0x1118 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    287e:	f8 01       	movw	r30, r16
    2880:	66 8b       	std	Z+22, r22	; 0x16
    2882:	27 2f       	mov	r18, r23
    2884:	33 27       	eor	r19, r19
    2886:	27 8b       	std	Z+23, r18	; 0x17
    2888:	9c 01       	movw	r18, r24
    288a:	44 27       	eor	r20, r20
    288c:	55 27       	eor	r21, r21
    288e:	20 8f       	std	Z+24, r18	; 0x18
    2890:	69 2f       	mov	r22, r25
    2892:	77 27       	eor	r23, r23
    2894:	88 27       	eor	r24, r24
    2896:	99 27       	eor	r25, r25
    2898:	61 8f       	std	Z+25, r22	; 0x19
				fp->flag &= ~FA__WRITTEN;
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	8f 7d       	andi	r24, 0xDF	; 223
    289e:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    28a0:	e8 81       	ld	r30, Y
    28a2:	f9 81       	ldd	r31, Y+1	; 0x01
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    28a8:	09 90       	ld	r0, Y+
    28aa:	d8 81       	ld	r29, Y
    28ac:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = move_window(fs, 0);
    28ae:	ce 01       	movw	r24, r28
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    28bc:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    28be:	88 23       	and	r24, r24
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <f_sync+0xe8>
    28c2:	7d c0       	rjmp	.+250    	; 0x29be <f_sync+0x1e2>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    28c4:	88 81       	ld	r24, Y
    28c6:	83 30       	cpi	r24, 0x03	; 3
    28c8:	09 f0       	breq	.+2      	; 0x28cc <f_sync+0xf0>
    28ca:	70 c0       	rjmp	.+224    	; 0x29ac <f_sync+0x1d0>
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	88 23       	and	r24, r24
    28d0:	09 f4       	brne	.+2      	; 0x28d4 <f_sync+0xf8>
    28d2:	6c c0       	rjmp	.+216    	; 0x29ac <f_sync+0x1d0>
			fs->winsect = 0;
    28d4:	1c a6       	std	Y+44, r1	; 0x2c
    28d6:	1d a6       	std	Y+45, r1	; 0x2d
    28d8:	1e a6       	std	Y+46, r1	; 0x2e
    28da:	1f a6       	std	Y+47, r1	; 0x2f
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    28dc:	8e 01       	movw	r16, r28
    28de:	00 5d       	subi	r16, 0xD0	; 208
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	c8 01       	movw	r24, r16
    28e4:	60 e0       	ldi	r22, 0x00	; 0
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	52 e0       	ldi	r21, 0x02	; 2
    28ec:	0e 94 1e 09 	call	0x123c	; 0x123c <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    28f0:	c2 5d       	subi	r28, 0xD2	; 210
    28f2:	dd 4f       	sbci	r29, 0xFD	; 253
    28f4:	85 e5       	ldi	r24, 0x55	; 85
    28f6:	89 93       	st	Y+, r24
    28f8:	8a ea       	ldi	r24, 0xAA	; 170
    28fa:	88 83       	st	Y, r24
    28fc:	cf 52       	subi	r28, 0x2F	; 47
    28fe:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    2900:	82 e5       	ldi	r24, 0x52	; 82
    2902:	88 ab       	std	Y+48, r24	; 0x30
    2904:	89 ab       	std	Y+49, r24	; 0x31
    2906:	21 e6       	ldi	r18, 0x61	; 97
    2908:	2a ab       	std	Y+50, r18	; 0x32
    290a:	91 e4       	ldi	r25, 0x41	; 65
    290c:	9b ab       	std	Y+51, r25	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    290e:	cc 5e       	subi	r28, 0xEC	; 236
    2910:	dd 4f       	sbci	r29, 0xFD	; 253
    2912:	82 e7       	ldi	r24, 0x72	; 114
    2914:	89 93       	st	Y+, r24
    2916:	89 93       	st	Y+, r24
    2918:	99 93       	st	Y+, r25
    291a:	28 83       	st	Y, r18
    291c:	c7 51       	subi	r28, 0x17	; 23
    291e:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    2920:	88 89       	ldd	r24, Y+16	; 0x10
    2922:	c8 5e       	subi	r28, 0xE8	; 232
    2924:	dd 4f       	sbci	r29, 0xFD	; 253
    2926:	88 83       	st	Y, r24
    2928:	c8 51       	subi	r28, 0x18	; 24
    292a:	d2 40       	sbci	r29, 0x02	; 2
    292c:	89 89       	ldd	r24, Y+17	; 0x11
    292e:	c7 5e       	subi	r28, 0xE7	; 231
    2930:	dd 4f       	sbci	r29, 0xFD	; 253
    2932:	88 83       	st	Y, r24
    2934:	c9 51       	subi	r28, 0x19	; 25
    2936:	d2 40       	sbci	r29, 0x02	; 2
    2938:	88 89       	ldd	r24, Y+16	; 0x10
    293a:	99 89       	ldd	r25, Y+17	; 0x11
    293c:	aa 89       	ldd	r26, Y+18	; 0x12
    293e:	bb 89       	ldd	r27, Y+19	; 0x13
    2940:	9d 01       	movw	r18, r26
    2942:	44 27       	eor	r20, r20
    2944:	55 27       	eor	r21, r21
    2946:	c6 5e       	subi	r28, 0xE6	; 230
    2948:	dd 4f       	sbci	r29, 0xFD	; 253
    294a:	28 83       	st	Y, r18
    294c:	21 96       	adiw	r28, 0x01	; 1
    294e:	8b 2f       	mov	r24, r27
    2950:	99 27       	eor	r25, r25
    2952:	aa 27       	eor	r26, r26
    2954:	bb 27       	eor	r27, r27
    2956:	88 83       	st	Y, r24
    2958:	cb 51       	subi	r28, 0x1B	; 27
    295a:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    295c:	8c 85       	ldd	r24, Y+12	; 0x0c
    295e:	c4 5e       	subi	r28, 0xE4	; 228
    2960:	dd 4f       	sbci	r29, 0xFD	; 253
    2962:	88 83       	st	Y, r24
    2964:	cc 51       	subi	r28, 0x1C	; 28
    2966:	d2 40       	sbci	r29, 0x02	; 2
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	c3 5e       	subi	r28, 0xE3	; 227
    296c:	dd 4f       	sbci	r29, 0xFD	; 253
    296e:	88 83       	st	Y, r24
    2970:	cd 51       	subi	r28, 0x1D	; 29
    2972:	d2 40       	sbci	r29, 0x02	; 2
    2974:	8c 85       	ldd	r24, Y+12	; 0x0c
    2976:	9d 85       	ldd	r25, Y+13	; 0x0d
    2978:	ae 85       	ldd	r26, Y+14	; 0x0e
    297a:	bf 85       	ldd	r27, Y+15	; 0x0f
    297c:	9d 01       	movw	r18, r26
    297e:	44 27       	eor	r20, r20
    2980:	55 27       	eor	r21, r21
    2982:	c2 5e       	subi	r28, 0xE2	; 226
    2984:	dd 4f       	sbci	r29, 0xFD	; 253
    2986:	28 83       	st	Y, r18
    2988:	21 96       	adiw	r28, 0x01	; 1
    298a:	8b 2f       	mov	r24, r27
    298c:	99 27       	eor	r25, r25
    298e:	aa 27       	eor	r26, r26
    2990:	bb 27       	eor	r27, r27
    2992:	88 83       	st	Y, r24
    2994:	cf 51       	subi	r28, 0x1F	; 31
    2996:	d2 40       	sbci	r29, 0x02	; 2
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    2998:	2c 89       	ldd	r18, Y+20	; 0x14
    299a:	3d 89       	ldd	r19, Y+21	; 0x15
    299c:	4e 89       	ldd	r20, Y+22	; 0x16
    299e:	5f 89       	ldd	r21, Y+23	; 0x17
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	b8 01       	movw	r22, r16
    29a4:	01 e0       	ldi	r16, 0x01	; 1
    29a6:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <disk_write>
			fs->fsi_flag = 0;
    29aa:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0e 94 86 08 	call	0x110c	; 0x110c <disk_ioctl>
    29b8:	81 11       	cpse	r24, r1
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    29be:	89 2f       	mov	r24, r25
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    29d0:	05 df       	rcall	.-502    	; 0x27dc <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    29d2:	88 23       	and	r24, r24
    29d4:	11 f4       	brne	.+4      	; 0x29da <f_close+0x10>
    29d6:	19 82       	std	Y+1, r1	; 0x01
    29d8:	18 82       	st	Y, r1
	return res;
#endif
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    29e0:	2f 92       	push	r2
    29e2:	3f 92       	push	r3
    29e4:	4f 92       	push	r4
    29e6:	5f 92       	push	r5
    29e8:	6f 92       	push	r6
    29ea:	7f 92       	push	r7
    29ec:	8f 92       	push	r8
    29ee:	9f 92       	push	r9
    29f0:	af 92       	push	r10
    29f2:	bf 92       	push	r11
    29f4:	cf 92       	push	r12
    29f6:	df 92       	push	r13
    29f8:	ef 92       	push	r14
    29fa:	ff 92       	push	r15
    29fc:	0f 93       	push	r16
    29fe:	1f 93       	push	r17
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	e7 97       	sbiw	r28, 0x37	; 55
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	de bf       	out	0x3e, r29	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	cd bf       	out	0x3d, r28	; 61
    2a14:	9d ab       	std	Y+53, r25	; 0x35
    2a16:	8c ab       	std	Y+52, r24	; 0x34
    2a18:	7f ab       	std	Y+55, r23	; 0x37
    2a1a:	6e ab       	std	Y+54, r22	; 0x36
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	1d 92       	st	X+, r1
    2a20:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2a22:	4f 71       	andi	r20, 0x1F	; 31
    2a24:	4b a7       	std	Y+43, r20	; 0x2b
	WORD nrsv;
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    2a26:	fb 01       	movw	r30, r22
    2a28:	80 81       	ld	r24, Z
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	20 53       	subi	r18, 0x30	; 48
    2a30:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    2a32:	2a 30       	cpi	r18, 0x0A	; 10
    2a34:	31 05       	cpc	r19, r1
    2a36:	58 f4       	brcc	.+22     	; 0x2a4e <f_open+0x6e>
    2a38:	81 81       	ldd	r24, Z+1	; 0x01
    2a3a:	8a 33       	cpi	r24, 0x3A	; 58
    2a3c:	41 f4       	brne	.+16     	; 0x2a4e <f_open+0x6e>
		p += 2; *path = p;				/* Return pointer to the path name */
    2a3e:	32 96       	adiw	r30, 0x02	; 2
    2a40:	ff ab       	std	Y+55, r31	; 0x37
    2a42:	ee ab       	std	Y+54, r30	; 0x36
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    2a44:	23 2b       	or	r18, r19
    2a46:	19 f0       	breq	.+6      	; 0x2a4e <f_open+0x6e>
    2a48:	2b e0       	ldi	r18, 0x0B	; 11
    2a4a:	f2 2e       	mov	r15, r18
    2a4c:	18 c4       	rjmp	.+2096   	; 0x327e <f_open+0x89e>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    2a4e:	c0 90 24 06 	lds	r12, 0x0624
    2a52:	d0 90 25 06 	lds	r13, 0x0625
    2a56:	de 86       	std	Y+14, r13	; 0x0e
    2a58:	cd 86       	std	Y+13, r12	; 0x0d
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2a5a:	c1 14       	cp	r12, r1
    2a5c:	d1 04       	cpc	r13, r1
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <f_open+0x86>
    2a60:	9c e0       	ldi	r25, 0x0C	; 12
    2a62:	f9 2e       	mov	r15, r25
    2a64:	0c c4       	rjmp	.+2072   	; 0x327e <f_open+0x89e>

	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2a66:	fb a4       	ldd	r15, Y+43	; 0x2b
    2a68:	fe ef       	ldi	r31, 0xFE	; 254
    2a6a:	ff 22       	and	r15, r31
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    2a6c:	d6 01       	movw	r26, r12
    2a6e:	8c 91       	ld	r24, X
    2a70:	88 23       	and	r24, r24
    2a72:	61 f0       	breq	.+24     	; 0x2a8c <f_open+0xac>
		stat = disk_status(fs->drv);
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	8c 91       	ld	r24, X
    2a78:	0e 94 84 08 	call	0x1108	; 0x1108 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    2a7c:	80 fd       	sbrc	r24, 0
    2a7e:	06 c0       	rjmp	.+12     	; 0x2a8c <f_open+0xac>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2a80:	ff 20       	and	r15, r15
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <f_open+0xa6>
    2a84:	f5 c3       	rjmp	.+2026   	; 0x3270 <f_open+0x890>
    2a86:	82 fd       	sbrc	r24, 2
    2a88:	f0 c3       	rjmp	.+2016   	; 0x326a <f_open+0x88a>
    2a8a:	f2 c3       	rjmp	.+2020   	; 0x3270 <f_open+0x890>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2a8c:	f6 01       	movw	r30, r12
    2a8e:	10 82       	st	Z, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    2a90:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	0e 94 82 08 	call	0x1104	; 0x1104 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2a98:	08 2f       	mov	r16, r24
    2a9a:	80 ff       	sbrs	r24, 0
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <f_open+0xc4>
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	f8 2e       	mov	r15, r24
    2aa2:	ed c3       	rjmp	.+2010   	; 0x327e <f_open+0x89e>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
    2aa4:	a6 01       	movw	r20, r12
    2aa6:	46 5f       	subi	r20, 0xF6	; 246
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	d6 01       	movw	r26, r12
    2aac:	11 96       	adiw	r26, 0x01	; 1
    2aae:	8c 91       	ld	r24, X
    2ab0:	62 e0       	ldi	r22, 0x02	; 2
    2ab2:	0e 94 86 08 	call	0x110c	; 0x110c <disk_ioctl>
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <f_open+0xdc>
    2aba:	dc c3       	rjmp	.+1976   	; 0x3274 <f_open+0x894>
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2abc:	ff 20       	and	r15, r15
    2abe:	11 f0       	breq	.+4      	; 0x2ac4 <f_open+0xe4>
    2ac0:	02 fd       	sbrc	r16, 2
    2ac2:	d3 c3       	rjmp	.+1958   	; 0x326a <f_open+0x88a>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    2ac4:	c6 01       	movw	r24, r12
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	03 de       	rcall	.-1018   	; 0x26d6 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	29 f0       	breq	.+10     	; 0x2ade <f_open+0xfe>
    2ad4:	18 aa       	std	Y+48, r1	; 0x30
    2ad6:	19 aa       	std	Y+49, r1	; 0x31
    2ad8:	1a aa       	std	Y+50, r1	; 0x32
    2ada:	1b aa       	std	Y+51, r1	; 0x33
    2adc:	32 c0       	rjmp	.+100    	; 0x2b42 <f_open+0x162>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
    2ade:	f6 01       	movw	r30, r12
    2ae0:	e2 51       	subi	r30, 0x12	; 18
    2ae2:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2ae4:	84 81       	ldd	r24, Z+4	; 0x04
    2ae6:	88 23       	and	r24, r24
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <f_open+0x10c>
    2aea:	c7 c3       	rjmp	.+1934   	; 0x327a <f_open+0x89a>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2aec:	83 85       	ldd	r24, Z+11	; 0x0b
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	58 2f       	mov	r21, r24
    2af6:	44 27       	eor	r20, r20
    2af8:	33 27       	eor	r19, r19
    2afa:	22 27       	eor	r18, r18
    2afc:	82 85       	ldd	r24, Z+10	; 0x0a
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	dc 01       	movw	r26, r24
    2b06:	99 27       	eor	r25, r25
    2b08:	88 27       	eor	r24, r24
    2b0a:	28 2b       	or	r18, r24
    2b0c:	39 2b       	or	r19, r25
    2b0e:	4a 2b       	or	r20, r26
    2b10:	5b 2b       	or	r21, r27
    2b12:	80 85       	ldd	r24, Z+8	; 0x08
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	a0 e0       	ldi	r26, 0x00	; 0
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	28 2b       	or	r18, r24
    2b1c:	39 2b       	or	r19, r25
    2b1e:	4a 2b       	or	r20, r26
    2b20:	5b 2b       	or	r21, r27
    2b22:	91 85       	ldd	r25, Z+9	; 0x09
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	a0 e0       	ldi	r26, 0x00	; 0
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	28 2b       	or	r18, r24
    2b2c:	39 2b       	or	r19, r25
    2b2e:	4a 2b       	or	r20, r26
    2b30:	5b 2b       	or	r21, r27
    2b32:	28 ab       	std	Y+48, r18	; 0x30
    2b34:	39 ab       	std	Y+49, r19	; 0x31
    2b36:	4a ab       	std	Y+50, r20	; 0x32
    2b38:	5b ab       	std	Y+51, r21	; 0x33
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2b3a:	c6 01       	movw	r24, r12
    2b3c:	ba 01       	movw	r22, r20
    2b3e:	a9 01       	movw	r20, r18
    2b40:	ca dd       	rcall	.-1132   	; 0x26d6 <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    2b42:	83 30       	cpi	r24, 0x03	; 3
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <f_open+0x168>
    2b46:	96 c3       	rjmp	.+1836   	; 0x3274 <f_open+0x894>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    2b48:	88 23       	and	r24, r24
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <f_open+0x16e>
    2b4c:	96 c3       	rjmp	.+1836   	; 0x327a <f_open+0x89a>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2b4e:	d6 01       	movw	r26, r12
    2b50:	dc 96       	adiw	r26, 0x3c	; 60
    2b52:	9c 91       	ld	r25, X
    2b54:	dc 97       	sbiw	r26, 0x3c	; 60
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	db 96       	adiw	r26, 0x3b	; 59
    2b5a:	2c 91       	ld	r18, X
    2b5c:	db 97       	sbiw	r26, 0x3b	; 59
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	82 2b       	or	r24, r18
    2b62:	93 2b       	or	r25, r19
    2b64:	1a 96       	adiw	r26, 0x0a	; 10
    2b66:	2d 91       	ld	r18, X+
    2b68:	3c 91       	ld	r19, X
    2b6a:	1b 97       	sbiw	r26, 0x0b	; 11
    2b6c:	82 17       	cp	r24, r18
    2b6e:	93 07       	cpc	r25, r19
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <f_open+0x194>
    2b72:	83 c3       	rjmp	.+1798   	; 0x327a <f_open+0x89a>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2b74:	e7 e4       	ldi	r30, 0x47	; 71
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	ce 0e       	add	r12, r30
    2b7a:	df 1e       	adc	r13, r31
    2b7c:	d6 01       	movw	r26, r12
    2b7e:	9c 91       	ld	r25, X
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	f6 01       	movw	r30, r12
    2b84:	22 91       	ld	r18, -Z
    2b86:	6f 01       	movw	r12, r30
    2b88:	4a eb       	ldi	r20, 0xBA	; 186
    2b8a:	5f ef       	ldi	r21, 0xFF	; 255
    2b8c:	c4 0e       	add	r12, r20
    2b8e:	d5 1e       	adc	r13, r21
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	82 2b       	or	r24, r18
    2b94:	93 2b       	or	r25, r19
    2b96:	3c 01       	movw	r6, r24
    2b98:	88 24       	eor	r8, r8
    2b9a:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    2b9c:	61 14       	cp	r6, r1
    2b9e:	71 04       	cpc	r7, r1
    2ba0:	81 04       	cpc	r8, r1
    2ba2:	91 04       	cpc	r9, r1
    2ba4:	a9 f5       	brne	.+106    	; 0x2c10 <f_open+0x230>
    2ba6:	67 e5       	ldi	r22, 0x57	; 87
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	c6 0e       	add	r12, r22
    2bac:	d7 1e       	adc	r13, r23
    2bae:	d6 01       	movw	r26, r12
    2bb0:	8c 91       	ld	r24, X
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a0 e0       	ldi	r26, 0x00	; 0
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	98 2e       	mov	r9, r24
    2bba:	88 24       	eor	r8, r8
    2bbc:	77 24       	eor	r7, r7
    2bbe:	66 24       	eor	r6, r6
    2bc0:	f6 01       	movw	r30, r12
    2bc2:	82 91       	ld	r24, -Z
    2bc4:	6f 01       	movw	r12, r30
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e0       	ldi	r26, 0x00	; 0
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	dc 01       	movw	r26, r24
    2bce:	99 27       	eor	r25, r25
    2bd0:	88 27       	eor	r24, r24
    2bd2:	68 2a       	or	r6, r24
    2bd4:	79 2a       	or	r7, r25
    2bd6:	8a 2a       	or	r8, r26
    2bd8:	9b 2a       	or	r9, r27
    2bda:	2e ef       	ldi	r18, 0xFE	; 254
    2bdc:	3f ef       	ldi	r19, 0xFF	; 255
    2bde:	c2 0e       	add	r12, r18
    2be0:	d3 1e       	adc	r13, r19
    2be2:	d6 01       	movw	r26, r12
    2be4:	8d 91       	ld	r24, X+
    2be6:	6d 01       	movw	r12, r26
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	a0 e0       	ldi	r26, 0x00	; 0
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	68 2a       	or	r6, r24
    2bf0:	79 2a       	or	r7, r25
    2bf2:	8a 2a       	or	r8, r26
    2bf4:	9b 2a       	or	r9, r27
    2bf6:	f6 01       	movw	r30, r12
    2bf8:	90 81       	ld	r25, Z
    2bfa:	2b ea       	ldi	r18, 0xAB	; 171
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	c2 0e       	add	r12, r18
    2c00:	d3 1e       	adc	r13, r19
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	a0 e0       	ldi	r26, 0x00	; 0
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	68 2a       	or	r6, r24
    2c0a:	79 2a       	or	r7, r25
    2c0c:	8a 2a       	or	r8, r26
    2c0e:	9b 2a       	or	r9, r27
	fs->fsize = fasize;
    2c10:	d6 01       	movw	r26, r12
    2c12:	5c 96       	adiw	r26, 0x1c	; 28
    2c14:	6d 92       	st	X+, r6
    2c16:	7d 92       	st	X+, r7
    2c18:	8d 92       	st	X+, r8
    2c1a:	9c 92       	st	X, r9
    2c1c:	5f 97       	sbiw	r26, 0x1f	; 31

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    2c1e:	e0 e4       	ldi	r30, 0x40	; 64
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	ce 0e       	add	r12, r30
    2c24:	df 1e       	adc	r13, r31
    2c26:	d6 01       	movw	r26, r12
    2c28:	4c 91       	ld	r20, X
    2c2a:	e0 ec       	ldi	r30, 0xC0	; 192
    2c2c:	ff ef       	ldi	r31, 0xFF	; 255
    2c2e:	ce 0e       	add	r12, r30
    2c30:	df 1e       	adc	r13, r31
    2c32:	d6 01       	movw	r26, r12
    2c34:	13 96       	adiw	r26, 0x03	; 3
    2c36:	4c 93       	st	X, r20
    2c38:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    2c3a:	84 2f       	mov	r24, r20
    2c3c:	81 50       	subi	r24, 0x01	; 1
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <f_open+0x264>
    2c42:	1b c3       	rjmp	.+1590   	; 0x327a <f_open+0x89a>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    2c44:	dd 96       	adiw	r26, 0x3d	; 61
    2c46:	2c 91       	ld	r18, X
    2c48:	dd 97       	sbiw	r26, 0x3d	; 61
    2c4a:	12 96       	adiw	r26, 0x02	; 2
    2c4c:	2c 93       	st	X, r18
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    2c4e:	22 23       	and	r18, r18
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <f_open+0x274>
    2c52:	13 c3       	rjmp	.+1574   	; 0x327a <f_open+0x89a>
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	c9 01       	movw	r24, r18
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	82 23       	and	r24, r18
    2c5c:	93 23       	and	r25, r19
    2c5e:	89 2b       	or	r24, r25
    2c60:	09 f0       	breq	.+2      	; 0x2c64 <f_open+0x284>
    2c62:	0b c3       	rjmp	.+1558   	; 0x327a <f_open+0x89a>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2c64:	e2 e4       	ldi	r30, 0x42	; 66
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	ce 0e       	add	r12, r30
    2c6a:	df 1e       	adc	r13, r31
    2c6c:	d6 01       	movw	r26, r12
    2c6e:	9c 91       	ld	r25, X
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	f6 01       	movw	r30, r12
    2c74:	22 91       	ld	r18, -Z
    2c76:	6f 01       	movw	r12, r30
    2c78:	6f eb       	ldi	r22, 0xBF	; 191
    2c7a:	7f ef       	ldi	r23, 0xFF	; 255
    2c7c:	c6 0e       	add	r12, r22
    2c7e:	d7 1e       	adc	r13, r23
    2c80:	42 2e       	mov	r4, r18
    2c82:	55 24       	eor	r5, r5
    2c84:	48 2a       	or	r4, r24
    2c86:	59 2a       	or	r5, r25
    2c88:	d6 01       	movw	r26, r12
    2c8a:	19 96       	adiw	r26, 0x09	; 9
    2c8c:	5c 92       	st	X, r5
    2c8e:	4e 92       	st	-X, r4
    2c90:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2c92:	1a 96       	adiw	r26, 0x0a	; 10
    2c94:	2d 90       	ld	r2, X+
    2c96:	3c 90       	ld	r3, X
    2c98:	1b 97       	sbiw	r26, 0x0b	; 11
    2c9a:	75 e0       	ldi	r23, 0x05	; 5
    2c9c:	36 94       	lsr	r3
    2c9e:	27 94       	ror	r2
    2ca0:	7a 95       	dec	r23
    2ca2:	e1 f7       	brne	.-8      	; 0x2c9c <f_open+0x2bc>
    2ca4:	c2 01       	movw	r24, r4
    2ca6:	b1 01       	movw	r22, r2
    2ca8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    2cac:	89 2b       	or	r24, r25
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <f_open+0x2d2>
    2cb0:	e4 c2       	rjmp	.+1480   	; 0x327a <f_open+0x89a>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2cb2:	e4 e4       	ldi	r30, 0x44	; 68
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	ce 0e       	add	r12, r30
    2cb8:	df 1e       	adc	r13, r31
    2cba:	d6 01       	movw	r26, r12
    2cbc:	9c 91       	ld	r25, X
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	f6 01       	movw	r30, r12
    2cc2:	22 91       	ld	r18, -Z
    2cc4:	6f 01       	movw	r12, r30
    2cc6:	6d eb       	ldi	r22, 0xBD	; 189
    2cc8:	7f ef       	ldi	r23, 0xFF	; 255
    2cca:	c6 0e       	add	r12, r22
    2ccc:	d7 1e       	adc	r13, r23
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	82 2b       	or	r24, r18
    2cd2:	93 2b       	or	r25, r19
    2cd4:	7c 01       	movw	r14, r24
    2cd6:	00 e0       	ldi	r16, 0x00	; 0
    2cd8:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2cda:	e1 14       	cp	r14, r1
    2cdc:	f1 04       	cpc	r15, r1
    2cde:	01 05       	cpc	r16, r1
    2ce0:	11 05       	cpc	r17, r1
    2ce2:	a9 f5       	brne	.+106    	; 0x2d4e <f_open+0x36e>
    2ce4:	83 e5       	ldi	r24, 0x53	; 83
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	c8 0e       	add	r12, r24
    2cea:	d9 1e       	adc	r13, r25
    2cec:	d6 01       	movw	r26, r12
    2cee:	8c 91       	ld	r24, X
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a0 e0       	ldi	r26, 0x00	; 0
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	18 2f       	mov	r17, r24
    2cf8:	00 27       	eor	r16, r16
    2cfa:	ff 24       	eor	r15, r15
    2cfc:	ee 24       	eor	r14, r14
    2cfe:	f6 01       	movw	r30, r12
    2d00:	82 91       	ld	r24, -Z
    2d02:	6f 01       	movw	r12, r30
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e0       	ldi	r26, 0x00	; 0
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	99 27       	eor	r25, r25
    2d0e:	88 27       	eor	r24, r24
    2d10:	e8 2a       	or	r14, r24
    2d12:	f9 2a       	or	r15, r25
    2d14:	0a 2b       	or	r16, r26
    2d16:	1b 2b       	or	r17, r27
    2d18:	2e ef       	ldi	r18, 0xFE	; 254
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	c2 0e       	add	r12, r18
    2d1e:	d3 1e       	adc	r13, r19
    2d20:	d6 01       	movw	r26, r12
    2d22:	8d 91       	ld	r24, X+
    2d24:	6d 01       	movw	r12, r26
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	a0 e0       	ldi	r26, 0x00	; 0
    2d2a:	b0 e0       	ldi	r27, 0x00	; 0
    2d2c:	e8 2a       	or	r14, r24
    2d2e:	f9 2a       	or	r15, r25
    2d30:	0a 2b       	or	r16, r26
    2d32:	1b 2b       	or	r17, r27
    2d34:	f6 01       	movw	r30, r12
    2d36:	90 81       	ld	r25, Z
    2d38:	2f ea       	ldi	r18, 0xAF	; 175
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	c2 0e       	add	r12, r18
    2d3e:	d3 1e       	adc	r13, r19
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	a0 e0       	ldi	r26, 0x00	; 0
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e8 2a       	or	r14, r24
    2d48:	f9 2a       	or	r15, r25
    2d4a:	0a 2b       	or	r16, r26
    2d4c:	1b 2b       	or	r17, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2d4e:	d6 01       	movw	r26, r12
    2d50:	df 96       	adiw	r26, 0x3f	; 63
    2d52:	9c 91       	ld	r25, X
    2d54:	df 97       	sbiw	r26, 0x3f	; 63
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	de 96       	adiw	r26, 0x3e	; 62
    2d5a:	2c 91       	ld	r18, X
    2d5c:	a2 2e       	mov	r10, r18
    2d5e:	bb 24       	eor	r11, r11
    2d60:	a8 2a       	or	r10, r24
    2d62:	b9 2a       	or	r11, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2d64:	a1 14       	cp	r10, r1
    2d66:	b1 04       	cpc	r11, r1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <f_open+0x38c>
    2d6a:	87 c2       	rjmp	.+1294   	; 0x327a <f_open+0x89a>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    2d6c:	24 2f       	mov	r18, r20
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	50 e0       	ldi	r21, 0x00	; 0
    2d74:	c4 01       	movw	r24, r8
    2d76:	b3 01       	movw	r22, r6
    2d78:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <__mulsi3>
    2d7c:	6b a3       	std	Y+35, r22	; 0x23
    2d7e:	7c a3       	std	Y+36, r23	; 0x24
    2d80:	8d a3       	std	Y+37, r24	; 0x25
    2d82:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    2d84:	95 01       	movw	r18, r10
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	2c a7       	std	Y+44, r18	; 0x2c
    2d8c:	3d a7       	std	Y+45, r19	; 0x2d
    2d8e:	4e a7       	std	Y+46, r20	; 0x2e
    2d90:	5f a7       	std	Y+47, r21	; 0x2f
    2d92:	c2 01       	movw	r24, r4
    2d94:	b1 01       	movw	r22, r2
    2d96:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__udivmodhi4>
    2d9a:	4b 01       	movw	r8, r22
    2d9c:	aa 24       	eor	r10, r10
    2d9e:	bb 24       	eor	r11, r11
    2da0:	4c a5       	ldd	r20, Y+44	; 0x2c
    2da2:	5d a5       	ldd	r21, Y+45	; 0x2d
    2da4:	6e a5       	ldd	r22, Y+46	; 0x2e
    2da6:	7f a5       	ldd	r23, Y+47	; 0x2f
    2da8:	84 0e       	add	r8, r20
    2daa:	95 1e       	adc	r9, r21
    2dac:	a6 1e       	adc	r10, r22
    2dae:	b7 1e       	adc	r11, r23
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	86 0e       	add	r8, r22
    2dba:	97 1e       	adc	r9, r23
    2dbc:	a8 1e       	adc	r10, r24
    2dbe:	b9 1e       	adc	r11, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2dc0:	e8 14       	cp	r14, r8
    2dc2:	f9 04       	cpc	r15, r9
    2dc4:	0a 05       	cpc	r16, r10
    2dc6:	1b 05       	cpc	r17, r11
    2dc8:	08 f4       	brcc	.+2      	; 0x2dcc <f_open+0x3ec>
    2dca:	57 c2       	rjmp	.+1198   	; 0x327a <f_open+0x89a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2dcc:	e8 18       	sub	r14, r8
    2dce:	f9 08       	sbc	r15, r9
    2dd0:	0a 09       	sbc	r16, r10
    2dd2:	1b 09       	sbc	r17, r11
    2dd4:	d6 01       	movw	r26, r12
    2dd6:	12 96       	adiw	r26, 0x02	; 2
    2dd8:	2c 91       	ld	r18, X
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	50 e0       	ldi	r21, 0x00	; 0
    2de0:	c8 01       	movw	r24, r16
    2de2:	b7 01       	movw	r22, r14
    2de4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    2de8:	c9 01       	movw	r24, r18
    2dea:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	a1 05       	cpc	r26, r1
    2df0:	b1 05       	cpc	r27, r1
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <f_open+0x416>
    2df4:	42 c2       	rjmp	.+1156   	; 0x327a <f_open+0x89a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2df6:	86 3f       	cpi	r24, 0xF6	; 246
    2df8:	ef e0       	ldi	r30, 0x0F	; 15
    2dfa:	9e 07       	cpc	r25, r30
    2dfc:	e0 e0       	ldi	r30, 0x00	; 0
    2dfe:	ae 07       	cpc	r26, r30
    2e00:	e0 e0       	ldi	r30, 0x00	; 0
    2e02:	be 07       	cpc	r27, r30
    2e04:	18 f4       	brcc	.+6      	; 0x2e0c <f_open+0x42c>
    2e06:	33 24       	eor	r3, r3
    2e08:	33 94       	inc	r3
    2e0a:	0d c0       	rjmp	.+26     	; 0x2e26 <f_open+0x446>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2e0c:	86 3f       	cpi	r24, 0xF6	; 246
    2e0e:	ff ef       	ldi	r31, 0xFF	; 255
    2e10:	9f 07       	cpc	r25, r31
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	af 07       	cpc	r26, r31
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	bf 07       	cpc	r27, r31
    2e1a:	18 f0       	brcs	.+6      	; 0x2e22 <f_open+0x442>
    2e1c:	43 e0       	ldi	r20, 0x03	; 3
    2e1e:	34 2e       	mov	r3, r20
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <f_open+0x446>
    2e22:	32 e0       	ldi	r19, 0x02	; 2
    2e24:	33 2e       	mov	r3, r19

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2e26:	22 e0       	ldi	r18, 0x02	; 2
    2e28:	42 2e       	mov	r4, r18
    2e2a:	51 2c       	mov	r5, r1
    2e2c:	61 2c       	mov	r6, r1
    2e2e:	71 2c       	mov	r7, r1
    2e30:	48 0e       	add	r4, r24
    2e32:	59 1e       	adc	r5, r25
    2e34:	6a 1e       	adc	r6, r26
    2e36:	7b 1e       	adc	r7, r27
    2e38:	d6 01       	movw	r26, r12
    2e3a:	58 96       	adiw	r26, 0x18	; 24
    2e3c:	4d 92       	st	X+, r4
    2e3e:	5d 92       	st	X+, r5
    2e40:	6d 92       	st	X+, r6
    2e42:	7c 92       	st	X, r7
    2e44:	5b 97       	sbiw	r26, 0x1b	; 27
	fs->database = bsect + sysect;						/* Data start sector */
    2e46:	28 a9       	ldd	r18, Y+48	; 0x30
    2e48:	39 a9       	ldd	r19, Y+49	; 0x31
    2e4a:	4a a9       	ldd	r20, Y+50	; 0x32
    2e4c:	5b a9       	ldd	r21, Y+51	; 0x33
    2e4e:	82 0e       	add	r8, r18
    2e50:	93 1e       	adc	r9, r19
    2e52:	a4 1e       	adc	r10, r20
    2e54:	b5 1e       	adc	r11, r21
    2e56:	98 96       	adiw	r26, 0x28	; 40
    2e58:	8d 92       	st	X+, r8
    2e5a:	9d 92       	st	X+, r9
    2e5c:	ad 92       	st	X+, r10
    2e5e:	bc 92       	st	X, r11
    2e60:	9b 97       	sbiw	r26, 0x2b	; 43
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2e62:	28 a9       	ldd	r18, Y+48	; 0x30
    2e64:	39 a9       	ldd	r19, Y+49	; 0x31
    2e66:	4a a9       	ldd	r20, Y+50	; 0x32
    2e68:	5b a9       	ldd	r21, Y+51	; 0x33
    2e6a:	6c a5       	ldd	r22, Y+44	; 0x2c
    2e6c:	7d a5       	ldd	r23, Y+45	; 0x2d
    2e6e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2e70:	9f a5       	ldd	r25, Y+47	; 0x2f
    2e72:	26 0f       	add	r18, r22
    2e74:	37 1f       	adc	r19, r23
    2e76:	48 1f       	adc	r20, r24
    2e78:	59 1f       	adc	r21, r25
    2e7a:	90 96       	adiw	r26, 0x20	; 32
    2e7c:	2d 93       	st	X+, r18
    2e7e:	3d 93       	st	X+, r19
    2e80:	4d 93       	st	X+, r20
    2e82:	5c 93       	st	X, r21
    2e84:	93 97       	sbiw	r26, 0x23	; 35
    2e86:	18 96       	adiw	r26, 0x08	; 8
    2e88:	8d 91       	ld	r24, X+
    2e8a:	9c 91       	ld	r25, X
    2e8c:	19 97       	sbiw	r26, 0x09	; 9
	if (fmt == FS_FAT32) {
    2e8e:	b3 e0       	ldi	r27, 0x03	; 3
    2e90:	3b 16       	cp	r3, r27
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <f_open+0x4b6>
    2e94:	49 c0       	rjmp	.+146    	; 0x2f28 <f_open+0x548>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2e96:	89 2b       	or	r24, r25
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <f_open+0x4bc>
    2e9a:	ef c1       	rjmp	.+990    	; 0x327a <f_open+0x89a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2e9c:	ef e5       	ldi	r30, 0x5F	; 95
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	ce 0e       	add	r12, r30
    2ea2:	df 1e       	adc	r13, r31
    2ea4:	d6 01       	movw	r26, r12
    2ea6:	2c 91       	ld	r18, X
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	50 e0       	ldi	r21, 0x00	; 0
    2eae:	52 2f       	mov	r21, r18
    2eb0:	44 27       	eor	r20, r20
    2eb2:	33 27       	eor	r19, r19
    2eb4:	22 27       	eor	r18, r18
    2eb6:	f6 01       	movw	r30, r12
    2eb8:	82 91       	ld	r24, -Z
    2eba:	6f 01       	movw	r12, r30
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a0 e0       	ldi	r26, 0x00	; 0
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	99 27       	eor	r25, r25
    2ec6:	88 27       	eor	r24, r24
    2ec8:	28 2b       	or	r18, r24
    2eca:	39 2b       	or	r19, r25
    2ecc:	4a 2b       	or	r20, r26
    2ece:	5b 2b       	or	r21, r27
    2ed0:	6e ef       	ldi	r22, 0xFE	; 254
    2ed2:	7f ef       	ldi	r23, 0xFF	; 255
    2ed4:	c6 0e       	add	r12, r22
    2ed6:	d7 1e       	adc	r13, r23
    2ed8:	d6 01       	movw	r26, r12
    2eda:	8d 91       	ld	r24, X+
    2edc:	6d 01       	movw	r12, r26
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e0       	ldi	r26, 0x00	; 0
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	28 2b       	or	r18, r24
    2ee6:	39 2b       	or	r19, r25
    2ee8:	4a 2b       	or	r20, r26
    2eea:	5b 2b       	or	r21, r27
    2eec:	f6 01       	movw	r30, r12
    2eee:	90 81       	ld	r25, Z
    2ef0:	63 ea       	ldi	r22, 0xA3	; 163
    2ef2:	7f ef       	ldi	r23, 0xFF	; 255
    2ef4:	c6 0e       	add	r12, r22
    2ef6:	d7 1e       	adc	r13, r23
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	a0 e0       	ldi	r26, 0x00	; 0
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	28 2b       	or	r18, r24
    2f00:	39 2b       	or	r19, r25
    2f02:	4a 2b       	or	r20, r26
    2f04:	5b 2b       	or	r21, r27
    2f06:	d6 01       	movw	r26, r12
    2f08:	94 96       	adiw	r26, 0x24	; 36
    2f0a:	2d 93       	st	X+, r18
    2f0c:	3d 93       	st	X+, r19
    2f0e:	4d 93       	st	X+, r20
    2f10:	5c 93       	st	X, r21
    2f12:	97 97       	sbiw	r26, 0x27	; 39
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2f14:	83 01       	movw	r16, r6
    2f16:	72 01       	movw	r14, r4
    2f18:	a2 e0       	ldi	r26, 0x02	; 2
    2f1a:	ee 0c       	add	r14, r14
    2f1c:	ff 1c       	adc	r15, r15
    2f1e:	00 1f       	adc	r16, r16
    2f20:	11 1f       	adc	r17, r17
    2f22:	aa 95       	dec	r26
    2f24:	d1 f7       	brne	.-12     	; 0x2f1a <f_open+0x53a>
    2f26:	34 c0       	rjmp	.+104    	; 0x2f90 <f_open+0x5b0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2f28:	89 2b       	or	r24, r25
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <f_open+0x54e>
    2f2c:	a6 c1       	rjmp	.+844    	; 0x327a <f_open+0x89a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2f2e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f30:	7c a1       	ldd	r23, Y+36	; 0x24
    2f32:	8d a1       	ldd	r24, Y+37	; 0x25
    2f34:	9e a1       	ldd	r25, Y+38	; 0x26
    2f36:	26 0f       	add	r18, r22
    2f38:	37 1f       	adc	r19, r23
    2f3a:	48 1f       	adc	r20, r24
    2f3c:	59 1f       	adc	r21, r25
    2f3e:	d6 01       	movw	r26, r12
    2f40:	94 96       	adiw	r26, 0x24	; 36
    2f42:	2d 93       	st	X+, r18
    2f44:	3d 93       	st	X+, r19
    2f46:	4d 93       	st	X+, r20
    2f48:	5c 93       	st	X, r21
    2f4a:	97 97       	sbiw	r26, 0x27	; 39
    2f4c:	c3 01       	movw	r24, r6
    2f4e:	b2 01       	movw	r22, r4
    2f50:	66 0f       	add	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	88 1f       	adc	r24, r24
    2f56:	99 1f       	adc	r25, r25
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    2f58:	b2 e0       	ldi	r27, 0x02	; 2
    2f5a:	3b 16       	cp	r3, r27
    2f5c:	19 f4       	brne	.+6      	; 0x2f64 <f_open+0x584>
    2f5e:	7b 01       	movw	r14, r22
    2f60:	8c 01       	movw	r16, r24
    2f62:	16 c0       	rjmp	.+44     	; 0x2f90 <f_open+0x5b0>
    2f64:	7b 01       	movw	r14, r22
    2f66:	8c 01       	movw	r16, r24
    2f68:	e4 0c       	add	r14, r4
    2f6a:	f5 1c       	adc	r15, r5
    2f6c:	06 1d       	adc	r16, r6
    2f6e:	17 1d       	adc	r17, r7
    2f70:	16 95       	lsr	r17
    2f72:	07 95       	ror	r16
    2f74:	f7 94       	ror	r15
    2f76:	e7 94       	ror	r14
    2f78:	21 e0       	ldi	r18, 0x01	; 1
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e0       	ldi	r20, 0x00	; 0
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	42 22       	and	r4, r18
    2f82:	53 22       	and	r5, r19
    2f84:	64 22       	and	r6, r20
    2f86:	75 22       	and	r7, r21
    2f88:	e4 0c       	add	r14, r4
    2f8a:	f5 1c       	adc	r15, r5
    2f8c:	06 1d       	adc	r16, r6
    2f8e:	17 1d       	adc	r17, r7
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    2f90:	d6 01       	movw	r26, r12
    2f92:	1a 96       	adiw	r26, 0x0a	; 10
    2f94:	2d 91       	ld	r18, X+
    2f96:	3c 91       	ld	r19, X
    2f98:	1b 97       	sbiw	r26, 0x0b	; 11
    2f9a:	21 50       	subi	r18, 0x01	; 1
    2f9c:	30 40       	sbci	r19, 0x00	; 0
    2f9e:	b9 01       	movw	r22, r18
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	6e 0d       	add	r22, r14
    2faa:	7f 1d       	adc	r23, r15
    2fac:	80 1f       	adc	r24, r16
    2fae:	91 1f       	adc	r25, r17
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <__udivmodsi4>
    2fb8:	f6 01       	movw	r30, r12
    2fba:	84 8d       	ldd	r24, Z+28	; 0x1c
    2fbc:	95 8d       	ldd	r25, Z+29	; 0x1d
    2fbe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2fc0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2fc2:	82 17       	cp	r24, r18
    2fc4:	93 07       	cpc	r25, r19
    2fc6:	a4 07       	cpc	r26, r20
    2fc8:	b5 07       	cpc	r27, r21
    2fca:	08 f4       	brcc	.+2      	; 0x2fce <f_open+0x5ee>
    2fcc:	56 c1       	rjmp	.+684    	; 0x327a <f_open+0x89a>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2fce:	8f ef       	ldi	r24, 0xFF	; 255
    2fd0:	9f ef       	ldi	r25, 0xFF	; 255
    2fd2:	af ef       	ldi	r26, 0xFF	; 255
    2fd4:	bf ef       	ldi	r27, 0xFF	; 255
    2fd6:	80 8b       	std	Z+16, r24	; 0x10
    2fd8:	91 8b       	std	Z+17, r25	; 0x11
    2fda:	a2 8b       	std	Z+18, r26	; 0x12
    2fdc:	b3 8b       	std	Z+19, r27	; 0x13
	fs->last_clust = 0;
    2fde:	d6 01       	movw	r26, r12
    2fe0:	1c 96       	adiw	r26, 0x0c	; 12
    2fe2:	1d 92       	st	X+, r1
    2fe4:	1d 92       	st	X+, r1
    2fe6:	1d 92       	st	X+, r1
    2fe8:	1c 92       	st	X, r1
    2fea:	1f 97       	sbiw	r26, 0x0f	; 15

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2fec:	b3 e0       	ldi	r27, 0x03	; 3
    2fee:	3b 16       	cp	r3, r27
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <f_open+0x614>
    2ff2:	24 c1       	rjmp	.+584    	; 0x323c <f_open+0x85c>
	 	fs->fsi_flag = 0;
    2ff4:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2ff6:	21 e6       	ldi	r18, 0x61	; 97
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	c2 0e       	add	r12, r18
    2ffc:	d3 1e       	adc	r13, r19
    2ffe:	d6 01       	movw	r26, r12
    3000:	3c 91       	ld	r19, X
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	f6 01       	movw	r30, r12
    3006:	82 91       	ld	r24, -Z
    3008:	6f 01       	movw	r12, r30
    300a:	40 ea       	ldi	r20, 0xA0	; 160
    300c:	5f ef       	ldi	r21, 0xFF	; 255
    300e:	c4 0e       	add	r12, r20
    3010:	d5 1e       	adc	r13, r21
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	28 2b       	or	r18, r24
    3016:	39 2b       	or	r19, r25
    3018:	40 e0       	ldi	r20, 0x00	; 0
    301a:	50 e0       	ldi	r21, 0x00	; 0
    301c:	68 a9       	ldd	r22, Y+48	; 0x30
    301e:	79 a9       	ldd	r23, Y+49	; 0x31
    3020:	8a a9       	ldd	r24, Y+50	; 0x32
    3022:	9b a9       	ldd	r25, Y+51	; 0x33
    3024:	26 0f       	add	r18, r22
    3026:	37 1f       	adc	r19, r23
    3028:	48 1f       	adc	r20, r24
    302a:	59 1f       	adc	r21, r25
    302c:	d6 01       	movw	r26, r12
    302e:	54 96       	adiw	r26, 0x14	; 20
    3030:	2d 93       	st	X+, r18
    3032:	3d 93       	st	X+, r19
    3034:	4d 93       	st	X+, r20
    3036:	5c 93       	st	X, r21
    3038:	57 97       	sbiw	r26, 0x17	; 23
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    303a:	b6 01       	movw	r22, r12
    303c:	60 5d       	subi	r22, 0xD0	; 208
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	11 96       	adiw	r26, 0x01	; 1
    3042:	8c 91       	ld	r24, X
    3044:	01 e0       	ldi	r16, 0x01	; 1
    3046:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <disk_read>
    304a:	88 23       	and	r24, r24
    304c:	09 f0       	breq	.+2      	; 0x3050 <f_open+0x670>
    304e:	f6 c0       	rjmp	.+492    	; 0x323c <f_open+0x85c>
    3050:	ef e2       	ldi	r30, 0x2F	; 47
    3052:	f2 e0       	ldi	r31, 0x02	; 2
    3054:	ce 0e       	add	r12, r30
    3056:	df 1e       	adc	r13, r31
    3058:	d6 01       	movw	r26, r12
    305a:	9c 91       	ld	r25, X
    305c:	80 e0       	ldi	r24, 0x00	; 0
    305e:	f6 01       	movw	r30, r12
    3060:	22 91       	ld	r18, -Z
    3062:	6f 01       	movw	r12, r30
    3064:	42 ed       	ldi	r20, 0xD2	; 210
    3066:	5d ef       	ldi	r21, 0xFD	; 253
    3068:	c4 0e       	add	r12, r20
    306a:	d5 1e       	adc	r13, r21
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	82 2b       	or	r24, r18
    3070:	93 2b       	or	r25, r19
    3072:	85 55       	subi	r24, 0x55	; 85
    3074:	9a 4a       	sbci	r25, 0xAA	; 170
    3076:	09 f0       	breq	.+2      	; 0x307a <f_open+0x69a>
    3078:	e1 c0       	rjmp	.+450    	; 0x323c <f_open+0x85c>
    307a:	d6 01       	movw	r26, r12
    307c:	d3 96       	adiw	r26, 0x33	; 51
    307e:	2c 91       	ld	r18, X
    3080:	d3 97       	sbiw	r26, 0x33	; 51
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	52 2f       	mov	r21, r18
    308a:	44 27       	eor	r20, r20
    308c:	33 27       	eor	r19, r19
    308e:	22 27       	eor	r18, r18
    3090:	d2 96       	adiw	r26, 0x32	; 50
    3092:	8c 91       	ld	r24, X
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	a0 e0       	ldi	r26, 0x00	; 0
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	dc 01       	movw	r26, r24
    309c:	99 27       	eor	r25, r25
    309e:	88 27       	eor	r24, r24
    30a0:	28 2b       	or	r18, r24
    30a2:	39 2b       	or	r19, r25
    30a4:	4a 2b       	or	r20, r26
    30a6:	5b 2b       	or	r21, r27
    30a8:	f6 01       	movw	r30, r12
    30aa:	80 a9       	ldd	r24, Z+48	; 0x30
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	a0 e0       	ldi	r26, 0x00	; 0
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	28 2b       	or	r18, r24
    30b4:	39 2b       	or	r19, r25
    30b6:	4a 2b       	or	r20, r26
    30b8:	5b 2b       	or	r21, r27
    30ba:	91 a9       	ldd	r25, Z+49	; 0x31
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	a0 e0       	ldi	r26, 0x00	; 0
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	28 2b       	or	r18, r24
    30c4:	39 2b       	or	r19, r25
    30c6:	4a 2b       	or	r20, r26
    30c8:	5b 2b       	or	r21, r27
    30ca:	22 55       	subi	r18, 0x52	; 82
    30cc:	32 45       	sbci	r19, 0x52	; 82
    30ce:	41 46       	sbci	r20, 0x61	; 97
    30d0:	51 44       	sbci	r21, 0x41	; 65
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <f_open+0x6f6>
    30d4:	b3 c0       	rjmp	.+358    	; 0x323c <f_open+0x85c>
    30d6:	27 e1       	ldi	r18, 0x17	; 23
    30d8:	32 e0       	ldi	r19, 0x02	; 2
    30da:	c2 0e       	add	r12, r18
    30dc:	d3 1e       	adc	r13, r19
    30de:	d6 01       	movw	r26, r12
    30e0:	2c 91       	ld	r18, X
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e0       	ldi	r20, 0x00	; 0
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	52 2f       	mov	r21, r18
    30ea:	44 27       	eor	r20, r20
    30ec:	33 27       	eor	r19, r19
    30ee:	22 27       	eor	r18, r18
    30f0:	f6 01       	movw	r30, r12
    30f2:	82 91       	ld	r24, -Z
    30f4:	6f 01       	movw	r12, r30
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a0 e0       	ldi	r26, 0x00	; 0
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	dc 01       	movw	r26, r24
    30fe:	99 27       	eor	r25, r25
    3100:	88 27       	eor	r24, r24
    3102:	28 2b       	or	r18, r24
    3104:	39 2b       	or	r19, r25
    3106:	4a 2b       	or	r20, r26
    3108:	5b 2b       	or	r21, r27
    310a:	6e ef       	ldi	r22, 0xFE	; 254
    310c:	7f ef       	ldi	r23, 0xFF	; 255
    310e:	c6 0e       	add	r12, r22
    3110:	d7 1e       	adc	r13, r23
    3112:	d6 01       	movw	r26, r12
    3114:	8d 91       	ld	r24, X+
    3116:	6d 01       	movw	r12, r26
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a0 e0       	ldi	r26, 0x00	; 0
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	28 2b       	or	r18, r24
    3120:	39 2b       	or	r19, r25
    3122:	4a 2b       	or	r20, r26
    3124:	5b 2b       	or	r21, r27
    3126:	f6 01       	movw	r30, r12
    3128:	90 81       	ld	r25, Z
    312a:	6b ee       	ldi	r22, 0xEB	; 235
    312c:	7d ef       	ldi	r23, 0xFD	; 253
    312e:	c6 0e       	add	r12, r22
    3130:	d7 1e       	adc	r13, r23
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	a0 e0       	ldi	r26, 0x00	; 0
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	28 2b       	or	r18, r24
    313a:	39 2b       	or	r19, r25
    313c:	4a 2b       	or	r20, r26
    313e:	5b 2b       	or	r21, r27
    3140:	22 57       	subi	r18, 0x72	; 114
    3142:	32 47       	sbci	r19, 0x72	; 114
    3144:	41 44       	sbci	r20, 0x41	; 65
    3146:	51 46       	sbci	r21, 0x61	; 97
    3148:	09 f0       	breq	.+2      	; 0x314c <f_open+0x76c>
    314a:	78 c0       	rjmp	.+240    	; 0x323c <f_open+0x85c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    314c:	8f e1       	ldi	r24, 0x1F	; 31
    314e:	92 e0       	ldi	r25, 0x02	; 2
    3150:	c8 0e       	add	r12, r24
    3152:	d9 1e       	adc	r13, r25
    3154:	d6 01       	movw	r26, r12
    3156:	2c 91       	ld	r18, X
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	50 e0       	ldi	r21, 0x00	; 0
    315e:	52 2f       	mov	r21, r18
    3160:	44 27       	eor	r20, r20
    3162:	33 27       	eor	r19, r19
    3164:	22 27       	eor	r18, r18
    3166:	f6 01       	movw	r30, r12
    3168:	82 91       	ld	r24, -Z
    316a:	6f 01       	movw	r12, r30
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e0       	ldi	r26, 0x00	; 0
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	dc 01       	movw	r26, r24
    3174:	99 27       	eor	r25, r25
    3176:	88 27       	eor	r24, r24
    3178:	28 2b       	or	r18, r24
    317a:	39 2b       	or	r19, r25
    317c:	4a 2b       	or	r20, r26
    317e:	5b 2b       	or	r21, r27
    3180:	6e ef       	ldi	r22, 0xFE	; 254
    3182:	7f ef       	ldi	r23, 0xFF	; 255
    3184:	c6 0e       	add	r12, r22
    3186:	d7 1e       	adc	r13, r23
    3188:	d6 01       	movw	r26, r12
    318a:	8d 91       	ld	r24, X+
    318c:	6d 01       	movw	r12, r26
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	a0 e0       	ldi	r26, 0x00	; 0
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	28 2b       	or	r18, r24
    3196:	39 2b       	or	r19, r25
    3198:	4a 2b       	or	r20, r26
    319a:	5b 2b       	or	r21, r27
    319c:	f6 01       	movw	r30, r12
    319e:	90 81       	ld	r25, Z
    31a0:	63 ee       	ldi	r22, 0xE3	; 227
    31a2:	7d ef       	ldi	r23, 0xFD	; 253
    31a4:	c6 0e       	add	r12, r22
    31a6:	d7 1e       	adc	r13, r23
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	a0 e0       	ldi	r26, 0x00	; 0
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	28 2b       	or	r18, r24
    31b0:	39 2b       	or	r19, r25
    31b2:	4a 2b       	or	r20, r26
    31b4:	5b 2b       	or	r21, r27
    31b6:	d6 01       	movw	r26, r12
    31b8:	1c 96       	adiw	r26, 0x0c	; 12
    31ba:	2d 93       	st	X+, r18
    31bc:	3d 93       	st	X+, r19
    31be:	4d 93       	st	X+, r20
    31c0:	5c 93       	st	X, r21
    31c2:	1f 97       	sbiw	r26, 0x0f	; 15
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    31c4:	eb e1       	ldi	r30, 0x1B	; 27
    31c6:	f2 e0       	ldi	r31, 0x02	; 2
    31c8:	ce 0e       	add	r12, r30
    31ca:	df 1e       	adc	r13, r31
    31cc:	d6 01       	movw	r26, r12
    31ce:	2c 91       	ld	r18, X
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	40 e0       	ldi	r20, 0x00	; 0
    31d4:	50 e0       	ldi	r21, 0x00	; 0
    31d6:	52 2f       	mov	r21, r18
    31d8:	44 27       	eor	r20, r20
    31da:	33 27       	eor	r19, r19
    31dc:	22 27       	eor	r18, r18
    31de:	f6 01       	movw	r30, r12
    31e0:	82 91       	ld	r24, -Z
    31e2:	6f 01       	movw	r12, r30
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	dc 01       	movw	r26, r24
    31ec:	99 27       	eor	r25, r25
    31ee:	88 27       	eor	r24, r24
    31f0:	28 2b       	or	r18, r24
    31f2:	39 2b       	or	r19, r25
    31f4:	4a 2b       	or	r20, r26
    31f6:	5b 2b       	or	r21, r27
    31f8:	6e ef       	ldi	r22, 0xFE	; 254
    31fa:	7f ef       	ldi	r23, 0xFF	; 255
    31fc:	c6 0e       	add	r12, r22
    31fe:	d7 1e       	adc	r13, r23
    3200:	d6 01       	movw	r26, r12
    3202:	8d 91       	ld	r24, X+
    3204:	6d 01       	movw	r12, r26
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	28 2b       	or	r18, r24
    320e:	39 2b       	or	r19, r25
    3210:	4a 2b       	or	r20, r26
    3212:	5b 2b       	or	r21, r27
    3214:	f6 01       	movw	r30, r12
    3216:	90 81       	ld	r25, Z
    3218:	67 ee       	ldi	r22, 0xE7	; 231
    321a:	7d ef       	ldi	r23, 0xFD	; 253
    321c:	c6 0e       	add	r12, r22
    321e:	d7 1e       	adc	r13, r23
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	a0 e0       	ldi	r26, 0x00	; 0
    3224:	b0 e0       	ldi	r27, 0x00	; 0
    3226:	28 2b       	or	r18, r24
    3228:	39 2b       	or	r19, r25
    322a:	4a 2b       	or	r20, r26
    322c:	5b 2b       	or	r21, r27
    322e:	d6 01       	movw	r26, r12
    3230:	50 96       	adiw	r26, 0x10	; 16
    3232:	2d 93       	st	X+, r18
    3234:	3d 93       	st	X+, r19
    3236:	4d 93       	st	X+, r20
    3238:	5c 93       	st	X, r21
    323a:	53 97       	sbiw	r26, 0x13	; 19
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    323c:	f6 01       	movw	r30, r12
    323e:	30 82       	st	Z, r3
	fs->id = ++Fsid;		/* File system mount ID */
    3240:	80 91 26 06 	lds	r24, 0x0626
    3244:	90 91 27 06 	lds	r25, 0x0627
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	90 93 27 06 	sts	0x0627, r25
    324e:	80 93 26 06 	sts	0x0626, r24
    3252:	97 83       	std	Z+7, r25	; 0x07
    3254:	86 83       	std	Z+6, r24	; 0x06
	fs->winsect = 0;		/* Invalidate sector cache */
    3256:	d6 01       	movw	r26, r12
    3258:	9c 96       	adiw	r26, 0x2c	; 44
    325a:	1d 92       	st	X+, r1
    325c:	1d 92       	st	X+, r1
    325e:	1d 92       	st	X+, r1
    3260:	1c 92       	st	X, r1
    3262:	9f 97       	sbiw	r26, 0x2f	; 47
	fs->wflag = 0;
    3264:	14 96       	adiw	r26, 0x04	; 4
    3266:	1c 92       	st	X, r1
    3268:	03 c0       	rjmp	.+6      	; 0x3270 <f_open+0x890>
    326a:	5a e0       	ldi	r21, 0x0A	; 10
    326c:	f5 2e       	mov	r15, r21
    326e:	07 c0       	rjmp	.+14     	; 0x327e <f_open+0x89e>
    3270:	ff 24       	eor	r15, r15
    3272:	05 c0       	rjmp	.+10     	; 0x327e <f_open+0x89e>
    3274:	ff 24       	eor	r15, r15
    3276:	f3 94       	inc	r15
    3278:	02 c0       	rjmp	.+4      	; 0x327e <f_open+0x89e>
    327a:	4d e0       	ldi	r20, 0x0D	; 13
    327c:	f4 2e       	mov	r15, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    327e:	ce 01       	movw	r24, r28
    3280:	01 96       	adiw	r24, 0x01	; 1
    3282:	9a a3       	std	Y+34, r25	; 0x22
    3284:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    3286:	ff 20       	and	r15, r15
    3288:	09 f0       	breq	.+2      	; 0x328c <f_open+0x8ac>
    328a:	49 c1       	rjmp	.+658    	; 0x351e <f_open+0xb3e>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    328c:	ee a9       	ldd	r30, Y+54	; 0x36
    328e:	ff a9       	ldd	r31, Y+55	; 0x37
    3290:	80 81       	ld	r24, Z
    3292:	8f 32       	cpi	r24, 0x2F	; 47
    3294:	11 f0       	breq	.+4      	; 0x329a <f_open+0x8ba>
    3296:	8c 35       	cpi	r24, 0x5C	; 92
    3298:	31 f4       	brne	.+12     	; 0x32a6 <f_open+0x8c6>
		path++;
    329a:	2e a9       	ldd	r18, Y+54	; 0x36
    329c:	3f a9       	ldd	r19, Y+55	; 0x37
    329e:	2f 5f       	subi	r18, 0xFF	; 255
    32a0:	3f 4f       	sbci	r19, 0xFF	; 255
    32a2:	3f ab       	std	Y+55, r19	; 0x37
    32a4:	2e ab       	std	Y+54, r18	; 0x36
	dj->sclust = 0;						/* Start from the root dir */
    32a6:	1b 8a       	std	Y+19, r1	; 0x13
    32a8:	1c 8a       	std	Y+20, r1	; 0x14
    32aa:	1d 8a       	std	Y+21, r1	; 0x15
    32ac:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    32ae:	ae a9       	ldd	r26, Y+54	; 0x36
    32b0:	bf a9       	ldd	r27, Y+55	; 0x37
    32b2:	8c 91       	ld	r24, X
    32b4:	80 32       	cpi	r24, 0x20	; 32
    32b6:	80 f4       	brcc	.+32     	; 0x32d8 <f_open+0x8f8>
		res = dir_sdi(dj, 0);
    32b8:	ce 01       	movw	r24, r28
    32ba:	0d 96       	adiw	r24, 0x0d	; 13
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	70 e0       	ldi	r23, 0x00	; 0
    32c0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <dir_sdi>
    32c4:	f8 2e       	mov	r15, r24
		dj->dir = 0;
    32c6:	18 a2       	std	Y+32, r1	; 0x20
    32c8:	1f 8e       	std	Y+31, r1	; 0x1f
    32ca:	29 c1       	rjmp	.+594    	; 0x351e <f_open+0xb3e>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    32cc:	ee a9       	ldd	r30, Y+54	; 0x36
    32ce:	ff a9       	ldd	r31, Y+55	; 0x37
    32d0:	31 96       	adiw	r30, 0x01	; 1
    32d2:	ff ab       	std	Y+55, r31	; 0x37
    32d4:	ee ab       	std	Y+54, r30	; 0x36
    32d6:	07 c0       	rjmp	.+14     	; 0x32e6 <f_open+0x906>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    32d8:	3d e0       	ldi	r19, 0x0D	; 13
    32da:	63 2e       	mov	r6, r19
    32dc:	71 2c       	mov	r7, r1
    32de:	6c 0e       	add	r6, r28
    32e0:	7d 1e       	adc	r7, r29
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    32e2:	25 e0       	ldi	r18, 0x05	; 5
    32e4:	52 2e       	mov	r5, r18
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    32e6:	ae a9       	ldd	r26, Y+54	; 0x36
    32e8:	bf a9       	ldd	r27, Y+55	; 0x37
    32ea:	8c 91       	ld	r24, X
    32ec:	8f 32       	cpi	r24, 0x2F	; 47
    32ee:	71 f3       	breq	.-36     	; 0x32cc <f_open+0x8ec>
    32f0:	8c 35       	cpi	r24, 0x5C	; 92
    32f2:	61 f3       	breq	.-40     	; 0x32cc <f_open+0x8ec>
	sfn = dj->fn;
    32f4:	09 a1       	ldd	r16, Y+33	; 0x21
    32f6:	1a a1       	ldd	r17, Y+34	; 0x22
	mem_set(sfn, ' ', 11);
    32f8:	c8 01       	movw	r24, r16
    32fa:	60 e2       	ldi	r22, 0x20	; 32
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	4b e0       	ldi	r20, 0x0B	; 11
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	0e 94 1e 09 	call	0x123c	; 0x123c <mem_set>
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	ee 24       	eor	r14, r14
    330c:	ff 24       	eor	r15, r15
    330e:	98 e0       	ldi	r25, 0x08	; 8
    3310:	c9 2e       	mov	r12, r25
    3312:	d1 2c       	mov	r13, r1
    3314:	a0 e0       	ldi	r26, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3316:	ee a9       	ldd	r30, Y+54	; 0x36
    3318:	ff a9       	ldd	r31, Y+55	; 0x37
    331a:	ee 0d       	add	r30, r14
    331c:	ff 1d       	adc	r31, r15
    331e:	20 81       	ld	r18, Z
    3320:	08 94       	sec
    3322:	e1 1c       	adc	r14, r1
    3324:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3326:	21 32       	cpi	r18, 0x21	; 33
    3328:	08 f4       	brcc	.+2      	; 0x332c <f_open+0x94c>
    332a:	67 c0       	rjmp	.+206    	; 0x33fa <f_open+0xa1a>
    332c:	2f 32       	cpi	r18, 0x2F	; 47
    332e:	09 f4       	brne	.+2      	; 0x3332 <f_open+0x952>
    3330:	03 c3       	rjmp	.+1542   	; 0x3938 <f_open+0xf58>
    3332:	2c 35       	cpi	r18, 0x5C	; 92
    3334:	09 f4       	brne	.+2      	; 0x3338 <f_open+0x958>
    3336:	00 c3       	rjmp	.+1536   	; 0x3938 <f_open+0xf58>
		if (c == '.' || i >= ni) {
    3338:	2e 32       	cpi	r18, 0x2E	; 46
    333a:	19 f0       	breq	.+6      	; 0x3342 <f_open+0x962>
    333c:	4c 15       	cp	r20, r12
    333e:	5d 05       	cpc	r21, r13
    3340:	80 f0       	brcs	.+32     	; 0x3362 <f_open+0x982>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    3342:	b8 e0       	ldi	r27, 0x08	; 8
    3344:	cb 16       	cp	r12, r27
    3346:	d1 04       	cpc	r13, r1
    3348:	09 f0       	breq	.+2      	; 0x334c <f_open+0x96c>
    334a:	e2 c0       	rjmp	.+452    	; 0x3510 <f_open+0xb30>
    334c:	2e 32       	cpi	r18, 0x2E	; 46
    334e:	09 f0       	breq	.+2      	; 0x3352 <f_open+0x972>
    3350:	df c0       	rjmp	.+446    	; 0x3510 <f_open+0xb30>
			i = 8; ni = 11;
			b <<= 2; continue;
    3352:	aa 0f       	add	r26, r26
    3354:	aa 0f       	add	r26, r26
    3356:	48 e0       	ldi	r20, 0x08	; 8
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	8b e0       	ldi	r24, 0x0B	; 11
    335c:	c8 2e       	mov	r12, r24
    335e:	d1 2c       	mov	r13, r1
    3360:	da cf       	rjmp	.-76     	; 0x3316 <f_open+0x936>
		}
		if (c >= 0x80) {				/* Extended char? */
    3362:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    3364:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    3366:	82 2f       	mov	r24, r18
    3368:	81 58       	subi	r24, 0x81	; 129
    336a:	8f 31       	cpi	r24, 0x1F	; 31
    336c:	18 f0       	brcs	.+6      	; 0x3374 <f_open+0x994>
    336e:	8f 55       	subi	r24, 0x5F	; 95
    3370:	8d 31       	cpi	r24, 0x1D	; 29
    3372:	10 f5       	brcc	.+68     	; 0x33b8 <f_open+0x9d8>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3374:	ee a9       	ldd	r30, Y+54	; 0x36
    3376:	ff a9       	ldd	r31, Y+55	; 0x37
    3378:	ee 0d       	add	r30, r14
    337a:	ff 1d       	adc	r31, r15
    337c:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    337e:	83 2f       	mov	r24, r19
    3380:	80 54       	subi	r24, 0x40	; 64
    3382:	8f 33       	cpi	r24, 0x3F	; 63
    3384:	20 f0       	brcs	.+8      	; 0x338e <f_open+0x9ae>
    3386:	80 54       	subi	r24, 0x40	; 64
    3388:	8d 37       	cpi	r24, 0x7D	; 125
    338a:	08 f0       	brcs	.+2      	; 0x338e <f_open+0x9ae>
    338c:	c1 c0       	rjmp	.+386    	; 0x3510 <f_open+0xb30>
    338e:	c6 01       	movw	r24, r12
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	48 17       	cp	r20, r24
    3394:	59 07       	cpc	r21, r25
    3396:	08 f0       	brcs	.+2      	; 0x339a <f_open+0x9ba>
    3398:	bb c0       	rjmp	.+374    	; 0x3510 <f_open+0xb30>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    339a:	08 94       	sec
    339c:	e1 1c       	adc	r14, r1
    339e:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    33a0:	f8 01       	movw	r30, r16
    33a2:	e4 0f       	add	r30, r20
    33a4:	f5 1f       	adc	r31, r21
    33a6:	20 83       	st	Z, r18
    33a8:	ca 01       	movw	r24, r20
    33aa:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    33ac:	f8 01       	movw	r30, r16
    33ae:	e8 0f       	add	r30, r24
    33b0:	f9 1f       	adc	r31, r25
    33b2:	30 83       	st	Z, r19
    33b4:	ac 01       	movw	r20, r24
    33b6:	1e c0       	rjmp	.+60     	; 0x33f4 <f_open+0xa14>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    33b8:	62 2f       	mov	r22, r18
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	ea eb       	ldi	r30, 0xBA	; 186
    33be:	f1 e0       	ldi	r31, 0x01	; 1
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <f_open+0x9e4>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    33c2:	31 96       	adiw	r30, 0x01	; 1
    33c4:	80 81       	ld	r24, Z
    33c6:	88 23       	and	r24, r24
    33c8:	29 f0       	breq	.+10     	; 0x33d4 <f_open+0x9f4>
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	86 17       	cp	r24, r22
    33ce:	97 07       	cpc	r25, r23
    33d0:	c1 f7       	brne	.-16     	; 0x33c2 <f_open+0x9e2>
    33d2:	9e c0       	rjmp	.+316    	; 0x3510 <f_open+0xb30>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    33d4:	82 2f       	mov	r24, r18
    33d6:	81 54       	subi	r24, 0x41	; 65
    33d8:	8a 31       	cpi	r24, 0x1A	; 26
    33da:	10 f4       	brcc	.+4      	; 0x33e0 <f_open+0xa00>
				b |= 2;
    33dc:	a2 60       	ori	r26, 0x02	; 2
    33de:	06 c0       	rjmp	.+12     	; 0x33ec <f_open+0xa0c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    33e0:	82 2f       	mov	r24, r18
    33e2:	81 56       	subi	r24, 0x61	; 97
    33e4:	8a 31       	cpi	r24, 0x1A	; 26
    33e6:	10 f4       	brcc	.+4      	; 0x33ec <f_open+0xa0c>
					b |= 1; c -= 0x20;
    33e8:	a1 60       	ori	r26, 0x01	; 1
    33ea:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    33ec:	f8 01       	movw	r30, r16
    33ee:	e4 0f       	add	r30, r20
    33f0:	f5 1f       	adc	r31, r21
    33f2:	20 83       	st	Z, r18
    33f4:	4f 5f       	subi	r20, 0xFF	; 255
    33f6:	5f 4f       	sbci	r21, 0xFF	; 255
    33f8:	8e cf       	rjmp	.-228    	; 0x3316 <f_open+0x936>
    33fa:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    33fc:	45 2b       	or	r20, r21
    33fe:	09 f4       	brne	.+2      	; 0x3402 <f_open+0xa22>
    3400:	87 c0       	rjmp	.+270    	; 0x3510 <f_open+0xb30>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    3402:	f8 01       	movw	r30, r16
    3404:	80 81       	ld	r24, Z
    3406:	85 3e       	cpi	r24, 0xE5	; 229
    3408:	09 f4       	brne	.+2      	; 0x340c <f_open+0xa2c>
    340a:	50 82       	st	Z, r5

	if (ni == 8) b <<= 2;
    340c:	f8 e0       	ldi	r31, 0x08	; 8
    340e:	cf 16       	cp	r12, r31
    3410:	d1 04       	cpc	r13, r1
    3412:	11 f4       	brne	.+4      	; 0x3418 <f_open+0xa38>
    3414:	aa 0f       	add	r26, r26
    3416:	aa 0f       	add	r26, r26
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    3418:	2a 2f       	mov	r18, r26
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	c9 01       	movw	r24, r18
    341e:	83 70       	andi	r24, 0x03	; 3
    3420:	90 70       	andi	r25, 0x00	; 0
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	09 f4       	brne	.+2      	; 0x3428 <f_open+0xa48>
    3426:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    3428:	2c 70       	andi	r18, 0x0C	; 12
    342a:	30 70       	andi	r19, 0x00	; 0
    342c:	24 30       	cpi	r18, 0x04	; 4
    342e:	31 05       	cpc	r19, r1
    3430:	09 f4       	brne	.+2      	; 0x3434 <f_open+0xa54>
    3432:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    3434:	d8 01       	movw	r26, r16
    3436:	1b 96       	adiw	r26, 0x0b	; 11
    3438:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    343a:	c3 01       	movw	r24, r6
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <dir_sdi>
    3444:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    3446:	88 23       	and	r24, r24
    3448:	71 f5       	brne	.+92     	; 0x34a6 <f_open+0xac6>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    344a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    344c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    344e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3450:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3452:	8d 85       	ldd	r24, Y+13	; 0x0d
    3454:	9e 85       	ldd	r25, Y+14	; 0x0e
    3456:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    345a:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    345c:	88 23       	and	r24, r24
    345e:	19 f5       	brne	.+70     	; 0x34a6 <f_open+0xac6>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3460:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3462:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3464:	80 81       	ld	r24, Z
    3466:	88 23       	and	r24, r24
    3468:	11 f4       	brne	.+4      	; 0x346e <f_open+0xa8e>
    346a:	44 e0       	ldi	r20, 0x04	; 4
    346c:	1c c0       	rjmp	.+56     	; 0x34a6 <f_open+0xac6>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    346e:	83 85       	ldd	r24, Z+11	; 0x0b
    3470:	83 fd       	sbrc	r24, 3
    3472:	13 c0       	rjmp	.+38     	; 0x349a <f_open+0xaba>
    3474:	89 a1       	ldd	r24, Y+33	; 0x21
    3476:	9a a1       	ldd	r25, Y+34	; 0x22
    3478:	9c 01       	movw	r18, r24
    347a:	d9 01       	movw	r26, r18
    347c:	2b e0       	ldi	r18, 0x0B	; 11
    347e:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    3480:	21 50       	subi	r18, 0x01	; 1
    3482:	30 40       	sbci	r19, 0x00	; 0
    3484:	5f ef       	ldi	r21, 0xFF	; 255
    3486:	2f 3f       	cpi	r18, 0xFF	; 255
    3488:	35 07       	cpc	r19, r21
    348a:	69 f0       	breq	.+26     	; 0x34a6 <f_open+0xac6>
    348c:	90 81       	ld	r25, Z
    348e:	8c 91       	ld	r24, X
    3490:	98 17       	cp	r25, r24
    3492:	19 f4       	brne	.+6      	; 0x349a <f_open+0xaba>
    3494:	31 96       	adiw	r30, 0x01	; 1
    3496:	11 96       	adiw	r26, 0x01	; 1
    3498:	f3 cf       	rjmp	.-26     	; 0x3480 <f_open+0xaa0>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    349a:	c3 01       	movw	r24, r6
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	0e 94 42 12 	call	0x2484	; 0x2484 <dir_next>
    34a4:	cf cf       	rjmp	.-98     	; 0x3444 <f_open+0xa64>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    34a6:	e9 a1       	ldd	r30, Y+33	; 0x21
    34a8:	fa a1       	ldd	r31, Y+34	; 0x22
    34aa:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    34ac:	44 23       	and	r20, r20
    34ae:	39 f0       	breq	.+14     	; 0x34be <f_open+0xade>
    34b0:	f4 2e       	mov	r15, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    34b2:	64 e0       	ldi	r22, 0x04	; 4
    34b4:	46 17       	cp	r20, r22
    34b6:	79 f5       	brne	.+94     	; 0x3516 <f_open+0xb36>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    34b8:	82 ff       	sbrs	r24, 2
    34ba:	2f c0       	rjmp	.+94     	; 0x351a <f_open+0xb3a>
    34bc:	30 c0       	rjmp	.+96     	; 0x351e <f_open+0xb3e>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    34be:	82 fd       	sbrc	r24, 2
    34c0:	2a c0       	rjmp	.+84     	; 0x3516 <f_open+0xb36>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    34c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34c4:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    34c6:	83 85       	ldd	r24, Z+11	; 0x0b
    34c8:	84 ff       	sbrs	r24, 4
    34ca:	27 c0       	rjmp	.+78     	; 0x351a <f_open+0xb3a>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    34cc:	8e a9       	ldd	r24, Y+54	; 0x36
    34ce:	9f a9       	ldd	r25, Y+55	; 0x37
    34d0:	8e 0d       	add	r24, r14
    34d2:	9f 1d       	adc	r25, r15
    34d4:	9f ab       	std	Y+55, r25	; 0x37
    34d6:	8e ab       	std	Y+54, r24	; 0x36
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    34d8:	95 88       	ldd	r9, Z+21	; 0x15
    34da:	88 24       	eor	r8, r8
    34dc:	24 89       	ldd	r18, Z+20	; 0x14
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	28 29       	or	r18, r8
    34e2:	39 29       	or	r19, r9
    34e4:	40 e0       	ldi	r20, 0x00	; 0
    34e6:	50 e0       	ldi	r21, 0x00	; 0
    34e8:	a9 01       	movw	r20, r18
    34ea:	33 27       	eor	r19, r19
    34ec:	22 27       	eor	r18, r18
    34ee:	b3 8c       	ldd	r11, Z+27	; 0x1b
    34f0:	aa 24       	eor	r10, r10
    34f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	8a 29       	or	r24, r10
    34f8:	9b 29       	or	r25, r11
    34fa:	a0 e0       	ldi	r26, 0x00	; 0
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	28 2b       	or	r18, r24
    3500:	39 2b       	or	r19, r25
    3502:	4a 2b       	or	r20, r26
    3504:	5b 2b       	or	r21, r27
    3506:	2b 8b       	std	Y+19, r18	; 0x13
    3508:	3c 8b       	std	Y+20, r19	; 0x14
    350a:	4d 8b       	std	Y+21, r20	; 0x15
    350c:	5e 8b       	std	Y+22, r21	; 0x16
    350e:	eb ce       	rjmp	.-554    	; 0x32e6 <f_open+0x906>
    3510:	b6 e0       	ldi	r27, 0x06	; 6
    3512:	fb 2e       	mov	r15, r27
    3514:	04 c0       	rjmp	.+8      	; 0x351e <f_open+0xb3e>
    3516:	f4 2e       	mov	r15, r20
    3518:	02 c0       	rjmp	.+4      	; 0x351e <f_open+0xb3e>
    351a:	a5 e0       	ldi	r26, 0x05	; 5
    351c:	fa 2e       	mov	r15, r26
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    351e:	4f 8c       	ldd	r4, Y+31	; 0x1f
    3520:	58 a0       	ldd	r5, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    3522:	ff 20       	and	r15, r15
    3524:	29 f4       	brne	.+10     	; 0x3530 <f_open+0xb50>
		if (!dir)	/* Current dir itself */
    3526:	41 14       	cp	r4, r1
    3528:	51 04       	cpc	r5, r1
    352a:	11 f4       	brne	.+4      	; 0x3530 <f_open+0xb50>
    352c:	f6 e0       	ldi	r31, 0x06	; 6
    352e:	ff 2e       	mov	r15, r31
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3530:	9b a5       	ldd	r25, Y+43	; 0x2b
    3532:	29 2f       	mov	r18, r25
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	c9 01       	movw	r24, r18
    3538:	8c 71       	andi	r24, 0x1C	; 28
    353a:	90 70       	andi	r25, 0x00	; 0
    353c:	89 2b       	or	r24, r25
    353e:	09 f4       	brne	.+2      	; 0x3542 <f_open+0xb62>
    3540:	19 c1       	rjmp	.+562    	; 0x3774 <f_open+0xd94>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    3542:	ff 20       	and	r15, r15
    3544:	09 f4       	brne	.+2      	; 0x3548 <f_open+0xb68>
    3546:	48 c0       	rjmp	.+144    	; 0x35d8 <f_open+0xbf8>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    3548:	a4 e0       	ldi	r26, 0x04	; 4
    354a:	fa 16       	cp	r15, r26
    354c:	e1 f5       	brne	.+120    	; 0x35c6 <f_open+0xbe6>
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    354e:	8e 01       	movw	r16, r28
    3550:	03 5f       	subi	r16, 0xF3	; 243
    3552:	1f 4f       	sbci	r17, 0xFF	; 255
    3554:	c8 01       	movw	r24, r16
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <dir_sdi>
    355e:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    3560:	88 23       	and	r24, r24
    3562:	89 f5       	brne	.+98     	; 0x35c6 <f_open+0xbe6>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    3564:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3566:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3568:	6d 8d       	ldd	r22, Y+29	; 0x1d
    356a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    356c:	8d 85       	ldd	r24, Y+13	; 0x0d
    356e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3570:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    3574:	f8 2e       	mov	r15, r24
			if (res != FR_OK) break;
    3576:	88 23       	and	r24, r24
    3578:	31 f5       	brne	.+76     	; 0x35c6 <f_open+0xbe6>
			c = *dj->dir;
    357a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    357c:	f8 a1       	ldd	r31, Y+32	; 0x20
    357e:	e0 81       	ld	r30, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    3580:	e5 3e       	cpi	r30, 0xE5	; 229
    3582:	09 f4       	brne	.+2      	; 0x3586 <f_open+0xba6>
    3584:	b4 c1       	rjmp	.+872    	; 0x38ee <f_open+0xf0e>
    3586:	ee 23       	and	r30, r30
    3588:	09 f4       	brne	.+2      	; 0x358c <f_open+0xbac>
    358a:	b1 c1       	rjmp	.+866    	; 0x38ee <f_open+0xf0e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    358c:	c8 01       	movw	r24, r16
    358e:	61 e0       	ldi	r22, 0x01	; 1
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	0e 94 42 12 	call	0x2484	; 0x2484 <dir_next>
    3596:	f8 2e       	mov	r15, r24
		} while (res == FR_OK);
    3598:	88 23       	and	r24, r24
    359a:	21 f3       	breq	.-56     	; 0x3564 <f_open+0xb84>
    359c:	14 c0       	rjmp	.+40     	; 0x35c6 <f_open+0xbe6>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    359e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    35a0:	18 a1       	ldd	r17, Y+32	; 0x20
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    35a2:	c8 01       	movw	r24, r16
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	40 e2       	ldi	r20, 0x20	; 32
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	0e 94 1e 09 	call	0x123c	; 0x123c <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    35b0:	69 a1       	ldd	r22, Y+33	; 0x21
    35b2:	7a a1       	ldd	r23, Y+34	; 0x22
    35b4:	c8 01       	movw	r24, r16
    35b6:	4b e0       	ldi	r20, 0x0B	; 11
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	0e 94 06 09 	call	0x120c	; 0x120c <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    35be:	ed 85       	ldd	r30, Y+13	; 0x0d
    35c0:	fe 85       	ldd	r31, Y+14	; 0x0e
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	84 83       	std	Z+4, r24	; 0x04
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    35c6:	4f 8c       	ldd	r4, Y+31	; 0x1f
    35c8:	58 a0       	ldd	r5, Y+32	; 0x20
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    35ca:	ff 20       	and	r15, r15
    35cc:	09 f0       	breq	.+2      	; 0x35d0 <f_open+0xbf0>
    35ce:	6f c1       	rjmp	.+734    	; 0x38ae <f_open+0xece>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    35d0:	bb a5       	ldd	r27, Y+43	; 0x2b
    35d2:	b8 60       	ori	r27, 0x08	; 8
    35d4:	bb a7       	std	Y+43, r27	; 0x2b
    35d6:	07 c0       	rjmp	.+14     	; 0x35e6 <f_open+0xc06>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    35d8:	f2 01       	movw	r30, r4
    35da:	83 85       	ldd	r24, Z+11	; 0x0b
    35dc:	81 71       	andi	r24, 0x11	; 17
    35de:	09 f0       	breq	.+2      	; 0x35e2 <f_open+0xc02>
    35e0:	83 c1       	rjmp	.+774    	; 0x38e8 <f_open+0xf08>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    35e2:	22 fd       	sbrc	r18, 2
    35e4:	7e c1       	rjmp	.+764    	; 0x38e2 <f_open+0xf02>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    35e6:	fb a5       	ldd	r31, Y+43	; 0x2b
    35e8:	f3 ff       	sbrs	r31, 3
    35ea:	d3 c0       	rjmp	.+422    	; 0x3792 <f_open+0xdb2>
			dw = get_fattime();					/* Created time */
    35ec:	0e 94 8c 08 	call	0x1118	; 0x1118 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    35f0:	d2 01       	movw	r26, r4
    35f2:	1e 96       	adiw	r26, 0x0e	; 14
    35f4:	6c 93       	st	X, r22
    35f6:	1e 97       	sbiw	r26, 0x0e	; 14
    35f8:	27 2f       	mov	r18, r23
    35fa:	33 27       	eor	r19, r19
    35fc:	1f 96       	adiw	r26, 0x0f	; 15
    35fe:	2c 93       	st	X, r18
    3600:	1f 97       	sbiw	r26, 0x0f	; 15
    3602:	9c 01       	movw	r18, r24
    3604:	44 27       	eor	r20, r20
    3606:	55 27       	eor	r21, r21
    3608:	50 96       	adiw	r26, 0x10	; 16
    360a:	2c 93       	st	X, r18
    360c:	50 97       	sbiw	r26, 0x10	; 16
    360e:	69 2f       	mov	r22, r25
    3610:	77 27       	eor	r23, r23
    3612:	88 27       	eor	r24, r24
    3614:	99 27       	eor	r25, r25
    3616:	51 96       	adiw	r26, 0x11	; 17
    3618:	6c 93       	st	X, r22
    361a:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    361c:	1b 96       	adiw	r26, 0x0b	; 11
    361e:	1c 92       	st	X, r1
    3620:	1b 97       	sbiw	r26, 0x0b	; 11
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    3622:	5c 96       	adiw	r26, 0x1c	; 28
    3624:	1c 92       	st	X, r1
    3626:	5c 97       	sbiw	r26, 0x1c	; 28
    3628:	5d 96       	adiw	r26, 0x1d	; 29
    362a:	1c 92       	st	X, r1
    362c:	5d 97       	sbiw	r26, 0x1d	; 29
    362e:	5e 96       	adiw	r26, 0x1e	; 30
    3630:	1c 92       	st	X, r1
    3632:	5e 97       	sbiw	r26, 0x1e	; 30
    3634:	5f 96       	adiw	r26, 0x1f	; 31
    3636:	1c 92       	st	X, r1
    3638:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    363a:	55 96       	adiw	r26, 0x15	; 21
    363c:	9c 91       	ld	r25, X
    363e:	55 97       	sbiw	r26, 0x15	; 21
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	54 96       	adiw	r26, 0x14	; 20
    3644:	2c 91       	ld	r18, X
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	82 2b       	or	r24, r18
    364a:	93 2b       	or	r25, r19
    364c:	a0 e0       	ldi	r26, 0x00	; 0
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	6c 01       	movw	r12, r24
    3652:	bb 24       	eor	r11, r11
    3654:	aa 24       	eor	r10, r10
    3656:	f2 01       	movw	r30, r4
    3658:	93 8d       	ldd	r25, Z+27	; 0x1b
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	22 8d       	ldd	r18, Z+26	; 0x1a
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	82 2b       	or	r24, r18
    3662:	93 2b       	or	r25, r19
    3664:	a0 e0       	ldi	r26, 0x00	; 0
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	a8 2a       	or	r10, r24
    366a:	b9 2a       	or	r11, r25
    366c:	ca 2a       	or	r12, r26
    366e:	db 2a       	or	r13, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    3670:	12 8e       	std	Z+26, r1	; 0x1a
    3672:	13 8e       	std	Z+27, r1	; 0x1b
    3674:	14 8a       	std	Z+20, r1	; 0x14
    3676:	15 8a       	std	Z+21, r1	; 0x15
			dj.fs->wflag = 1;
    3678:	ed 85       	ldd	r30, Y+13	; 0x0d
    367a:	fe 85       	ldd	r31, Y+14	; 0x0e
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    3680:	a1 14       	cp	r10, r1
    3682:	b1 04       	cpc	r11, r1
    3684:	c1 04       	cpc	r12, r1
    3686:	d1 04       	cpc	r13, r1
    3688:	09 f4       	brne	.+2      	; 0x368c <f_open+0xcac>
    368a:	83 c0       	rjmp	.+262    	; 0x3792 <f_open+0xdb2>
				dw = dj.fs->winsect;
    368c:	2d 84       	ldd	r2, Y+13	; 0x0d
    368e:	3e 84       	ldd	r3, Y+14	; 0x0e
    3690:	d1 01       	movw	r26, r2
    3692:	9c 96       	adiw	r26, 0x2c	; 44
    3694:	2d 91       	ld	r18, X+
    3696:	3d 91       	ld	r19, X+
    3698:	4d 91       	ld	r20, X+
    369a:	5c 91       	ld	r21, X
    369c:	9f 97       	sbiw	r26, 0x2f	; 47
    369e:	2f a3       	std	Y+39, r18	; 0x27
    36a0:	38 a7       	std	Y+40, r19	; 0x28
    36a2:	49 a7       	std	Y+41, r20	; 0x29
    36a4:	5a a7       	std	Y+42, r21	; 0x2a
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    36a6:	b1 e0       	ldi	r27, 0x01	; 1
    36a8:	ab 16       	cp	r10, r27
    36aa:	b1 04       	cpc	r11, r1
    36ac:	c1 04       	cpc	r12, r1
    36ae:	d1 04       	cpc	r13, r1
    36b0:	09 f4       	brne	.+2      	; 0x36b4 <f_open+0xcd4>
    36b2:	5d c0       	rjmp	.+186    	; 0x376e <f_open+0xd8e>
    36b4:	f1 01       	movw	r30, r2
    36b6:	80 8d       	ldd	r24, Z+24	; 0x18
    36b8:	91 8d       	ldd	r25, Z+25	; 0x19
    36ba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    36bc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    36be:	a8 16       	cp	r10, r24
    36c0:	b9 06       	cpc	r11, r25
    36c2:	ca 06       	cpc	r12, r26
    36c4:	db 06       	cpc	r13, r27
    36c6:	08 f0       	brcs	.+2      	; 0x36ca <f_open+0xcea>
    36c8:	52 c0       	rjmp	.+164    	; 0x376e <f_open+0xd8e>
    36ca:	86 01       	movw	r16, r12
    36cc:	75 01       	movw	r14, r10
    36ce:	43 c0       	rjmp	.+134    	; 0x3756 <f_open+0xd76>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    36d0:	c1 01       	movw	r24, r2
    36d2:	b8 01       	movw	r22, r16
    36d4:	a7 01       	movw	r20, r14
    36d6:	0e 94 41 0b 	call	0x1682	; 0x1682 <get_fat>
    36da:	3b 01       	movw	r6, r22
    36dc:	4c 01       	movw	r8, r24
			if (nxt == 0) break;				/* Empty cluster? */
    36de:	61 15       	cp	r22, r1
    36e0:	71 05       	cpc	r23, r1
    36e2:	81 05       	cpc	r24, r1
    36e4:	91 05       	cpc	r25, r1
    36e6:	09 f4       	brne	.+2      	; 0x36ea <f_open+0xd0a>
    36e8:	0f c1       	rjmp	.+542    	; 0x3908 <f_open+0xf28>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    36ea:	61 30       	cpi	r22, 0x01	; 1
    36ec:	71 05       	cpc	r23, r1
    36ee:	81 05       	cpc	r24, r1
    36f0:	91 05       	cpc	r25, r1
    36f2:	e9 f1       	breq	.+122    	; 0x376e <f_open+0xd8e>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    36f4:	6f 3f       	cpi	r22, 0xFF	; 255
    36f6:	2f ef       	ldi	r18, 0xFF	; 255
    36f8:	72 07       	cpc	r23, r18
    36fa:	2f ef       	ldi	r18, 0xFF	; 255
    36fc:	82 07       	cpc	r24, r18
    36fe:	2f ef       	ldi	r18, 0xFF	; 255
    3700:	92 07       	cpc	r25, r18
    3702:	19 f4       	brne	.+6      	; 0x370a <f_open+0xd2a>
    3704:	ff 24       	eor	r15, r15
    3706:	f3 94       	inc	r15
    3708:	d2 c0       	rjmp	.+420    	; 0x38ae <f_open+0xece>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    370a:	c1 01       	movw	r24, r2
    370c:	b8 01       	movw	r22, r16
    370e:	a7 01       	movw	r20, r14
    3710:	00 e0       	ldi	r16, 0x00	; 0
    3712:	10 e0       	ldi	r17, 0x00	; 0
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	0e 94 04 0a 	call	0x1408	; 0x1408 <put_fat>
    371c:	f8 2e       	mov	r15, r24
			if (res != FR_OK) break;
    371e:	88 23       	and	r24, r24
    3720:	09 f0       	breq	.+2      	; 0x3724 <f_open+0xd44>
    3722:	c5 c0       	rjmp	.+394    	; 0x38ae <f_open+0xece>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    3724:	f1 01       	movw	r30, r2
    3726:	80 89       	ldd	r24, Z+16	; 0x10
    3728:	91 89       	ldd	r25, Z+17	; 0x11
    372a:	a2 89       	ldd	r26, Z+18	; 0x12
    372c:	b3 89       	ldd	r27, Z+19	; 0x13
    372e:	8f 3f       	cpi	r24, 0xFF	; 255
    3730:	ff ef       	ldi	r31, 0xFF	; 255
    3732:	9f 07       	cpc	r25, r31
    3734:	ff ef       	ldi	r31, 0xFF	; 255
    3736:	af 07       	cpc	r26, r31
    3738:	ff ef       	ldi	r31, 0xFF	; 255
    373a:	bf 07       	cpc	r27, r31
    373c:	51 f0       	breq	.+20     	; 0x3752 <f_open+0xd72>
				fs->free_clust++;
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	a1 1d       	adc	r26, r1
    3742:	b1 1d       	adc	r27, r1
    3744:	f1 01       	movw	r30, r2
    3746:	80 8b       	std	Z+16, r24	; 0x10
    3748:	91 8b       	std	Z+17, r25	; 0x11
    374a:	a2 8b       	std	Z+18, r26	; 0x12
    374c:	b3 8b       	std	Z+19, r27	; 0x13
				fs->fsi_flag = 1;
    374e:	21 e0       	ldi	r18, 0x01	; 1
    3750:	25 83       	std	Z+5, r18	; 0x05
    3752:	84 01       	movw	r16, r8
    3754:	73 01       	movw	r14, r6
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    3756:	f1 01       	movw	r30, r2
    3758:	80 8d       	ldd	r24, Z+24	; 0x18
    375a:	91 8d       	ldd	r25, Z+25	; 0x19
    375c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    375e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3760:	e8 16       	cp	r14, r24
    3762:	f9 06       	cpc	r15, r25
    3764:	0a 07       	cpc	r16, r26
    3766:	1b 07       	cpc	r17, r27
    3768:	08 f4       	brcc	.+2      	; 0x376c <f_open+0xd8c>
    376a:	b2 cf       	rjmp	.-156    	; 0x36d0 <f_open+0xcf0>
    376c:	cd c0       	rjmp	.+410    	; 0x3908 <f_open+0xf28>
    376e:	22 e0       	ldi	r18, 0x02	; 2
    3770:	f2 2e       	mov	r15, r18
    3772:	9d c0       	rjmp	.+314    	; 0x38ae <f_open+0xece>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    3774:	ff 20       	and	r15, r15
    3776:	09 f0       	breq	.+2      	; 0x377a <f_open+0xd9a>
    3778:	9a c0       	rjmp	.+308    	; 0x38ae <f_open+0xece>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    377a:	d2 01       	movw	r26, r4
    377c:	1b 96       	adiw	r26, 0x0b	; 11
    377e:	8c 91       	ld	r24, X
    3780:	84 ff       	sbrs	r24, 4
    3782:	03 c0       	rjmp	.+6      	; 0x378a <f_open+0xdaa>
    3784:	94 e0       	ldi	r25, 0x04	; 4
    3786:	f9 2e       	mov	r15, r25
    3788:	92 c0       	rjmp	.+292    	; 0x38ae <f_open+0xece>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    378a:	21 ff       	sbrs	r18, 1
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <f_open+0xdb2>
    378e:	80 fd       	sbrc	r24, 0
    3790:	ab c0       	rjmp	.+342    	; 0x38e8 <f_open+0xf08>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    3792:	bb a5       	ldd	r27, Y+43	; 0x2b
    3794:	b3 ff       	sbrs	r27, 3
    3796:	02 c0       	rjmp	.+4      	; 0x379c <f_open+0xdbc>
			mode |= FA__WRITTEN;
    3798:	b0 62       	ori	r27, 0x20	; 32
    379a:	bb a7       	std	Y+43, r27	; 0x2b
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    379c:	ed 85       	ldd	r30, Y+13	; 0x0d
    379e:	fe 85       	ldd	r31, Y+14	; 0x0e
    37a0:	24 a5       	ldd	r18, Z+44	; 0x2c
    37a2:	35 a5       	ldd	r19, Z+45	; 0x2d
    37a4:	46 a5       	ldd	r20, Z+46	; 0x2e
    37a6:	57 a5       	ldd	r21, Z+47	; 0x2f
    37a8:	ac a9       	ldd	r26, Y+52	; 0x34
    37aa:	bd a9       	ldd	r27, Y+53	; 0x35
    37ac:	5a 96       	adiw	r26, 0x1a	; 26
    37ae:	2d 93       	st	X+, r18
    37b0:	3d 93       	st	X+, r19
    37b2:	4d 93       	st	X+, r20
    37b4:	5c 93       	st	X, r21
    37b6:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    37b8:	5f 96       	adiw	r26, 0x1f	; 31
    37ba:	5c 92       	st	X, r5
    37bc:	4e 92       	st	-X, r4
    37be:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    37c0:	2b a5       	ldd	r18, Y+43	; 0x2b
    37c2:	14 96       	adiw	r26, 0x04	; 4
    37c4:	2c 93       	st	X, r18
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    37c6:	d2 01       	movw	r26, r4
    37c8:	55 96       	adiw	r26, 0x15	; 21
    37ca:	3c 91       	ld	r19, X
    37cc:	55 97       	sbiw	r26, 0x15	; 21
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	54 96       	adiw	r26, 0x14	; 20
    37d2:	8c 91       	ld	r24, X
    37d4:	54 97       	sbiw	r26, 0x14	; 20
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	28 2b       	or	r18, r24
    37da:	39 2b       	or	r19, r25
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	a9 01       	movw	r20, r18
    37e2:	33 27       	eor	r19, r19
    37e4:	22 27       	eor	r18, r18
    37e6:	5b 96       	adiw	r26, 0x1b	; 27
    37e8:	9c 91       	ld	r25, X
    37ea:	5b 97       	sbiw	r26, 0x1b	; 27
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	5a 96       	adiw	r26, 0x1a	; 26
    37f0:	6c 91       	ld	r22, X
    37f2:	70 e0       	ldi	r23, 0x00	; 0
    37f4:	86 2b       	or	r24, r22
    37f6:	97 2b       	or	r25, r23
    37f8:	a0 e0       	ldi	r26, 0x00	; 0
    37fa:	b0 e0       	ldi	r27, 0x00	; 0
    37fc:	28 2b       	or	r18, r24
    37fe:	39 2b       	or	r19, r25
    3800:	4a 2b       	or	r20, r26
    3802:	5b 2b       	or	r21, r27
    3804:	ac a9       	ldd	r26, Y+52	; 0x34
    3806:	bd a9       	ldd	r27, Y+53	; 0x35
    3808:	1e 96       	adiw	r26, 0x0e	; 14
    380a:	2d 93       	st	X+, r18
    380c:	3d 93       	st	X+, r19
    380e:	4d 93       	st	X+, r20
    3810:	5c 93       	st	X, r21
    3812:	51 97       	sbiw	r26, 0x11	; 17
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    3814:	d2 01       	movw	r26, r4
    3816:	5f 96       	adiw	r26, 0x1f	; 31
    3818:	2c 91       	ld	r18, X
    381a:	5f 97       	sbiw	r26, 0x1f	; 31
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	52 2f       	mov	r21, r18
    3824:	44 27       	eor	r20, r20
    3826:	33 27       	eor	r19, r19
    3828:	22 27       	eor	r18, r18
    382a:	5e 96       	adiw	r26, 0x1e	; 30
    382c:	8c 91       	ld	r24, X
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	a0 e0       	ldi	r26, 0x00	; 0
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	dc 01       	movw	r26, r24
    3836:	99 27       	eor	r25, r25
    3838:	88 27       	eor	r24, r24
    383a:	28 2b       	or	r18, r24
    383c:	39 2b       	or	r19, r25
    383e:	4a 2b       	or	r20, r26
    3840:	5b 2b       	or	r21, r27
    3842:	d2 01       	movw	r26, r4
    3844:	5c 96       	adiw	r26, 0x1c	; 28
    3846:	8c 91       	ld	r24, X
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	28 2b       	or	r18, r24
    3850:	39 2b       	or	r19, r25
    3852:	4a 2b       	or	r20, r26
    3854:	5b 2b       	or	r21, r27
    3856:	d2 01       	movw	r26, r4
    3858:	5d 96       	adiw	r26, 0x1d	; 29
    385a:	9c 91       	ld	r25, X
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	28 2b       	or	r18, r24
    3864:	39 2b       	or	r19, r25
    3866:	4a 2b       	or	r20, r26
    3868:	5b 2b       	or	r21, r27
    386a:	ac a9       	ldd	r26, Y+52	; 0x34
    386c:	bd a9       	ldd	r27, Y+53	; 0x35
    386e:	1a 96       	adiw	r26, 0x0a	; 10
    3870:	2d 93       	st	X+, r18
    3872:	3d 93       	st	X+, r19
    3874:	4d 93       	st	X+, r20
    3876:	5c 93       	st	X, r21
    3878:	1d 97       	sbiw	r26, 0x0d	; 13
		fp->fptr = 0;						/* File pointer */
    387a:	ac a9       	ldd	r26, Y+52	; 0x34
    387c:	bd a9       	ldd	r27, Y+53	; 0x35
    387e:	16 96       	adiw	r26, 0x06	; 6
    3880:	1d 92       	st	X+, r1
    3882:	1d 92       	st	X+, r1
    3884:	1d 92       	st	X+, r1
    3886:	1c 92       	st	X, r1
    3888:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    388a:	ac a9       	ldd	r26, Y+52	; 0x34
    388c:	bd a9       	ldd	r27, Y+53	; 0x35
    388e:	56 96       	adiw	r26, 0x16	; 22
    3890:	1d 92       	st	X+, r1
    3892:	1d 92       	st	X+, r1
    3894:	1d 92       	st	X+, r1
    3896:	1c 92       	st	X, r1
    3898:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    389a:	11 96       	adiw	r26, 0x01	; 1
    389c:	fc 93       	st	X, r31
    389e:	ee 93       	st	-X, r30
    38a0:	86 81       	ldd	r24, Z+6	; 0x06
    38a2:	97 81       	ldd	r25, Z+7	; 0x07
    38a4:	13 96       	adiw	r26, 0x03	; 3
    38a6:	9c 93       	st	X, r25
    38a8:	8e 93       	st	-X, r24
    38aa:	12 97       	sbiw	r26, 0x02	; 2
    38ac:	ff 24       	eor	r15, r15
	}

	LEAVE_FF(dj.fs, res);
}
    38ae:	8f 2d       	mov	r24, r15
    38b0:	e7 96       	adiw	r28, 0x37	; 55
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	af 90       	pop	r10
    38d0:	9f 90       	pop	r9
    38d2:	8f 90       	pop	r8
    38d4:	7f 90       	pop	r7
    38d6:	6f 90       	pop	r6
    38d8:	5f 90       	pop	r5
    38da:	4f 90       	pop	r4
    38dc:	3f 90       	pop	r3
    38de:	2f 90       	pop	r2
    38e0:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    38e2:	e8 e0       	ldi	r30, 0x08	; 8
    38e4:	fe 2e       	mov	r15, r30
    38e6:	e3 cf       	rjmp	.-58     	; 0x38ae <f_open+0xece>
    38e8:	77 e0       	ldi	r23, 0x07	; 7
    38ea:	f7 2e       	mov	r15, r23
    38ec:	e0 cf       	rjmp	.-64     	; 0x38ae <f_open+0xece>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    38ee:	4b 8d       	ldd	r20, Y+27	; 0x1b
    38f0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    38f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    38f4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    38f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fa:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    38fe:	f8 2e       	mov	r15, r24
		if (res == FR_OK) {
    3900:	88 23       	and	r24, r24
    3902:	09 f0       	breq	.+2      	; 0x3906 <f_open+0xf26>
    3904:	60 ce       	rjmp	.-832    	; 0x35c6 <f_open+0xbe6>
    3906:	4b ce       	rjmp	.-874    	; 0x359e <f_open+0xbbe>
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
				if (res == FR_OK) {
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    3908:	ed 85       	ldd	r30, Y+13	; 0x0d
    390a:	fe 85       	ldd	r31, Y+14	; 0x0e
    390c:	08 94       	sec
    390e:	a1 08       	sbc	r10, r1
    3910:	b1 08       	sbc	r11, r1
    3912:	c1 08       	sbc	r12, r1
    3914:	d1 08       	sbc	r13, r1
    3916:	a4 86       	std	Z+12, r10	; 0x0c
    3918:	b5 86       	std	Z+13, r11	; 0x0d
    391a:	c6 86       	std	Z+14, r12	; 0x0e
    391c:	d7 86       	std	Z+15, r13	; 0x0f
					res = move_window(dj.fs, dw);
    391e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3920:	9e 85       	ldd	r25, Y+14	; 0x0e
    3922:	4f a1       	ldd	r20, Y+39	; 0x27
    3924:	58 a5       	ldd	r21, Y+40	; 0x28
    3926:	69 a5       	ldd	r22, Y+41	; 0x29
    3928:	7a a5       	ldd	r23, Y+42	; 0x2a
    392a:	0e 94 8e 09 	call	0x131c	; 0x131c <move_window>
    392e:	f8 2e       	mov	r15, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    3930:	88 23       	and	r24, r24
    3932:	09 f4       	brne	.+2      	; 0x3936 <f_open+0xf56>
    3934:	2e cf       	rjmp	.-420    	; 0x3792 <f_open+0xdb2>
    3936:	bb cf       	rjmp	.-138    	; 0x38ae <f_open+0xece>
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	60 cd       	rjmp	.-1344   	; 0x33fc <f_open+0xa1c>

0000393c <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    393c:	38 2f       	mov	r19, r24
    393e:	28 2f       	mov	r18, r24
    3940:	2c c0       	rjmp	.+88     	; 0x399a <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3942:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
    3946:	23 17       	cp	r18, r19
    3948:	21 f4       	brne	.+8      	; 0x3952 <Endpoint_ConfigureEndpoint_Prv+0x16>
    394a:	76 2f       	mov	r23, r22
    394c:	94 2f       	mov	r25, r20
    394e:	50 e0       	ldi	r21, 0x00	; 0
    3950:	06 c0       	rjmp	.+12     	; 0x395e <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    3952:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3956:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    395a:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    395e:	91 ff       	sbrs	r25, 1
    3960:	1b c0       	rjmp	.+54     	; 0x3998 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    3962:	80 91 eb 00 	lds	r24, 0x00EB
    3966:	8e 7f       	andi	r24, 0xFE	; 254
    3968:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    396c:	80 91 ed 00 	lds	r24, 0x00ED
    3970:	8d 7f       	andi	r24, 0xFD	; 253
    3972:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    3976:	80 91 eb 00 	lds	r24, 0x00EB
    397a:	81 60       	ori	r24, 0x01	; 1
    397c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    3980:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    3984:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    3988:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    398c:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
    3990:	87 fd       	sbrc	r24, 7
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3998:	2f 5f       	subi	r18, 0xFF	; 255
    399a:	27 30       	cpi	r18, 0x07	; 7
    399c:	90 f2       	brcs	.-92     	; 0x3942 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    399e:	30 93 e9 00 	sts	0x00E9, r19
    39a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    39a4:	08 95       	ret

000039a6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    39a6:	80 91 2c 06 	lds	r24, 0x062C
    39aa:	88 23       	and	r24, r24
    39ac:	8c f4       	brge	.+34     	; 0x39d0 <Endpoint_ClearStatusStage+0x2a>
    39ae:	03 c0       	rjmp	.+6      	; 0x39b6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    39b0:	8e b3       	in	r24, 0x1e	; 30
    39b2:	88 23       	and	r24, r24
    39b4:	b1 f0       	breq	.+44     	; 0x39e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    39b6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    39ba:	82 ff       	sbrs	r24, 2
    39bc:	f9 cf       	rjmp	.-14     	; 0x39b0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    39be:	80 91 e8 00 	lds	r24, 0x00E8
    39c2:	8b 77       	andi	r24, 0x7B	; 123
    39c4:	80 93 e8 00 	sts	0x00E8, r24
    39c8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    39ca:	8e b3       	in	r24, 0x1e	; 30
    39cc:	88 23       	and	r24, r24
    39ce:	49 f0       	breq	.+18     	; 0x39e2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39d0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    39d4:	80 ff       	sbrs	r24, 0
    39d6:	f9 cf       	rjmp	.-14     	; 0x39ca <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    39d8:	80 91 e8 00 	lds	r24, 0x00E8
    39dc:	8e 77       	andi	r24, 0x7E	; 126
    39de:	80 93 e8 00 	sts	0x00E8, r24
    39e2:	08 95       	ret

000039e4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    39e4:	40 91 e4 00 	lds	r20, 0x00E4
    39e8:	50 91 e5 00 	lds	r21, 0x00E5
    39ec:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    39ee:	80 91 ec 00 	lds	r24, 0x00EC
    39f2:	80 ff       	sbrs	r24, 0
    39f4:	23 c0       	rjmp	.+70     	; 0x3a3c <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    39f6:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    39fa:	80 fd       	sbrc	r24, 0
    39fc:	1d c0       	rjmp	.+58     	; 0x3a38 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    39fe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3a00:	88 23       	and	r24, r24
    3a02:	11 f4       	brne	.+4      	; 0x3a08 <Endpoint_WaitUntilReady+0x24>
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3a08:	85 30       	cpi	r24, 0x05	; 5
    3a0a:	11 f4       	brne	.+4      	; 0x3a10 <Endpoint_WaitUntilReady+0x2c>
    3a0c:	83 e0       	ldi	r24, 0x03	; 3
    3a0e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3a10:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3a14:	85 ff       	sbrs	r24, 5
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <Endpoint_WaitUntilReady+0x38>
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	08 95       	ret
    3a1c:	80 91 e4 00 	lds	r24, 0x00E4
    3a20:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3a24:	84 17       	cp	r24, r20
    3a26:	95 07       	cpc	r25, r21
    3a28:	11 f3       	breq	.-60     	; 0x39ee <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3a2a:	22 23       	and	r18, r18
    3a2c:	11 f4       	brne	.+4      	; 0x3a32 <Endpoint_WaitUntilReady+0x4e>
    3a2e:	84 e0       	ldi	r24, 0x04	; 4
    3a30:	08 95       	ret
    3a32:	21 50       	subi	r18, 0x01	; 1
    3a34:	ac 01       	movw	r20, r24
    3a36:	db cf       	rjmp	.-74     	; 0x39ee <Endpoint_WaitUntilReady+0xa>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3a3a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a3c:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3a40:	82 ff       	sbrs	r24, 2
    3a42:	dd cf       	rjmp	.-70     	; 0x39fe <Endpoint_WaitUntilReady+0x1a>
    3a44:	f9 cf       	rjmp	.-14     	; 0x3a38 <Endpoint_WaitUntilReady+0x54>

00003a46 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3a4e:	49 d0       	rcall	.+146    	; 0x3ae2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3a50:	50 d0       	rcall	.+160    	; 0x3af2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3a52:	08 ed       	ldi	r16, 0xD8	; 216
    3a54:	10 e0       	ldi	r17, 0x00	; 0
    3a56:	f8 01       	movw	r30, r16
    3a58:	80 81       	ld	r24, Z
    3a5a:	8f 77       	andi	r24, 0x7F	; 127
    3a5c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    3a5e:	80 81       	ld	r24, Z
    3a60:	80 68       	ori	r24, 0x80	; 128
    3a62:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3a64:	80 81       	ld	r24, Z
    3a66:	8f 7d       	andi	r24, 0xDF	; 223
    3a68:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3a6a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3a6c:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    3a6e:	10 92 28 06 	sts	0x0628, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3a72:	10 92 2a 06 	sts	0x062A, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3a76:	10 92 29 06 	sts	0x0629, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3a7a:	80 ee       	ldi	r24, 0xE0	; 224
    3a7c:	e8 2e       	mov	r14, r24
    3a7e:	f1 2c       	mov	r15, r1
    3a80:	f7 01       	movw	r30, r14
    3a82:	80 81       	ld	r24, Z
    3a84:	8b 7f       	andi	r24, 0xFB	; 251
    3a86:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3a88:	f8 01       	movw	r30, r16
    3a8a:	80 81       	ld	r24, Z
    3a8c:	81 60       	ori	r24, 0x01	; 1
    3a8e:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	42 e0       	ldi	r20, 0x02	; 2
    3a96:	52 df       	rcall	.-348    	; 0x393c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3a98:	e1 ee       	ldi	r30, 0xE1	; 225
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	8e 7f       	andi	r24, 0xFE	; 254
    3aa0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3aa2:	e2 ee       	ldi	r30, 0xE2	; 226
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	81 60       	ori	r24, 0x01	; 1
    3aaa:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3aac:	80 81       	ld	r24, Z
    3aae:	88 60       	ori	r24, 0x08	; 8
    3ab0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3ab2:	f7 01       	movw	r30, r14
    3ab4:	80 81       	ld	r24, Z
    3ab6:	8e 7f       	andi	r24, 0xFE	; 254
    3ab8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    3aba:	f8 01       	movw	r30, r16
    3abc:	80 81       	ld	r24, Z
    3abe:	80 61       	ori	r24, 0x10	; 16
    3ac0:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	08 95       	ret

00003acc <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    3acc:	e7 ed       	ldi	r30, 0xD7	; 215
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	81 60       	ori	r24, 0x01	; 1
    3ad4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    3ad6:	8a e4       	ldi	r24, 0x4A	; 74
    3ad8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	80 93 2b 06 	sts	0x062B, r24

	USB_ResetInterface();
}
    3ae0:	b2 cf       	rjmp	.-156    	; 0x3a46 <USB_ResetInterface>

00003ae2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    3ae2:	e8 ed       	ldi	r30, 0xD8	; 216
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	8e 7f       	andi	r24, 0xFE	; 254
    3aea:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3aec:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    3af0:	08 95       	ret

00003af2 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3af2:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3af6:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    3afa:	08 95       	ret

00003afc <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3afc:	1f 92       	push	r1
    3afe:	0f 92       	push	r0
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	0f 92       	push	r0
    3b04:	11 24       	eor	r1, r1
    3b06:	1f 93       	push	r17
    3b08:	2f 93       	push	r18
    3b0a:	3f 93       	push	r19
    3b0c:	4f 93       	push	r20
    3b0e:	5f 93       	push	r21
    3b10:	6f 93       	push	r22
    3b12:	7f 93       	push	r23
    3b14:	8f 93       	push	r24
    3b16:	9f 93       	push	r25
    3b18:	af 93       	push	r26
    3b1a:	bf 93       	push	r27
    3b1c:	ef 93       	push	r30
    3b1e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    3b20:	e9 ee       	ldi	r30, 0xE9	; 233
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	10 81       	ld	r17, Z
    3b26:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3b28:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3b2a:	e0 ef       	ldi	r30, 0xF0	; 240
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	80 81       	ld	r24, Z
    3b30:	87 7f       	andi	r24, 0xF7	; 247
    3b32:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3b34:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3b36:	24 d3       	rcall	.+1608   	; 0x4180 <USB_Device_ProcessControlRequest>
    3b38:	a9 ee       	ldi	r26, 0xE9	; 233
    3b3a:	b0 e0       	ldi	r27, 0x00	; 0
    3b3c:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3b3e:	e0 ef       	ldi	r30, 0xF0	; 240
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	80 81       	ld	r24, Z
    3b44:	88 60       	ori	r24, 0x08	; 8
    3b46:	80 83       	st	Z, r24
    3b48:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3b4a:	ff 91       	pop	r31
    3b4c:	ef 91       	pop	r30
    3b4e:	bf 91       	pop	r27
    3b50:	af 91       	pop	r26
    3b52:	9f 91       	pop	r25
    3b54:	8f 91       	pop	r24
    3b56:	7f 91       	pop	r23
    3b58:	6f 91       	pop	r22
    3b5a:	5f 91       	pop	r21
    3b5c:	4f 91       	pop	r20
    3b5e:	3f 91       	pop	r19
    3b60:	2f 91       	pop	r18
    3b62:	1f 91       	pop	r17
    3b64:	0f 90       	pop	r0
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	0f 90       	pop	r0
    3b6a:	1f 90       	pop	r1
    3b6c:	18 95       	reti

00003b6e <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3b6e:	1f 92       	push	r1
    3b70:	0f 92       	push	r0
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	0f 92       	push	r0
    3b76:	11 24       	eor	r1, r1
    3b78:	2f 93       	push	r18
    3b7a:	3f 93       	push	r19
    3b7c:	4f 93       	push	r20
    3b7e:	5f 93       	push	r21
    3b80:	6f 93       	push	r22
    3b82:	7f 93       	push	r23
    3b84:	8f 93       	push	r24
    3b86:	9f 93       	push	r25
    3b88:	af 93       	push	r26
    3b8a:	bf 93       	push	r27
    3b8c:	ef 93       	push	r30
    3b8e:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3b90:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3b94:	82 ff       	sbrs	r24, 2
    3b96:	0a c0       	rjmp	.+20     	; 0x3bac <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3b98:	80 91 e2 00 	lds	r24, 0x00E2
    3b9c:	82 ff       	sbrs	r24, 2
    3b9e:	06 c0       	rjmp	.+12     	; 0x3bac <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3ba0:	80 91 e1 00 	lds	r24, 0x00E1
    3ba4:	8b 7f       	andi	r24, 0xFB	; 251
    3ba6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3baa:	56 d4       	rcall	.+2220   	; 0x4458 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3bac:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3bb0:	80 ff       	sbrs	r24, 0
    3bb2:	1d c0       	rjmp	.+58     	; 0x3bee <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3bb4:	80 91 d8 00 	lds	r24, 0x00D8
    3bb8:	80 ff       	sbrs	r24, 0
    3bba:	19 c0       	rjmp	.+50     	; 0x3bee <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3bbc:	80 91 da 00 	lds	r24, 0x00DA
    3bc0:	8e 7f       	andi	r24, 0xFE	; 254
    3bc2:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3bc6:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3bca:	80 ff       	sbrs	r24, 0
    3bcc:	0c c0       	rjmp	.+24     	; 0x3be6 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3bce:	80 e1       	ldi	r24, 0x10	; 16
    3bd0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3bd2:	82 e1       	ldi	r24, 0x12	; 18
    3bd4:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3bd6:	09 b4       	in	r0, 0x29	; 41
    3bd8:	00 fe       	sbrs	r0, 0
    3bda:	fd cf       	rjmp	.-6      	; 0x3bd6 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    3be0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <EVENT_USB_Device_Connect>
    3be4:	04 c0       	rjmp	.+8      	; 0x3bee <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3be6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3be8:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    3bea:	0e 94 61 02 	call	0x4c2	; 0x4c2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3bee:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3bf2:	80 ff       	sbrs	r24, 0
    3bf4:	17 c0       	rjmp	.+46     	; 0x3c24 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3bf6:	80 91 e2 00 	lds	r24, 0x00E2
    3bfa:	80 ff       	sbrs	r24, 0
    3bfc:	13 c0       	rjmp	.+38     	; 0x3c24 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3bfe:	80 91 e2 00 	lds	r24, 0x00E2
    3c02:	8e 7f       	andi	r24, 0xFE	; 254
    3c04:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3c08:	80 91 e2 00 	lds	r24, 0x00E2
    3c0c:	80 61       	ori	r24, 0x10	; 16
    3c0e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    3c12:	80 91 d8 00 	lds	r24, 0x00D8
    3c16:	80 62       	ori	r24, 0x20	; 32
    3c18:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3c1c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3c1e:	85 e0       	ldi	r24, 0x05	; 5
    3c20:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    3c22:	1a d4       	rcall	.+2100   	; 0x4458 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3c24:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3c28:	84 ff       	sbrs	r24, 4
    3c2a:	2c c0       	rjmp	.+88     	; 0x3c84 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3c2c:	80 91 e2 00 	lds	r24, 0x00E2
    3c30:	84 ff       	sbrs	r24, 4
    3c32:	28 c0       	rjmp	.+80     	; 0x3c84 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3c34:	80 e1       	ldi	r24, 0x10	; 16
    3c36:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3c38:	82 e1       	ldi	r24, 0x12	; 18
    3c3a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3c3c:	09 b4       	in	r0, 0x29	; 41
    3c3e:	00 fe       	sbrs	r0, 0
    3c40:	fd cf       	rjmp	.-6      	; 0x3c3c <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    3c42:	80 91 d8 00 	lds	r24, 0x00D8
    3c46:	8f 7d       	andi	r24, 0xDF	; 223
    3c48:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3c4c:	80 91 e1 00 	lds	r24, 0x00E1
    3c50:	8f 7e       	andi	r24, 0xEF	; 239
    3c52:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3c56:	80 91 e2 00 	lds	r24, 0x00E2
    3c5a:	8f 7e       	andi	r24, 0xEF	; 239
    3c5c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3c60:	80 91 e2 00 	lds	r24, 0x00E2
    3c64:	81 60       	ori	r24, 0x01	; 1
    3c66:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3c6a:	80 91 28 06 	lds	r24, 0x0628
    3c6e:	88 23       	and	r24, r24
    3c70:	31 f4       	brne	.+12     	; 0x3c7e <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3c72:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3c76:	87 fd       	sbrc	r24, 7
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <__vector_10+0x110>
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	01 c0       	rjmp	.+2      	; 0x3c80 <__vector_10+0x112>
    3c7e:	84 e0       	ldi	r24, 0x04	; 4
    3c80:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3c82:	ea d3       	rcall	.+2004   	; 0x4458 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3c84:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3c88:	83 ff       	sbrs	r24, 3
    3c8a:	26 c0       	rjmp	.+76     	; 0x3cd8 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3c8c:	80 91 e2 00 	lds	r24, 0x00E2
    3c90:	83 ff       	sbrs	r24, 3
    3c92:	22 c0       	rjmp	.+68     	; 0x3cd8 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3c94:	80 91 e1 00 	lds	r24, 0x00E1
    3c98:	87 7f       	andi	r24, 0xF7	; 247
    3c9a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    3ca2:	10 92 28 06 	sts	0x0628, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3ca6:	80 91 e1 00 	lds	r24, 0x00E1
    3caa:	8e 7f       	andi	r24, 0xFE	; 254
    3cac:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3cb0:	80 91 e2 00 	lds	r24, 0x00E2
    3cb4:	8e 7f       	andi	r24, 0xFE	; 254
    3cb6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3cba:	80 91 e2 00 	lds	r24, 0x00E2
    3cbe:	80 61       	ori	r24, 0x10	; 16
    3cc0:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	60 e0       	ldi	r22, 0x00	; 0
    3cc8:	42 e0       	ldi	r20, 0x02	; 2
    3cca:	38 de       	rcall	.-912    	; 0x393c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3ccc:	80 91 f0 00 	lds	r24, 0x00F0
    3cd0:	88 60       	ori	r24, 0x08	; 8
    3cd2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3cd6:	c0 d3       	rcall	.+1920   	; 0x4458 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3cd8:	ff 91       	pop	r31
    3cda:	ef 91       	pop	r30
    3cdc:	bf 91       	pop	r27
    3cde:	af 91       	pop	r26
    3ce0:	9f 91       	pop	r25
    3ce2:	8f 91       	pop	r24
    3ce4:	7f 91       	pop	r23
    3ce6:	6f 91       	pop	r22
    3ce8:	5f 91       	pop	r21
    3cea:	4f 91       	pop	r20
    3cec:	3f 91       	pop	r19
    3cee:	2f 91       	pop	r18
    3cf0:	0f 90       	pop	r0
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	0f 90       	pop	r0
    3cf6:	1f 90       	pop	r1
    3cf8:	18 95       	reti

00003cfa <Endpoint_Write_Control_Stream_LE>:
    3cfa:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3cfc:	40 91 32 06 	lds	r20, 0x0632
    3d00:	50 91 33 06 	lds	r21, 0x0633
    3d04:	46 17       	cp	r20, r22
    3d06:	57 07       	cpc	r21, r23
    3d08:	18 f4       	brcc	.+6      	; 0x3d10 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3d0a:	f9 01       	movw	r30, r18
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	44 c0       	rjmp	.+136    	; 0x3d98 <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3d10:	61 15       	cp	r22, r1
    3d12:	71 05       	cpc	r23, r1
    3d14:	11 f0       	breq	.+4      	; 0x3d1a <Endpoint_Write_Control_Stream_LE+0x20>
    3d16:	ab 01       	movw	r20, r22
    3d18:	f8 cf       	rjmp	.-16     	; 0x3d0a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3d1a:	80 91 e8 00 	lds	r24, 0x00E8
    3d1e:	8e 77       	andi	r24, 0x7E	; 126
    3d20:	80 93 e8 00 	sts	0x00E8, r24
    3d24:	40 e0       	ldi	r20, 0x00	; 0
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	f0 cf       	rjmp	.-32     	; 0x3d0a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3d2a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3d2c:	88 23       	and	r24, r24
    3d2e:	09 f4       	brne	.+2      	; 0x3d32 <Endpoint_Write_Control_Stream_LE+0x38>
    3d30:	44 c0       	rjmp	.+136    	; 0x3dba <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3d32:	85 30       	cpi	r24, 0x05	; 5
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <Endpoint_Write_Control_Stream_LE+0x3e>
    3d36:	43 c0       	rjmp	.+134    	; 0x3dbe <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3d38:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3d3c:	83 ff       	sbrs	r24, 3
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <Endpoint_Write_Control_Stream_LE+0x4a>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3d44:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3d48:	82 fd       	sbrc	r24, 2
    3d4a:	31 c0       	rjmp	.+98     	; 0x3dae <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3d4c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3d50:	80 ff       	sbrs	r24, 0
    3d52:	22 c0       	rjmp	.+68     	; 0x3d98 <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3d54:	80 91 f3 00 	lds	r24, 0x00F3
    3d58:	90 91 f2 00 	lds	r25, 0x00F2
    3d5c:	78 2f       	mov	r23, r24
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	29 2f       	mov	r18, r25
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	26 2b       	or	r18, r22
    3d66:	37 2b       	or	r19, r23
    3d68:	07 c0       	rjmp	.+14     	; 0x3d78 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3d6a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3d6c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3d70:	41 50       	subi	r20, 0x01	; 1
    3d72:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3d74:	2f 5f       	subi	r18, 0xFF	; 255
    3d76:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3d78:	41 15       	cp	r20, r1
    3d7a:	51 05       	cpc	r21, r1
    3d7c:	19 f0       	breq	.+6      	; 0x3d84 <Endpoint_Write_Control_Stream_LE+0x8a>
    3d7e:	28 30       	cpi	r18, 0x08	; 8
    3d80:	31 05       	cpc	r19, r1
    3d82:	98 f3       	brcs	.-26     	; 0x3d6a <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	28 30       	cpi	r18, 0x08	; 8
    3d88:	31 05       	cpc	r19, r1
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <Endpoint_Write_Control_Stream_LE+0x94>
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3d8e:	80 91 e8 00 	lds	r24, 0x00E8
    3d92:	8e 77       	andi	r24, 0x7E	; 126
    3d94:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3d98:	41 15       	cp	r20, r1
    3d9a:	51 05       	cpc	r21, r1
    3d9c:	31 f6       	brne	.-116    	; 0x3d2a <Endpoint_Write_Control_Stream_LE+0x30>
    3d9e:	99 23       	and	r25, r25
    3da0:	21 f6       	brne	.-120    	; 0x3d2a <Endpoint_Write_Control_Stream_LE+0x30>
    3da2:	05 c0       	rjmp	.+10     	; 0x3dae <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3da4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3da6:	88 23       	and	r24, r24
    3da8:	41 f0       	breq	.+16     	; 0x3dba <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3daa:	85 30       	cpi	r24, 0x05	; 5
    3dac:	41 f0       	breq	.+16     	; 0x3dbe <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3dae:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3db2:	82 ff       	sbrs	r24, 2
    3db4:	f7 cf       	rjmp	.-18     	; 0x3da4 <Endpoint_Write_Control_Stream_LE+0xaa>
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	08 95       	ret
    3dba:	82 e0       	ldi	r24, 0x02	; 2
    3dbc:	08 95       	ret
    3dbe:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3dc0:	08 95       	ret

00003dc2 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    3dc2:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    3dc4:	61 15       	cp	r22, r1
    3dc6:	71 05       	cpc	r23, r1
    3dc8:	29 f4       	brne	.+10     	; 0x3dd4 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3dca:	80 91 e8 00 	lds	r24, 0x00E8
    3dce:	8b 77       	andi	r24, 0x7B	; 123
    3dd0:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	26 c0       	rjmp	.+76     	; 0x3e24 <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3dd8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3dda:	88 23       	and	r24, r24
    3ddc:	91 f1       	breq	.+100    	; 0x3e42 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3dde:	85 30       	cpi	r24, 0x05	; 5
    3de0:	91 f1       	breq	.+100    	; 0x3e46 <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3de2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3de6:	83 ff       	sbrs	r24, 3
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <Endpoint_Read_Control_Stream_LE+0x2c>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3dee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    3df2:	82 ff       	sbrs	r24, 2
    3df4:	f1 cf       	rjmp	.-30     	; 0x3dd8 <Endpoint_Read_Control_Stream_LE+0x16>
    3df6:	06 c0       	rjmp	.+12     	; 0x3e04 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3df8:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3dfc:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    3dfe:	61 50       	subi	r22, 0x01	; 1
    3e00:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    3e02:	59 f0       	breq	.+22     	; 0x3e1a <Endpoint_Read_Control_Stream_LE+0x58>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3e04:	20 91 f3 00 	lds	r18, 0x00F3
    3e08:	80 91 f2 00 	lds	r24, 0x00F2
    3e0c:	32 2f       	mov	r19, r18
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	82 2b       	or	r24, r18
    3e14:	93 2b       	or	r25, r19
    3e16:	89 2b       	or	r24, r25
    3e18:	79 f7       	brne	.-34     	; 0x3df8 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3e1a:	80 91 e8 00 	lds	r24, 0x00E8
    3e1e:	8b 77       	andi	r24, 0x7B	; 123
    3e20:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    3e24:	61 15       	cp	r22, r1
    3e26:	71 05       	cpc	r23, r1
    3e28:	b9 f6       	brne	.-82     	; 0x3dd8 <Endpoint_Read_Control_Stream_LE+0x16>
    3e2a:	05 c0       	rjmp	.+10     	; 0x3e36 <Endpoint_Read_Control_Stream_LE+0x74>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3e2c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3e2e:	88 23       	and	r24, r24
    3e30:	41 f0       	breq	.+16     	; 0x3e42 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3e32:	85 30       	cpi	r24, 0x05	; 5
    3e34:	41 f0       	breq	.+16     	; 0x3e46 <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3e36:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    3e3a:	80 ff       	sbrs	r24, 0
    3e3c:	f7 cf       	rjmp	.-18     	; 0x3e2c <Endpoint_Read_Control_Stream_LE+0x6a>
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	08 95       	ret
    3e42:	82 e0       	ldi	r24, 0x02	; 2
    3e44:	08 95       	ret
    3e46:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3e48:	08 95       	ret

00003e4a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3e4a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    3e4c:	40 91 32 06 	lds	r20, 0x0632
    3e50:	50 91 33 06 	lds	r21, 0x0633
    3e54:	46 17       	cp	r20, r22
    3e56:	57 07       	cpc	r21, r23
    3e58:	18 f4       	brcc	.+6      	; 0x3e60 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3e5a:	f9 01       	movw	r30, r18
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	45 c0       	rjmp	.+138    	; 0x3eea <Endpoint_Write_Control_PStream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    3e60:	61 15       	cp	r22, r1
    3e62:	71 05       	cpc	r23, r1
    3e64:	11 f0       	breq	.+4      	; 0x3e6a <Endpoint_Write_Control_PStream_LE+0x20>
    3e66:	ab 01       	movw	r20, r22
    3e68:	f8 cf       	rjmp	.-16     	; 0x3e5a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e6a:	80 91 e8 00 	lds	r24, 0x00E8
    3e6e:	8e 77       	andi	r24, 0x7E	; 126
    3e70:	80 93 e8 00 	sts	0x00E8, r24
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	f0 cf       	rjmp	.-32     	; 0x3e5a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3e7a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3e7c:	88 23       	and	r24, r24
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <Endpoint_Write_Control_PStream_LE+0x38>
    3e80:	46 c0       	rjmp	.+140    	; 0x3f0e <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3e82:	85 30       	cpi	r24, 0x05	; 5
    3e84:	09 f4       	brne	.+2      	; 0x3e88 <Endpoint_Write_Control_PStream_LE+0x3e>
    3e86:	45 c0       	rjmp	.+138    	; 0x3f12 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e88:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3e8c:	83 ff       	sbrs	r24, 3
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <Endpoint_Write_Control_PStream_LE+0x4a>
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3e94:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    3e98:	82 fd       	sbrc	r24, 2
    3e9a:	33 c0       	rjmp	.+102    	; 0x3f02 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3e9c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3ea0:	80 ff       	sbrs	r24, 0
    3ea2:	23 c0       	rjmp	.+70     	; 0x3eea <Endpoint_Write_Control_PStream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3ea4:	80 91 f3 00 	lds	r24, 0x00F3
    3ea8:	90 91 f2 00 	lds	r25, 0x00F2
    3eac:	78 2f       	mov	r23, r24
    3eae:	60 e0       	ldi	r22, 0x00	; 0
    3eb0:	29 2f       	mov	r18, r25
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	26 2b       	or	r18, r22
    3eb6:	37 2b       	or	r19, r23
    3eb8:	08 c0       	rjmp	.+16     	; 0x3eca <Endpoint_Write_Control_PStream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3eba:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3ebc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3ec0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3ec2:	41 50       	subi	r20, 0x01	; 1
    3ec4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    3ec6:	2f 5f       	subi	r18, 0xFF	; 255
    3ec8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3eca:	41 15       	cp	r20, r1
    3ecc:	51 05       	cpc	r21, r1
    3ece:	19 f0       	breq	.+6      	; 0x3ed6 <Endpoint_Write_Control_PStream_LE+0x8c>
    3ed0:	28 30       	cpi	r18, 0x08	; 8
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	90 f3       	brcs	.-28     	; 0x3eba <Endpoint_Write_Control_PStream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	28 30       	cpi	r18, 0x08	; 8
    3eda:	31 05       	cpc	r19, r1
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <Endpoint_Write_Control_PStream_LE+0x96>
    3ede:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3ee0:	80 91 e8 00 	lds	r24, 0x00E8
    3ee4:	8e 77       	andi	r24, 0x7E	; 126
    3ee6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    3eea:	41 15       	cp	r20, r1
    3eec:	51 05       	cpc	r21, r1
    3eee:	29 f6       	brne	.-118    	; 0x3e7a <Endpoint_Write_Control_PStream_LE+0x30>
    3ef0:	99 23       	and	r25, r25
    3ef2:	09 f0       	breq	.+2      	; 0x3ef6 <Endpoint_Write_Control_PStream_LE+0xac>
    3ef4:	c2 cf       	rjmp	.-124    	; 0x3e7a <Endpoint_Write_Control_PStream_LE+0x30>
    3ef6:	05 c0       	rjmp	.+10     	; 0x3f02 <Endpoint_Write_Control_PStream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3ef8:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3efa:	88 23       	and	r24, r24
    3efc:	41 f0       	breq	.+16     	; 0x3f0e <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3efe:	85 30       	cpi	r24, 0x05	; 5
    3f00:	41 f0       	breq	.+16     	; 0x3f12 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3f02:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3f06:	82 ff       	sbrs	r24, 2
    3f08:	f7 cf       	rjmp	.-18     	; 0x3ef8 <Endpoint_Write_Control_PStream_LE+0xae>
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	08 95       	ret
    3f0e:	82 e0       	ldi	r24, 0x02	; 2
    3f10:	08 95       	ret
    3f12:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3f14:	08 95       	ret

00003f16 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3f16:	bf 92       	push	r11
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	18 2f       	mov	r17, r24
    3f2a:	09 2f       	mov	r16, r25
    3f2c:	7b 01       	movw	r14, r22
    3f2e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3f30:	59 dd       	rcall	.-1358   	; 0x39e4 <Endpoint_WaitUntilReady>
    3f32:	b8 2e       	mov	r11, r24
    3f34:	88 23       	and	r24, r24
    3f36:	a9 f5       	brne	.+106    	; 0x3fa2 <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3f38:	81 2f       	mov	r24, r17
    3f3a:	90 2f       	mov	r25, r16
    3f3c:	9c 01       	movw	r18, r24
    3f3e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3f40:	c1 14       	cp	r12, r1
    3f42:	d1 04       	cpc	r13, r1
    3f44:	39 f0       	breq	.+14     	; 0x3f54 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    3f46:	f6 01       	movw	r30, r12
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	e8 1a       	sub	r14, r24
    3f4e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3f50:	c8 0f       	add	r28, r24
    3f52:	d9 1f       	adc	r29, r25
    3f54:	00 e0       	ldi	r16, 0x00	; 0
    3f56:	10 e0       	ldi	r17, 0x00	; 0
    3f58:	21 c0       	rjmp	.+66     	; 0x3f9c <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3f5a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3f5e:	85 fd       	sbrc	r24, 5
    3f60:	15 c0       	rjmp	.+42     	; 0x3f8c <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3f62:	80 91 e8 00 	lds	r24, 0x00E8
    3f66:	8b 77       	andi	r24, 0x7B	; 123
    3f68:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    3f6c:	c1 14       	cp	r12, r1
    3f6e:	d1 04       	cpc	r13, r1
    3f70:	49 f0       	breq	.+18     	; 0x3f84 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    3f72:	f6 01       	movw	r30, r12
    3f74:	80 81       	ld	r24, Z
    3f76:	91 81       	ldd	r25, Z+1	; 0x01
    3f78:	80 0f       	add	r24, r16
    3f7a:	91 1f       	adc	r25, r17
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	80 83       	st	Z, r24
    3f80:	85 e0       	ldi	r24, 0x05	; 5
    3f82:	10 c0       	rjmp	.+32     	; 0x3fa4 <Endpoint_Read_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3f84:	2f dd       	rcall	.-1442   	; 0x39e4 <Endpoint_WaitUntilReady>
    3f86:	88 23       	and	r24, r24
    3f88:	49 f0       	breq	.+18     	; 0x3f9c <Endpoint_Read_Stream_LE+0x86>
    3f8a:	0c c0       	rjmp	.+24     	; 0x3fa4 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3f8c:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3f90:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    3f92:	08 94       	sec
    3f94:	e1 08       	sbc	r14, r1
    3f96:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    3f98:	0f 5f       	subi	r16, 0xFF	; 255
    3f9a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3f9c:	e1 14       	cp	r14, r1
    3f9e:	f1 04       	cpc	r15, r1
    3fa0:	e1 f6       	brne	.-72     	; 0x3f5a <Endpoint_Read_Stream_LE+0x44>
    3fa2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	0f 91       	pop	r16
    3fac:	ff 90       	pop	r15
    3fae:	ef 90       	pop	r14
    3fb0:	df 90       	pop	r13
    3fb2:	cf 90       	pop	r12
    3fb4:	bf 90       	pop	r11
    3fb6:	08 95       	ret

00003fb8 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    3fb8:	bf 92       	push	r11
    3fba:	cf 92       	push	r12
    3fbc:	df 92       	push	r13
    3fbe:	ef 92       	push	r14
    3fc0:	ff 92       	push	r15
    3fc2:	0f 93       	push	r16
    3fc4:	1f 93       	push	r17
    3fc6:	cf 93       	push	r28
    3fc8:	df 93       	push	r29
    3fca:	8c 01       	movw	r16, r24
    3fcc:	eb 01       	movw	r28, r22
    3fce:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    3fd0:	09 dd       	rcall	.-1518   	; 0x39e4 <Endpoint_WaitUntilReady>
    3fd2:	b8 2e       	mov	r11, r24
    3fd4:	88 23       	and	r24, r24
    3fd6:	b1 f5       	brne	.+108    	; 0x4044 <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    3fd8:	21 97       	sbiw	r28, 0x01	; 1
    3fda:	0c 0f       	add	r16, r28
    3fdc:	1d 1f       	adc	r17, r29
    3fde:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    3fe0:	c1 14       	cp	r12, r1
    3fe2:	d1 04       	cpc	r13, r1
    3fe4:	39 f0       	breq	.+14     	; 0x3ff4 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    3fe6:	f6 01       	movw	r30, r12
    3fe8:	80 81       	ld	r24, Z
    3fea:	91 81       	ldd	r25, Z+1	; 0x01
    3fec:	c8 1b       	sub	r28, r24
    3fee:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    3ff0:	08 1b       	sub	r16, r24
    3ff2:	19 0b       	sbc	r17, r25
    3ff4:	ee 24       	eor	r14, r14
    3ff6:	ff 24       	eor	r15, r15
    3ff8:	23 c0       	rjmp	.+70     	; 0x4040 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3ffa:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3ffe:	85 fd       	sbrc	r24, 5
    4000:	15 c0       	rjmp	.+42     	; 0x402c <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4002:	80 91 e8 00 	lds	r24, 0x00E8
    4006:	8e 77       	andi	r24, 0x7E	; 126
    4008:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    400c:	c1 14       	cp	r12, r1
    400e:	d1 04       	cpc	r13, r1
    4010:	49 f0       	breq	.+18     	; 0x4024 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    4012:	f6 01       	movw	r30, r12
    4014:	80 81       	ld	r24, Z
    4016:	91 81       	ldd	r25, Z+1	; 0x01
    4018:	8e 0d       	add	r24, r14
    401a:	9f 1d       	adc	r25, r15
    401c:	91 83       	std	Z+1, r25	; 0x01
    401e:	80 83       	st	Z, r24
    4020:	85 e0       	ldi	r24, 0x05	; 5
    4022:	11 c0       	rjmp	.+34     	; 0x4046 <Endpoint_Write_Stream_BE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    4024:	df dc       	rcall	.-1602   	; 0x39e4 <Endpoint_WaitUntilReady>
    4026:	88 23       	and	r24, r24
    4028:	59 f0       	breq	.+22     	; 0x4040 <Endpoint_Write_Stream_BE+0x88>
    402a:	0d c0       	rjmp	.+26     	; 0x4046 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    402c:	f8 01       	movw	r30, r16
    402e:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4030:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    4034:	01 50       	subi	r16, 0x01	; 1
    4036:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    4038:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    403a:	08 94       	sec
    403c:	e1 1c       	adc	r14, r1
    403e:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    4040:	20 97       	sbiw	r28, 0x00	; 0
    4042:	d9 f6       	brne	.-74     	; 0x3ffa <Endpoint_Write_Stream_BE+0x42>
    4044:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	ff 90       	pop	r15
    4050:	ef 90       	pop	r14
    4052:	df 90       	pop	r13
    4054:	cf 90       	pop	r12
    4056:	bf 90       	pop	r11
    4058:	08 95       	ret

0000405a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    405a:	bf 92       	push	r11
    405c:	cf 92       	push	r12
    405e:	df 92       	push	r13
    4060:	ef 92       	push	r14
    4062:	ff 92       	push	r15
    4064:	0f 93       	push	r16
    4066:	1f 93       	push	r17
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	18 2f       	mov	r17, r24
    406e:	09 2f       	mov	r16, r25
    4070:	7b 01       	movw	r14, r22
    4072:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    4074:	b7 dc       	rcall	.-1682   	; 0x39e4 <Endpoint_WaitUntilReady>
    4076:	b8 2e       	mov	r11, r24
    4078:	88 23       	and	r24, r24
    407a:	a9 f5       	brne	.+106    	; 0x40e6 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    407c:	81 2f       	mov	r24, r17
    407e:	90 2f       	mov	r25, r16
    4080:	9c 01       	movw	r18, r24
    4082:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    4084:	c1 14       	cp	r12, r1
    4086:	d1 04       	cpc	r13, r1
    4088:	39 f0       	breq	.+14     	; 0x4098 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    408a:	f6 01       	movw	r30, r12
    408c:	80 81       	ld	r24, Z
    408e:	91 81       	ldd	r25, Z+1	; 0x01
    4090:	e8 1a       	sub	r14, r24
    4092:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    4094:	c8 0f       	add	r28, r24
    4096:	d9 1f       	adc	r29, r25
    4098:	00 e0       	ldi	r16, 0x00	; 0
    409a:	10 e0       	ldi	r17, 0x00	; 0
    409c:	21 c0       	rjmp	.+66     	; 0x40e0 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    409e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    40a2:	85 fd       	sbrc	r24, 5
    40a4:	15 c0       	rjmp	.+42     	; 0x40d0 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    40a6:	80 91 e8 00 	lds	r24, 0x00E8
    40aa:	8e 77       	andi	r24, 0x7E	; 126
    40ac:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    40b0:	c1 14       	cp	r12, r1
    40b2:	d1 04       	cpc	r13, r1
    40b4:	49 f0       	breq	.+18     	; 0x40c8 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    40b6:	f6 01       	movw	r30, r12
    40b8:	80 81       	ld	r24, Z
    40ba:	91 81       	ldd	r25, Z+1	; 0x01
    40bc:	80 0f       	add	r24, r16
    40be:	91 1f       	adc	r25, r17
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	80 83       	st	Z, r24
    40c4:	85 e0       	ldi	r24, 0x05	; 5
    40c6:	10 c0       	rjmp	.+32     	; 0x40e8 <Endpoint_Write_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    40c8:	8d dc       	rcall	.-1766   	; 0x39e4 <Endpoint_WaitUntilReady>
    40ca:	88 23       	and	r24, r24
    40cc:	49 f0       	breq	.+18     	; 0x40e0 <Endpoint_Write_Stream_LE+0x86>
    40ce:	0c c0       	rjmp	.+24     	; 0x40e8 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    40d0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    40d2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    40d6:	08 94       	sec
    40d8:	e1 08       	sbc	r14, r1
    40da:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    40dc:	0f 5f       	subi	r16, 0xFF	; 255
    40de:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    40e0:	e1 14       	cp	r14, r1
    40e2:	f1 04       	cpc	r15, r1
    40e4:	e1 f6       	brne	.-72     	; 0x409e <Endpoint_Write_Stream_LE+0x44>
    40e6:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	df 90       	pop	r13
    40f6:	cf 90       	pop	r12
    40f8:	bf 90       	pop	r11
    40fa:	08 95       	ret

000040fc <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    40fc:	df 92       	push	r13
    40fe:	ef 92       	push	r14
    4100:	ff 92       	push	r15
    4102:	0f 93       	push	r16
    4104:	1f 93       	push	r17
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	ec 01       	movw	r28, r24
    410c:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    410e:	6a dc       	rcall	.-1836   	; 0x39e4 <Endpoint_WaitUntilReady>
    4110:	d8 2e       	mov	r13, r24
    4112:	88 23       	and	r24, r24
    4114:	61 f5       	brne	.+88     	; 0x416e <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    4116:	01 15       	cp	r16, r1
    4118:	11 05       	cpc	r17, r1
    411a:	29 f0       	breq	.+10     	; 0x4126 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    411c:	f8 01       	movw	r30, r16
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	c8 1b       	sub	r28, r24
    4124:	d9 0b       	sbc	r29, r25
    4126:	ee 24       	eor	r14, r14
    4128:	ff 24       	eor	r15, r15
    412a:	1f c0       	rjmp	.+62     	; 0x416a <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    412c:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    4130:	85 fd       	sbrc	r24, 5
    4132:	15 c0       	rjmp	.+42     	; 0x415e <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4134:	80 91 e8 00 	lds	r24, 0x00E8
    4138:	8e 77       	andi	r24, 0x7E	; 126
    413a:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    413e:	01 15       	cp	r16, r1
    4140:	11 05       	cpc	r17, r1
    4142:	49 f0       	breq	.+18     	; 0x4156 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    4144:	f8 01       	movw	r30, r16
    4146:	80 81       	ld	r24, Z
    4148:	91 81       	ldd	r25, Z+1	; 0x01
    414a:	8e 0d       	add	r24, r14
    414c:	9f 1d       	adc	r25, r15
    414e:	91 83       	std	Z+1, r25	; 0x01
    4150:	80 83       	st	Z, r24
    4152:	85 e0       	ldi	r24, 0x05	; 5
    4154:	0d c0       	rjmp	.+26     	; 0x4170 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    4156:	46 dc       	rcall	.-1908   	; 0x39e4 <Endpoint_WaitUntilReady>
    4158:	88 23       	and	r24, r24
    415a:	39 f0       	breq	.+14     	; 0x416a <Endpoint_Null_Stream+0x6e>
    415c:	09 c0       	rjmp	.+18     	; 0x4170 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    415e:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    4162:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    4164:	08 94       	sec
    4166:	e1 1c       	adc	r14, r1
    4168:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    416a:	20 97       	sbiw	r28, 0x00	; 0
    416c:	f9 f6       	brne	.-66     	; 0x412c <Endpoint_Null_Stream+0x30>
    416e:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	1f 91       	pop	r17
    4176:	0f 91       	pop	r16
    4178:	ff 90       	pop	r15
    417a:	ef 90       	pop	r14
    417c:	df 90       	pop	r13
    417e:	08 95       	ret

00004180 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    4180:	0f 93       	push	r16
    4182:	1f 93       	push	r17
    4184:	df 93       	push	r29
    4186:	cf 93       	push	r28
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
    418c:	ac 97       	sbiw	r28, 0x2c	; 44
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	ec e2       	ldi	r30, 0x2C	; 44
    419a:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    419c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    41a0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    41a2:	26 e0       	ldi	r18, 0x06	; 6
    41a4:	e4 33       	cpi	r30, 0x34	; 52
    41a6:	f2 07       	cpc	r31, r18
    41a8:	c9 f7       	brne	.-14     	; 0x419c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    41aa:	0e 94 87 01 	call	0x30e	; 0x30e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    41ae:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    41b2:	83 ff       	sbrs	r24, 3
    41b4:	38 c1       	rjmp	.+624    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    41b6:	80 91 2c 06 	lds	r24, 0x062C

		switch (USB_ControlRequest.bRequest)
    41ba:	30 91 2d 06 	lds	r19, 0x062D
    41be:	35 30       	cpi	r19, 0x05	; 5
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <USB_Device_ProcessControlRequest+0x44>
    41c2:	87 c0       	rjmp	.+270    	; 0x42d2 <USB_Device_ProcessControlRequest+0x152>
    41c4:	36 30       	cpi	r19, 0x06	; 6
    41c6:	40 f4       	brcc	.+16     	; 0x41d8 <USB_Device_ProcessControlRequest+0x58>
    41c8:	31 30       	cpi	r19, 0x01	; 1
    41ca:	c9 f1       	breq	.+114    	; 0x423e <USB_Device_ProcessControlRequest+0xbe>
    41cc:	31 30       	cpi	r19, 0x01	; 1
    41ce:	70 f0       	brcs	.+28     	; 0x41ec <USB_Device_ProcessControlRequest+0x6c>
    41d0:	33 30       	cpi	r19, 0x03	; 3
    41d2:	09 f0       	breq	.+2      	; 0x41d6 <USB_Device_ProcessControlRequest+0x56>
    41d4:	28 c1       	rjmp	.+592    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
    41d6:	33 c0       	rjmp	.+102    	; 0x423e <USB_Device_ProcessControlRequest+0xbe>
    41d8:	38 30       	cpi	r19, 0x08	; 8
    41da:	09 f4       	brne	.+2      	; 0x41de <USB_Device_ProcessControlRequest+0x5e>
    41dc:	f6 c0       	rjmp	.+492    	; 0x43ca <USB_Device_ProcessControlRequest+0x24a>
    41de:	39 30       	cpi	r19, 0x09	; 9
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <USB_Device_ProcessControlRequest+0x64>
    41e2:	05 c1       	rjmp	.+522    	; 0x43ee <USB_Device_ProcessControlRequest+0x26e>
    41e4:	36 30       	cpi	r19, 0x06	; 6
    41e6:	09 f0       	breq	.+2      	; 0x41ea <USB_Device_ProcessControlRequest+0x6a>
    41e8:	1e c1       	rjmp	.+572    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
    41ea:	96 c0       	rjmp	.+300    	; 0x4318 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    41ec:	80 38       	cpi	r24, 0x80	; 128
    41ee:	21 f0       	breq	.+8      	; 0x41f8 <USB_Device_ProcessControlRequest+0x78>
    41f0:	82 38       	cpi	r24, 0x82	; 130
    41f2:	09 f0       	breq	.+2      	; 0x41f6 <USB_Device_ProcessControlRequest+0x76>
    41f4:	18 c1       	rjmp	.+560    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
    41f6:	08 c0       	rjmp	.+16     	; 0x4208 <USB_Device_ProcessControlRequest+0x88>
    41f8:	90 91 29 06 	lds	r25, 0x0629
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    41fc:	80 91 2a 06 	lds	r24, 0x062A
    4200:	88 23       	and	r24, r24
    4202:	99 f0       	breq	.+38     	; 0x422a <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    4204:	92 60       	ori	r25, 0x02	; 2
    4206:	11 c0       	rjmp	.+34     	; 0x422a <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    4208:	80 91 30 06 	lds	r24, 0x0630
    420c:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    420e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4212:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	25 e0       	ldi	r18, 0x05	; 5
    421a:	96 95       	lsr	r25
    421c:	87 95       	ror	r24
    421e:	2a 95       	dec	r18
    4220:	e1 f7       	brne	.-8      	; 0x421a <USB_Device_ProcessControlRequest+0x9a>
    4222:	98 2f       	mov	r25, r24
    4224:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4226:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    422a:	80 91 e8 00 	lds	r24, 0x00E8
    422e:	87 7f       	andi	r24, 0xF7	; 247
    4230:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    4234:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    4238:	10 92 f1 00 	sts	0x00F1, r1
    423c:	d1 c0       	rjmp	.+418    	; 0x43e0 <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    423e:	88 23       	and	r24, r24
    4240:	19 f0       	breq	.+6      	; 0x4248 <USB_Device_ProcessControlRequest+0xc8>
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	09 f0       	breq	.+2      	; 0x4248 <USB_Device_ProcessControlRequest+0xc8>
    4246:	ef c0       	rjmp	.+478    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	8f 71       	andi	r24, 0x1F	; 31
    424c:	90 70       	andi	r25, 0x00	; 0
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	21 f0       	breq	.+8      	; 0x425a <USB_Device_ProcessControlRequest+0xda>
    4252:	02 97       	sbiw	r24, 0x02	; 2
    4254:	09 f0       	breq	.+2      	; 0x4258 <USB_Device_ProcessControlRequest+0xd8>
    4256:	e7 c0       	rjmp	.+462    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
    4258:	0c c0       	rjmp	.+24     	; 0x4272 <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    425a:	80 91 2e 06 	lds	r24, 0x062E
    425e:	81 30       	cpi	r24, 0x01	; 1
    4260:	09 f0       	breq	.+2      	; 0x4264 <USB_Device_ProcessControlRequest+0xe4>
    4262:	e1 c0       	rjmp	.+450    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    4264:	10 92 2a 06 	sts	0x062A, r1
    4268:	33 30       	cpi	r19, 0x03	; 3
    426a:	69 f5       	brne	.+90     	; 0x42c6 <USB_Device_ProcessControlRequest+0x146>
    426c:	80 93 2a 06 	sts	0x062A, r24
    4270:	2a c0       	rjmp	.+84     	; 0x42c6 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    4272:	80 91 2e 06 	lds	r24, 0x062E
    4276:	88 23       	and	r24, r24
    4278:	31 f5       	brne	.+76     	; 0x42c6 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    427a:	20 91 30 06 	lds	r18, 0x0630
    427e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    4280:	09 f4       	brne	.+2      	; 0x4284 <USB_Device_ProcessControlRequest+0x104>
    4282:	d1 c0       	rjmp	.+418    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4284:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    4288:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    428c:	80 ff       	sbrs	r24, 0
    428e:	1b c0       	rjmp	.+54     	; 0x42c6 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    4290:	33 30       	cpi	r19, 0x03	; 3
    4292:	21 f4       	brne	.+8      	; 0x429c <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4294:	80 91 eb 00 	lds	r24, 0x00EB
    4298:	80 62       	ori	r24, 0x20	; 32
    429a:	13 c0       	rjmp	.+38     	; 0x42c2 <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    429c:	80 91 eb 00 	lds	r24, 0x00EB
    42a0:	80 61       	ori	r24, 0x10	; 16
    42a2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	02 c0       	rjmp	.+4      	; 0x42b0 <USB_Device_ProcessControlRequest+0x130>
    42ac:	88 0f       	add	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	2a 95       	dec	r18
    42b2:	e2 f7       	brpl	.-8      	; 0x42ac <USB_Device_ProcessControlRequest+0x12c>
    42b4:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    42b8:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    42bc:	80 91 eb 00 	lds	r24, 0x00EB
    42c0:	88 60       	ori	r24, 0x08	; 8
    42c2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    42c6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    42ca:	80 91 e8 00 	lds	r24, 0x00E8
    42ce:	87 7f       	andi	r24, 0xF7	; 247
    42d0:	8a c0       	rjmp	.+276    	; 0x43e6 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    42d2:	88 23       	and	r24, r24
    42d4:	09 f0       	breq	.+2      	; 0x42d8 <USB_Device_ProcessControlRequest+0x158>
    42d6:	a7 c0       	rjmp	.+334    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    42d8:	10 91 2e 06 	lds	r17, 0x062E
    42dc:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    42de:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    42e0:	f8 94       	cli
    42e2:	80 91 e8 00 	lds	r24, 0x00E8
    42e6:	87 7f       	andi	r24, 0xF7	; 247
    42e8:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    42ec:	5c db       	rcall	.-2376   	; 0x39a6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    42ee:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    42f2:	80 ff       	sbrs	r24, 0
    42f4:	fc cf       	rjmp	.-8      	; 0x42ee <USB_Device_ProcessControlRequest+0x16e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    42f6:	80 91 e3 00 	lds	r24, 0x00E3
    42fa:	80 78       	andi	r24, 0x80	; 128
    42fc:	81 2b       	or	r24, r17

				UDADDR = Temp;
    42fe:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    4302:	80 68       	ori	r24, 0x80	; 128
    4304:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    4308:	11 23       	and	r17, r17
    430a:	11 f4       	brne	.+4      	; 0x4310 <USB_Device_ProcessControlRequest+0x190>
    430c:	82 e0       	ldi	r24, 0x02	; 2
    430e:	01 c0       	rjmp	.+2      	; 0x4312 <USB_Device_ProcessControlRequest+0x192>
    4310:	83 e0       	ldi	r24, 0x03	; 3
    4312:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4314:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    4316:	87 c0       	rjmp	.+270    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    4318:	80 58       	subi	r24, 0x80	; 128
    431a:	82 30       	cpi	r24, 0x02	; 2
    431c:	08 f0       	brcs	.+2      	; 0x4320 <USB_Device_ProcessControlRequest+0x1a0>
    431e:	83 c0       	rjmp	.+262    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    4320:	80 91 2e 06 	lds	r24, 0x062E
    4324:	90 91 2f 06 	lds	r25, 0x062F
    4328:	23 e0       	ldi	r18, 0x03	; 3
    432a:	8c 3d       	cpi	r24, 0xDC	; 220
    432c:	92 07       	cpc	r25, r18
    432e:	09 f0       	breq	.+2      	; 0x4332 <USB_Device_ProcessControlRequest+0x1b2>
    4330:	33 c0       	rjmp	.+102    	; 0x4398 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    4336:	8a e2       	ldi	r24, 0x2A	; 42
    4338:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    433a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    433c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    433e:	de 01       	movw	r26, r28
    4340:	15 96       	adiw	r26, 0x05	; 5
    4342:	6e e0       	ldi	r22, 0x0E	; 14
    4344:	40 e0       	ldi	r20, 0x00	; 0
    4346:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    4348:	11 e2       	ldi	r17, 0x21	; 33
    434a:	e6 2f       	mov	r30, r22
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	10 93 57 00 	sts	0x0057, r17
    4352:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    4354:	40 ff       	sbrs	r20, 0
    4356:	03 c0       	rjmp	.+6      	; 0x435e <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    4358:	82 95       	swap	r24
    435a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    435c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    435e:	8f 70       	andi	r24, 0x0F	; 15
    4360:	28 2f       	mov	r18, r24
    4362:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    4364:	8a 30       	cpi	r24, 0x0A	; 10
    4366:	18 f0       	brcs	.+6      	; 0x436e <USB_Device_ProcessControlRequest+0x1ee>
    4368:	c9 01       	movw	r24, r18
    436a:	c7 96       	adiw	r24, 0x37	; 55
    436c:	02 c0       	rjmp	.+4      	; 0x4372 <USB_Device_ProcessControlRequest+0x1f2>
    436e:	c9 01       	movw	r24, r18
    4370:	c0 96       	adiw	r24, 0x30	; 48
    4372:	8d 93       	st	X+, r24
    4374:	9d 93       	st	X+, r25
    4376:	4f 5f       	subi	r20, 0xFF	; 255
    4378:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    437a:	44 31       	cpi	r20, 0x14	; 20
    437c:	51 05       	cpc	r21, r1
    437e:	29 f7       	brne	.-54     	; 0x434a <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    4380:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4382:	80 91 e8 00 	lds	r24, 0x00E8
    4386:	87 7f       	andi	r24, 0xF7	; 247
    4388:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    438c:	ce 01       	movw	r24, r28
    438e:	03 96       	adiw	r24, 0x03	; 3
    4390:	6a e2       	ldi	r22, 0x2A	; 42
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	b2 dc       	rcall	.-1692   	; 0x3cfa <Endpoint_Write_Control_Stream_LE>
    4396:	13 c0       	rjmp	.+38     	; 0x43be <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    4398:	60 91 30 06 	lds	r22, 0x0630
    439c:	ae 01       	movw	r20, r28
    439e:	4f 5f       	subi	r20, 0xFF	; 255
    43a0:	5f 4f       	sbci	r21, 0xFF	; 255
    43a2:	0e 94 32 03 	call	0x664	; 0x664 <CALLBACK_USB_GetDescriptor>
    43a6:	bc 01       	movw	r22, r24
    43a8:	00 97       	sbiw	r24, 0x00	; 0
    43aa:	09 f4       	brne	.+2      	; 0x43ae <USB_Device_ProcessControlRequest+0x22e>
    43ac:	3c c0       	rjmp	.+120    	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
    43ae:	80 91 e8 00 	lds	r24, 0x00E8
    43b2:	87 7f       	andi	r24, 0xF7	; 247
    43b4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	9a 81       	ldd	r25, Y+2	; 0x02
    43bc:	46 dd       	rcall	.-1396   	; 0x3e4a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    43be:	80 91 e8 00 	lds	r24, 0x00E8
    43c2:	8b 77       	andi	r24, 0x7B	; 123
    43c4:	80 93 e8 00 	sts	0x00E8, r24
    43c8:	2e c0       	rjmp	.+92     	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    43ca:	80 38       	cpi	r24, 0x80	; 128
    43cc:	61 f5       	brne	.+88     	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    43ce:	80 91 e8 00 	lds	r24, 0x00E8
    43d2:	87 7f       	andi	r24, 0xF7	; 247
    43d4:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    43d8:	80 91 28 06 	lds	r24, 0x0628
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    43dc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    43e0:	80 91 e8 00 	lds	r24, 0x00E8
    43e4:	8e 77       	andi	r24, 0x7E	; 126
    43e6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    43ea:	dd da       	rcall	.-2630   	; 0x39a6 <Endpoint_ClearStatusStage>
    43ec:	1c c0       	rjmp	.+56     	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    43ee:	88 23       	and	r24, r24
    43f0:	d1 f4       	brne	.+52     	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    43f2:	90 91 2e 06 	lds	r25, 0x062E
    43f6:	92 30       	cpi	r25, 0x02	; 2
    43f8:	b0 f4       	brcc	.+44     	; 0x4426 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    43fa:	80 91 e8 00 	lds	r24, 0x00E8
    43fe:	87 7f       	andi	r24, 0xF7	; 247
    4400:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    4404:	90 93 28 06 	sts	0x0628, r25

	Endpoint_ClearStatusStage();
    4408:	ce da       	rcall	.-2660   	; 0x39a6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    440a:	80 91 28 06 	lds	r24, 0x0628
    440e:	88 23       	and	r24, r24
    4410:	31 f4       	brne	.+12     	; 0x441e <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    4412:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4416:	87 fd       	sbrc	r24, 7
    4418:	02 c0       	rjmp	.+4      	; 0x441e <USB_Device_ProcessControlRequest+0x29e>
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	01 c0       	rjmp	.+2      	; 0x4420 <USB_Device_ProcessControlRequest+0x2a0>
    441e:	84 e0       	ldi	r24, 0x04	; 4
    4420:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    4422:	0e 94 8f 01 	call	0x31e	; 0x31e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4426:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    442a:	83 ff       	sbrs	r24, 3
    442c:	0a c0       	rjmp	.+20     	; 0x4442 <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    442e:	80 91 eb 00 	lds	r24, 0x00EB
    4432:	80 62       	ori	r24, 0x20	; 32
    4434:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4438:	80 91 e8 00 	lds	r24, 0x00E8
    443c:	87 7f       	andi	r24, 0xF7	; 247
    443e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    4442:	ac 96       	adiw	r28, 0x2c	; 44
    4444:	0f b6       	in	r0, 0x3f	; 63
    4446:	f8 94       	cli
    4448:	de bf       	out	0x3e, r29	; 62
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	cd bf       	out	0x3d, r28	; 61
    444e:	cf 91       	pop	r28
    4450:	df 91       	pop	r29
    4452:	1f 91       	pop	r17
    4454:	0f 91       	pop	r16
    4456:	08 95       	ret

00004458 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    4458:	08 95       	ret

0000445a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    445a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    445c:	8e b3       	in	r24, 0x1e	; 30
    445e:	88 23       	and	r24, r24
    4460:	61 f0       	breq	.+24     	; 0x447a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    4462:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4466:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    446a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    446e:	83 ff       	sbrs	r24, 3
    4470:	01 c0       	rjmp	.+2      	; 0x4474 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    4472:	86 de       	rcall	.-756    	; 0x4180 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    4474:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4476:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    447a:	1f 91       	pop	r17
    447c:	08 95       	ret

0000447e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    447e:	4f 92       	push	r4
    4480:	5f 92       	push	r5
    4482:	6f 92       	push	r6
    4484:	7f 92       	push	r7
    4486:	8f 92       	push	r8
    4488:	9f 92       	push	r9
    448a:	af 92       	push	r10
    448c:	bf 92       	push	r11
    448e:	cf 92       	push	r12
    4490:	df 92       	push	r13
    4492:	ef 92       	push	r14
    4494:	ff 92       	push	r15
    4496:	0f 93       	push	r16
    4498:	1f 93       	push	r17
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <HID_Device_USBTask+0x22>
    44a0:	0f 92       	push	r0
    44a2:	cd b7       	in	r28, 0x3d	; 61
    44a4:	de b7       	in	r29, 0x3e	; 62
    44a6:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
    44a8:	6d b6       	in	r6, 0x3d	; 61
    44aa:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    44ac:	8e b3       	in	r24, 0x1e	; 30
    44ae:	84 30       	cpi	r24, 0x04	; 4
    44b0:	09 f0       	breq	.+2      	; 0x44b4 <HID_Device_USBTask+0x36>
    44b2:	86 c0       	rjmp	.+268    	; 0x45c0 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    44b4:	f7 01       	movw	r30, r14
    44b6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    44b8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    44bc:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    44c0:	85 ff       	sbrs	r24, 5
    44c2:	7e c0       	rjmp	.+252    	; 0x45c0 <HID_Device_USBTask+0x142>
    44c4:	5d b6       	in	r5, 0x3d	; 61
    44c6:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    44c8:	47 81       	ldd	r20, Z+7	; 0x07
    44ca:	8d b7       	in	r24, 0x3d	; 61
    44cc:	9e b7       	in	r25, 0x3e	; 62
    44ce:	84 1b       	sub	r24, r20
    44d0:	91 09       	sbc	r25, r1
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	9e bf       	out	0x3e, r25	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	8d bf       	out	0x3d, r24	; 61
    44dc:	0d b7       	in	r16, 0x3d	; 61
    44de:	1e b7       	in	r17, 0x3e	; 62
    44e0:	0f 5f       	subi	r16, 0xFF	; 255
    44e2:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    44e4:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    44e6:	1b 82       	std	Y+3, r1	; 0x03
    44e8:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    44ea:	c0 2e       	mov	r12, r16
    44ec:	91 2e       	mov	r9, r17
    44ee:	c8 01       	movw	r24, r16
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	70 e0       	ldi	r23, 0x00	; 0
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	48 d5       	rcall	.+2704   	; 0x4f88 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    44f8:	c7 01       	movw	r24, r14
    44fa:	be 01       	movw	r22, r28
    44fc:	6f 5f       	subi	r22, 0xFF	; 255
    44fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4500:	40 e0       	ldi	r20, 0x00	; 0
    4502:	98 01       	movw	r18, r16
    4504:	8e 01       	movw	r16, r28
    4506:	0e 5f       	subi	r16, 0xFE	; 254
    4508:	1f 4f       	sbci	r17, 0xFF	; 255
    450a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <CALLBACK_HID_Device_CreateHIDReport>
    450e:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    4510:	f7 01       	movw	r30, r14
    4512:	81 85       	ldd	r24, Z+9	; 0x09
    4514:	92 85       	ldd	r25, Z+10	; 0x0a
    4516:	89 2b       	or	r24, r25
    4518:	19 f4       	brne	.+6      	; 0x4520 <HID_Device_USBTask+0xa2>
    451a:	aa 24       	eor	r10, r10
    451c:	bb 24       	eor	r11, r11
    451e:	0b c0       	rjmp	.+22     	; 0x4536 <HID_Device_USBTask+0xb8>
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	f7 01       	movw	r30, r14
    4524:	83 85       	ldd	r24, Z+11	; 0x0b
    4526:	94 85       	ldd	r25, Z+12	; 0x0c
    4528:	89 2b       	or	r24, r25
    452a:	09 f0       	breq	.+2      	; 0x452e <HID_Device_USBTask+0xb0>
    452c:	21 e0       	ldi	r18, 0x01	; 1
    452e:	81 e0       	ldi	r24, 0x01	; 1
    4530:	28 27       	eor	r18, r24
    4532:	a2 2e       	mov	r10, r18
    4534:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    4536:	f7 01       	movw	r30, r14
    4538:	05 81       	ldd	r16, Z+5	; 0x05
    453a:	16 81       	ldd	r17, Z+6	; 0x06
    453c:	01 15       	cp	r16, r1
    453e:	11 05       	cpc	r17, r1
    4540:	11 f4       	brne	.+4      	; 0x4546 <HID_Device_USBTask+0xc8>
    4542:	dd 24       	eor	r13, r13
    4544:	12 c0       	rjmp	.+36     	; 0x456a <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    4546:	4a 81       	ldd	r20, Y+2	; 0x02
    4548:	5b 81       	ldd	r21, Y+3	; 0x03
    454a:	8c 2d       	mov	r24, r12
    454c:	99 2d       	mov	r25, r9
    454e:	b8 01       	movw	r22, r16
    4550:	05 d5       	rcall	.+2570   	; 0x4f5c <memcmp>
    4552:	dd 24       	eor	r13, r13
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	11 f0       	breq	.+4      	; 0x455c <HID_Device_USBTask+0xde>
    4558:	dd 24       	eor	r13, r13
    455a:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    455c:	f7 01       	movw	r30, r14
    455e:	47 81       	ldd	r20, Z+7	; 0x07
    4560:	c8 01       	movw	r24, r16
    4562:	6c 2d       	mov	r22, r12
    4564:	79 2d       	mov	r23, r9
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	06 d5       	rcall	.+2572   	; 0x4f76 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    456a:	8a 81       	ldd	r24, Y+2	; 0x02
    456c:	9b 81       	ldd	r25, Y+3	; 0x03
    456e:	89 2b       	or	r24, r25
    4570:	f9 f0       	breq	.+62     	; 0x45b0 <HID_Device_USBTask+0x132>
    4572:	88 20       	and	r8, r8
    4574:	21 f4       	brne	.+8      	; 0x457e <HID_Device_USBTask+0x100>
    4576:	dd 20       	and	r13, r13
    4578:	11 f4       	brne	.+4      	; 0x457e <HID_Device_USBTask+0x100>
    457a:	ab 28       	or	r10, r11
    457c:	c9 f0       	breq	.+50     	; 0x45b0 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    457e:	f7 01       	movw	r30, r14
    4580:	81 85       	ldd	r24, Z+9	; 0x09
    4582:	92 85       	ldd	r25, Z+10	; 0x0a
    4584:	94 87       	std	Z+12, r25	; 0x0c
    4586:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    4588:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    458a:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	88 23       	and	r24, r24
    4592:	11 f0       	breq	.+4      	; 0x4598 <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4594:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    4598:	6a 81       	ldd	r22, Y+2	; 0x02
    459a:	7b 81       	ldd	r23, Y+3	; 0x03
    459c:	8c 2d       	mov	r24, r12
    459e:	99 2d       	mov	r25, r9
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	5a dd       	rcall	.-1356   	; 0x405a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    45a6:	80 91 e8 00 	lds	r24, 0x00E8
    45aa:	8e 77       	andi	r24, 0x7E	; 126
    45ac:	80 93 e8 00 	sts	0x00E8, r24
    45b0:	85 2d       	mov	r24, r5
    45b2:	94 2d       	mov	r25, r4
    45b4:	9c 01       	movw	r18, r24
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	3e bf       	out	0x3e, r19	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    45c0:	0f b6       	in	r0, 0x3f	; 63
    45c2:	f8 94       	cli
    45c4:	7e be       	out	0x3e, r7	; 62
    45c6:	0f be       	out	0x3f, r0	; 63
    45c8:	6d be       	out	0x3d, r6	; 61
    45ca:	0f 90       	pop	r0
    45cc:	0f 90       	pop	r0
    45ce:	0f 90       	pop	r0
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	1f 91       	pop	r17
    45d6:	0f 91       	pop	r16
    45d8:	ff 90       	pop	r15
    45da:	ef 90       	pop	r14
    45dc:	df 90       	pop	r13
    45de:	cf 90       	pop	r12
    45e0:	bf 90       	pop	r11
    45e2:	af 90       	pop	r10
    45e4:	9f 90       	pop	r9
    45e6:	8f 90       	pop	r8
    45e8:	7f 90       	pop	r7
    45ea:	6f 90       	pop	r6
    45ec:	5f 90       	pop	r5
    45ee:	4f 90       	pop	r4
    45f0:	08 95       	ret

000045f2 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    45f2:	cf 93       	push	r28
    45f4:	df 93       	push	r29
    45f6:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    45f8:	08 96       	adiw	r24, 0x08	; 8
    45fa:	fc 01       	movw	r30, r24
    45fc:	85 e0       	ldi	r24, 0x05	; 5
    45fe:	ef 01       	movw	r28, r30
    4600:	19 92       	st	Y+, r1
    4602:	8a 95       	dec	r24
    4604:	e9 f7       	brne	.-6      	; 0x4600 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	18 96       	adiw	r26, 0x08	; 8
    460a:	8c 93       	st	X, r24
    460c:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
    460e:	84 ef       	ldi	r24, 0xF4	; 244
    4610:	91 e0       	ldi	r25, 0x01	; 1
    4612:	1a 96       	adiw	r26, 0x0a	; 10
    4614:	9c 93       	st	X, r25
    4616:	8e 93       	st	-X, r24
    4618:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    461a:	11 96       	adiw	r26, 0x01	; 1
    461c:	3c 91       	ld	r19, X
    461e:	11 97       	sbiw	r26, 0x01	; 1
    4620:	12 96       	adiw	r26, 0x02	; 2
    4622:	6d 91       	ld	r22, X+
    4624:	7c 91       	ld	r23, X
    4626:	13 97       	sbiw	r26, 0x03	; 3
    4628:	14 96       	adiw	r26, 0x04	; 4
    462a:	8c 91       	ld	r24, X
    462c:	88 23       	and	r24, r24
    462e:	11 f4       	brne	.+4      	; 0x4634 <HID_Device_ConfigureEndpoints+0x42>
    4630:	40 e0       	ldi	r20, 0x00	; 0
    4632:	01 c0       	rjmp	.+2      	; 0x4636 <HID_Device_ConfigureEndpoints+0x44>
    4634:	44 e0       	ldi	r20, 0x04	; 4
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	88 e0       	ldi	r24, 0x08	; 8
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    463e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    4640:	88 0f       	add	r24, r24
    4642:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4644:	86 17       	cp	r24, r22
    4646:	97 07       	cpc	r25, r23
    4648:	d0 f3       	brcs	.-12     	; 0x463e <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    464a:	42 60       	ori	r20, 0x02	; 2
    464c:	22 95       	swap	r18
    464e:	20 7f       	andi	r18, 0xF0	; 240
    4650:	42 2b       	or	r20, r18
    4652:	83 2f       	mov	r24, r19
    4654:	61 ec       	ldi	r22, 0xC1	; 193
    4656:	72 d9       	rcall	.-3356   	; 0x393c <Endpoint_ConfigureEndpoint_Prv>
    4658:	81 11       	cpse	r24, r1
    465a:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	08 95       	ret

00004662 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    4662:	6f 92       	push	r6
    4664:	7f 92       	push	r7
    4666:	8f 92       	push	r8
    4668:	9f 92       	push	r9
    466a:	af 92       	push	r10
    466c:	bf 92       	push	r11
    466e:	cf 92       	push	r12
    4670:	df 92       	push	r13
    4672:	ef 92       	push	r14
    4674:	ff 92       	push	r15
    4676:	0f 93       	push	r16
    4678:	1f 93       	push	r17
    467a:	df 93       	push	r29
    467c:	cf 93       	push	r28
    467e:	00 d0       	rcall	.+0      	; 0x4680 <HID_Device_ProcessControlRequest+0x1e>
    4680:	0f 92       	push	r0
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    4688:	6d b6       	in	r6, 0x3d	; 61
    468a:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    468c:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    4690:	83 ff       	sbrs	r24, 3
    4692:	0c c1       	rjmp	.+536    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    4694:	f6 01       	movw	r30, r12
    4696:	80 81       	ld	r24, Z
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	20 91 30 06 	lds	r18, 0x0630
    469e:	30 91 31 06 	lds	r19, 0x0631
    46a2:	28 17       	cp	r18, r24
    46a4:	39 07       	cpc	r19, r25
    46a6:	09 f0       	breq	.+2      	; 0x46aa <HID_Device_ProcessControlRequest+0x48>
    46a8:	01 c1       	rjmp	.+514    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
	  return;

	switch (USB_ControlRequest.bRequest)
    46aa:	80 91 2d 06 	lds	r24, 0x062D
    46ae:	83 30       	cpi	r24, 0x03	; 3
    46b0:	09 f4       	brne	.+2      	; 0x46b4 <HID_Device_ProcessControlRequest+0x52>
    46b2:	ac c0       	rjmp	.+344    	; 0x480c <HID_Device_ProcessControlRequest+0x1aa>
    46b4:	84 30       	cpi	r24, 0x04	; 4
    46b6:	30 f4       	brcc	.+12     	; 0x46c4 <HID_Device_ProcessControlRequest+0x62>
    46b8:	81 30       	cpi	r24, 0x01	; 1
    46ba:	71 f0       	breq	.+28     	; 0x46d8 <HID_Device_ProcessControlRequest+0x76>
    46bc:	82 30       	cpi	r24, 0x02	; 2
    46be:	09 f0       	breq	.+2      	; 0x46c2 <HID_Device_ProcessControlRequest+0x60>
    46c0:	f5 c0       	rjmp	.+490    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    46c2:	dc c0       	rjmp	.+440    	; 0x487c <HID_Device_ProcessControlRequest+0x21a>
    46c4:	8a 30       	cpi	r24, 0x0A	; 10
    46c6:	09 f4       	brne	.+2      	; 0x46ca <HID_Device_ProcessControlRequest+0x68>
    46c8:	c1 c0       	rjmp	.+386    	; 0x484c <HID_Device_ProcessControlRequest+0x1ea>
    46ca:	8b 30       	cpi	r24, 0x0B	; 11
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <HID_Device_ProcessControlRequest+0x6e>
    46ce:	ab c0       	rjmp	.+342    	; 0x4826 <HID_Device_ProcessControlRequest+0x1c4>
    46d0:	89 30       	cpi	r24, 0x09	; 9
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <HID_Device_ProcessControlRequest+0x74>
    46d4:	eb c0       	rjmp	.+470    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    46d6:	56 c0       	rjmp	.+172    	; 0x4784 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    46d8:	80 91 2c 06 	lds	r24, 0x062C
    46dc:	81 3a       	cpi	r24, 0xA1	; 161
    46de:	09 f0       	breq	.+2      	; 0x46e2 <HID_Device_ProcessControlRequest+0x80>
    46e0:	e5 c0       	rjmp	.+458    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    46e2:	9d b6       	in	r9, 0x3d	; 61
    46e4:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    46e6:	1b 82       	std	Y+3, r1	; 0x03
    46e8:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    46ea:	80 91 2e 06 	lds	r24, 0x062E
    46ee:	10 91 2f 06 	lds	r17, 0x062F
    46f2:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    46f4:	f6 01       	movw	r30, r12
    46f6:	47 81       	ldd	r20, Z+7	; 0x07
    46f8:	8d b7       	in	r24, 0x3d	; 61
    46fa:	9e b7       	in	r25, 0x3e	; 62
    46fc:	84 1b       	sub	r24, r20
    46fe:	91 09       	sbc	r25, r1
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	9e bf       	out	0x3e, r25	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	8d bf       	out	0x3d, r24	; 61
    470a:	ed b6       	in	r14, 0x3d	; 61
    470c:	fe b6       	in	r15, 0x3e	; 62
    470e:	08 94       	sec
    4710:	e1 1c       	adc	r14, r1
    4712:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    4714:	be 2c       	mov	r11, r14
    4716:	af 2c       	mov	r10, r15
    4718:	c7 01       	movw	r24, r14
    471a:	60 e0       	ldi	r22, 0x00	; 0
    471c:	70 e0       	ldi	r23, 0x00	; 0
    471e:	50 e0       	ldi	r21, 0x00	; 0
    4720:	33 d4       	rcall	.+2150   	; 0x4f88 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    4722:	11 50       	subi	r17, 0x01	; 1
    4724:	c6 01       	movw	r24, r12
    4726:	be 01       	movw	r22, r28
    4728:	6f 5f       	subi	r22, 0xFF	; 255
    472a:	7f 4f       	sbci	r23, 0xFF	; 255
    472c:	41 2f       	mov	r20, r17
    472e:	97 01       	movw	r18, r14
    4730:	8e 01       	movw	r16, r28
    4732:	0e 5f       	subi	r16, 0xFE	; 254
    4734:	1f 4f       	sbci	r17, 0xFF	; 255
    4736:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    473a:	f6 01       	movw	r30, r12
    473c:	25 81       	ldd	r18, Z+5	; 0x05
    473e:	36 81       	ldd	r19, Z+6	; 0x06
    4740:	21 15       	cp	r18, r1
    4742:	31 05       	cpc	r19, r1
    4744:	29 f0       	breq	.+10     	; 0x4750 <HID_Device_ProcessControlRequest+0xee>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    4746:	47 81       	ldd	r20, Z+7	; 0x07
    4748:	c9 01       	movw	r24, r18
    474a:	b7 01       	movw	r22, r14
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	13 d4       	rcall	.+2086   	; 0x4f76 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4750:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4754:	80 91 e8 00 	lds	r24, 0x00E8
    4758:	87 7f       	andi	r24, 0xF7	; 247
    475a:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    475e:	6a 81       	ldd	r22, Y+2	; 0x02
    4760:	7b 81       	ldd	r23, Y+3	; 0x03
    4762:	8b 2d       	mov	r24, r11
    4764:	9a 2d       	mov	r25, r10
    4766:	c9 da       	rcall	.-2670   	; 0x3cfa <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4768:	80 91 e8 00 	lds	r24, 0x00E8
    476c:	8b 77       	andi	r24, 0x7B	; 123
    476e:	80 93 e8 00 	sts	0x00E8, r24
    4772:	29 2d       	mov	r18, r9
    4774:	38 2d       	mov	r19, r8
    4776:	c9 01       	movw	r24, r18
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	9e bf       	out	0x3e, r25	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	8d bf       	out	0x3d, r24	; 61
    4782:	94 c0       	rjmp	.+296    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4784:	80 91 2c 06 	lds	r24, 0x062C
    4788:	81 32       	cpi	r24, 0x21	; 33
    478a:	09 f0       	breq	.+2      	; 0x478e <HID_Device_ProcessControlRequest+0x12c>
    478c:	8f c0       	rjmp	.+286    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    478e:	9d b6       	in	r9, 0x3d	; 61
    4790:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    4792:	00 91 32 06 	lds	r16, 0x0632
    4796:	10 91 33 06 	lds	r17, 0x0633
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    479a:	a0 90 2e 06 	lds	r10, 0x062E
    479e:	b0 90 2f 06 	lds	r11, 0x062F
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    47a2:	8d b7       	in	r24, 0x3d	; 61
    47a4:	9e b7       	in	r25, 0x3e	; 62
    47a6:	80 1b       	sub	r24, r16
    47a8:	91 0b       	sbc	r25, r17
    47aa:	0f b6       	in	r0, 0x3f	; 63
    47ac:	f8 94       	cli
    47ae:	9e bf       	out	0x3e, r25	; 62
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	8d bf       	out	0x3d, r24	; 61
    47b4:	ed b6       	in	r14, 0x3d	; 61
    47b6:	fe b6       	in	r15, 0x3e	; 62
    47b8:	08 94       	sec
    47ba:	e1 1c       	adc	r14, r1
    47bc:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    47be:	80 91 e8 00 	lds	r24, 0x00E8
    47c2:	87 7f       	andi	r24, 0xF7	; 247
    47c4:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    47c8:	c7 01       	movw	r24, r14
    47ca:	b8 01       	movw	r22, r16
    47cc:	fa da       	rcall	.-2572   	; 0x3dc2 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    47ce:	80 91 e8 00 	lds	r24, 0x00E8
    47d2:	8e 77       	andi	r24, 0x7E	; 126
    47d4:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	aa 20       	and	r10, r10
    47de:	11 f0       	breq	.+4      	; 0x47e4 <HID_Device_ProcessControlRequest+0x182>
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	ba 94       	dec	r11
    47e6:	e8 0e       	add	r14, r24
    47e8:	f9 1e       	adc	r15, r25
    47ea:	08 1b       	sub	r16, r24
    47ec:	19 0b       	sbc	r17, r25
    47ee:	c6 01       	movw	r24, r12
    47f0:	6a 2d       	mov	r22, r10
    47f2:	4b 2d       	mov	r20, r11
    47f4:	97 01       	movw	r18, r14
    47f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <CALLBACK_HID_Device_ProcessHIDReport>
    47fa:	89 2d       	mov	r24, r9
    47fc:	98 2d       	mov	r25, r8
    47fe:	9c 01       	movw	r18, r24
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	3e bf       	out	0x3e, r19	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	2d bf       	out	0x3d, r18	; 61
    480a:	50 c0       	rjmp	.+160    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    480c:	80 91 2c 06 	lds	r24, 0x062C
    4810:	81 3a       	cpi	r24, 0xA1	; 161
    4812:	09 f0       	breq	.+2      	; 0x4816 <HID_Device_ProcessControlRequest+0x1b4>
    4814:	4b c0       	rjmp	.+150    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4816:	80 91 e8 00 	lds	r24, 0x00E8
    481a:	87 7f       	andi	r24, 0xF7	; 247
    481c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    4820:	f6 01       	movw	r30, r12
    4822:	80 85       	ldd	r24, Z+8	; 0x08
    4824:	3b c0       	rjmp	.+118    	; 0x489c <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4826:	80 91 2c 06 	lds	r24, 0x062C
    482a:	81 32       	cpi	r24, 0x21	; 33
    482c:	09 f0       	breq	.+2      	; 0x4830 <HID_Device_ProcessControlRequest+0x1ce>
    482e:	3e c0       	rjmp	.+124    	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    4830:	80 91 e8 00 	lds	r24, 0x00E8
    4834:	87 7f       	andi	r24, 0xF7	; 247
    4836:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    483a:	b5 d8       	rcall	.-3734   	; 0x39a6 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	80 91 2e 06 	lds	r24, 0x062E
    4842:	81 11       	cpse	r24, r1
    4844:	91 e0       	ldi	r25, 0x01	; 1
    4846:	f6 01       	movw	r30, r12
    4848:	90 87       	std	Z+8, r25	; 0x08
    484a:	30 c0       	rjmp	.+96     	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    484c:	80 91 2c 06 	lds	r24, 0x062C
    4850:	81 32       	cpi	r24, 0x21	; 33
    4852:	61 f5       	brne	.+88     	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    4854:	80 91 e8 00 	lds	r24, 0x00E8
    4858:	87 7f       	andi	r24, 0xF7	; 247
    485a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    485e:	a3 d8       	rcall	.-3770   	; 0x39a6 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    4860:	80 91 2e 06 	lds	r24, 0x062E
    4864:	90 91 2f 06 	lds	r25, 0x062F
    4868:	80 70       	andi	r24, 0x00	; 0
    486a:	76 e0       	ldi	r23, 0x06	; 6
    486c:	96 95       	lsr	r25
    486e:	87 95       	ror	r24
    4870:	7a 95       	dec	r23
    4872:	e1 f7       	brne	.-8      	; 0x486c <HID_Device_ProcessControlRequest+0x20a>
    4874:	f6 01       	movw	r30, r12
    4876:	92 87       	std	Z+10, r25	; 0x0a
    4878:	81 87       	std	Z+9, r24	; 0x09
    487a:	18 c0       	rjmp	.+48     	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    487c:	80 91 2c 06 	lds	r24, 0x062C
    4880:	81 3a       	cpi	r24, 0xA1	; 161
    4882:	a1 f4       	brne	.+40     	; 0x48ac <HID_Device_ProcessControlRequest+0x24a>
    4884:	80 91 e8 00 	lds	r24, 0x00E8
    4888:	87 7f       	andi	r24, 0xF7	; 247
    488a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    488e:	f6 01       	movw	r30, r12
    4890:	81 85       	ldd	r24, Z+9	; 0x09
    4892:	92 85       	ldd	r25, Z+10	; 0x0a
    4894:	96 95       	lsr	r25
    4896:	87 95       	ror	r24
    4898:	96 95       	lsr	r25
    489a:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    489c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    48a0:	80 91 e8 00 	lds	r24, 0x00E8
    48a4:	8e 77       	andi	r24, 0x7E	; 126
    48a6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    48aa:	7d d8       	rcall	.-3846   	; 0x39a6 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	7e be       	out	0x3e, r7	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	6d be       	out	0x3d, r6	; 61
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	cf 91       	pop	r28
    48be:	df 91       	pop	r29
    48c0:	1f 91       	pop	r17
    48c2:	0f 91       	pop	r16
    48c4:	ff 90       	pop	r15
    48c6:	ef 90       	pop	r14
    48c8:	df 90       	pop	r13
    48ca:	cf 90       	pop	r12
    48cc:	bf 90       	pop	r11
    48ce:	af 90       	pop	r10
    48d0:	9f 90       	pop	r9
    48d2:	8f 90       	pop	r8
    48d4:	7f 90       	pop	r7
    48d6:	6f 90       	pop	r6
    48d8:	08 95       	ret

000048da <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    48da:	cf 92       	push	r12
    48dc:	df 92       	push	r13
    48de:	ef 92       	push	r14
    48e0:	ff 92       	push	r15
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	df 93       	push	r29
    48e8:	cf 93       	push	r28
    48ea:	00 d0       	rcall	.+0      	; 0x48ec <MS_Device_USBTask+0x12>
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    48f2:	8e b3       	in	r24, 0x1e	; 30
    48f4:	84 30       	cpi	r24, 0x04	; 4
    48f6:	09 f0       	breq	.+2      	; 0x48fa <MS_Device_USBTask+0x20>
    48f8:	07 c1       	rjmp	.+526    	; 0x4b08 <MS_Device_USBTask+0x22e>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    48fa:	f8 01       	movw	r30, r16
    48fc:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    48fe:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4902:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    4906:	85 ff       	sbrs	r24, 5
    4908:	c9 c0       	rjmp	.+402    	; 0x4a9c <MS_Device_USBTask+0x1c2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    490a:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    490e:	1a 82       	std	Y+2, r1	; 0x02
    4910:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4912:	2a e0       	ldi	r18, 0x0A	; 10
    4914:	e2 2e       	mov	r14, r18
    4916:	f1 2c       	mov	r15, r1
    4918:	e0 0e       	add	r14, r16
    491a:	f1 1e       	adc	r15, r17
    491c:	6e 01       	movw	r12, r28
    491e:	08 94       	sec
    4920:	c1 1c       	adc	r12, r1
    4922:	d1 1c       	adc	r13, r1
    4924:	05 c0       	rjmp	.+10     	; 0x4930 <MS_Device_USBTask+0x56>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4926:	f8 01       	movw	r30, r16
    4928:	86 a9       	ldd	r24, Z+54	; 0x36
    492a:	88 23       	and	r24, r24
    492c:	09 f0       	breq	.+2      	; 0x4930 <MS_Device_USBTask+0x56>
    492e:	b6 c0       	rjmp	.+364    	; 0x4a9c <MS_Device_USBTask+0x1c2>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    4930:	c7 01       	movw	r24, r14
    4932:	6f e0       	ldi	r22, 0x0F	; 15
    4934:	70 e0       	ldi	r23, 0x00	; 0
    4936:	a6 01       	movw	r20, r12
    4938:	ee da       	rcall	.-2596   	; 0x3f16 <Endpoint_Read_Stream_LE>
    493a:	85 30       	cpi	r24, 0x05	; 5
    493c:	a1 f3       	breq	.-24     	; 0x4926 <MS_Device_USBTask+0x4c>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    493e:	f8 01       	movw	r30, r16
    4940:	82 85       	ldd	r24, Z+10	; 0x0a
    4942:	93 85       	ldd	r25, Z+11	; 0x0b
    4944:	a4 85       	ldd	r26, Z+12	; 0x0c
    4946:	b5 85       	ldd	r27, Z+13	; 0x0d
    4948:	85 55       	subi	r24, 0x55	; 85
    494a:	93 45       	sbci	r25, 0x53	; 83
    494c:	a2 44       	sbci	r26, 0x42	; 66
    494e:	b3 44       	sbci	r27, 0x43	; 67
    4950:	81 f4       	brne	.+32     	; 0x4972 <MS_Device_USBTask+0x98>
    4952:	f8 01       	movw	r30, r16
    4954:	97 89       	ldd	r25, Z+23	; 0x17
    4956:	81 85       	ldd	r24, Z+9	; 0x09
    4958:	98 17       	cp	r25, r24
    495a:	58 f4       	brcc	.+22     	; 0x4972 <MS_Device_USBTask+0x98>
    495c:	86 89       	ldd	r24, Z+22	; 0x16
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	8f 71       	andi	r24, 0x1F	; 31
    4962:	90 70       	andi	r25, 0x00	; 0
    4964:	89 2b       	or	r24, r25
    4966:	29 f4       	brne	.+10     	; 0x4972 <MS_Device_USBTask+0x98>
    4968:	80 8d       	ldd	r24, Z+24	; 0x18
    496a:	88 23       	and	r24, r24
    496c:	11 f0       	breq	.+4      	; 0x4972 <MS_Device_USBTask+0x98>
    496e:	81 31       	cpi	r24, 0x11	; 17
    4970:	78 f0       	brcs	.+30     	; 0x4990 <MS_Device_USBTask+0xb6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4972:	80 91 eb 00 	lds	r24, 0x00EB
    4976:	80 62       	ori	r24, 0x20	; 32
    4978:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    497c:	f8 01       	movw	r30, r16
    497e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4980:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4984:	80 91 eb 00 	lds	r24, 0x00EB
    4988:	80 62       	ori	r24, 0x20	; 32
    498a:	80 93 eb 00 	sts	0x00EB, r24
    498e:	86 c0       	rjmp	.+268    	; 0x4a9c <MS_Device_USBTask+0x1c2>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    4990:	1a 82       	std	Y+2, r1	; 0x02
    4992:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    4994:	99 e1       	ldi	r25, 0x19	; 25
    4996:	e9 2e       	mov	r14, r25
    4998:	f1 2c       	mov	r15, r1
    499a:	e0 0e       	add	r14, r16
    499c:	f1 1e       	adc	r15, r17
    499e:	6e 01       	movw	r12, r28
    49a0:	08 94       	sec
    49a2:	c1 1c       	adc	r12, r1
    49a4:	d1 1c       	adc	r13, r1
    49a6:	05 c0       	rjmp	.+10     	; 0x49b2 <MS_Device_USBTask+0xd8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    49a8:	f8 01       	movw	r30, r16
    49aa:	86 a9       	ldd	r24, Z+54	; 0x36
    49ac:	88 23       	and	r24, r24
    49ae:	09 f0       	breq	.+2      	; 0x49b2 <MS_Device_USBTask+0xd8>
    49b0:	75 c0       	rjmp	.+234    	; 0x4a9c <MS_Device_USBTask+0x1c2>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    49b2:	f8 01       	movw	r30, r16
    49b4:	60 8d       	ldd	r22, Z+24	; 0x18
    49b6:	c7 01       	movw	r24, r14
    49b8:	70 e0       	ldi	r23, 0x00	; 0
    49ba:	a6 01       	movw	r20, r12
    49bc:	ac da       	rcall	.-2728   	; 0x3f16 <Endpoint_Read_Stream_LE>
    49be:	85 30       	cpi	r24, 0x05	; 5
    49c0:	99 f3       	breq	.-26     	; 0x49a8 <MS_Device_USBTask+0xce>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    49c2:	80 91 e8 00 	lds	r24, 0x00E8
    49c6:	8b 77       	andi	r24, 0x7B	; 123
    49c8:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    49cc:	f8 01       	movw	r30, r16
    49ce:	86 89       	ldd	r24, Z+22	; 0x16
    49d0:	87 ff       	sbrs	r24, 7
    49d2:	03 c0       	rjmp	.+6      	; 0x49da <MS_Device_USBTask+0x100>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    49d4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    49d6:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    49da:	c8 01       	movw	r24, r16
    49dc:	0e 94 83 01 	call	0x306	; 0x306 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    49e0:	91 e0       	ldi	r25, 0x01	; 1
    49e2:	98 27       	eor	r25, r24
    49e4:	f8 01       	movw	r30, r16
    49e6:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    49e8:	25 e5       	ldi	r18, 0x55	; 85
    49ea:	33 e5       	ldi	r19, 0x53	; 83
    49ec:	42 e4       	ldi	r20, 0x42	; 66
    49ee:	53 e5       	ldi	r21, 0x53	; 83
    49f0:	21 a7       	std	Z+41, r18	; 0x29
    49f2:	32 a7       	std	Z+42, r19	; 0x2a
    49f4:	43 a7       	std	Z+43, r20	; 0x2b
    49f6:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    49f8:	26 85       	ldd	r18, Z+14	; 0x0e
    49fa:	37 85       	ldd	r19, Z+15	; 0x0f
    49fc:	40 89       	ldd	r20, Z+16	; 0x10
    49fe:	51 89       	ldd	r21, Z+17	; 0x11
    4a00:	25 a7       	std	Z+45, r18	; 0x2d
    4a02:	36 a7       	std	Z+46, r19	; 0x2e
    4a04:	47 a7       	std	Z+47, r20	; 0x2f
    4a06:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    4a08:	22 89       	ldd	r18, Z+18	; 0x12
    4a0a:	33 89       	ldd	r19, Z+19	; 0x13
    4a0c:	44 89       	ldd	r20, Z+20	; 0x14
    4a0e:	55 89       	ldd	r21, Z+21	; 0x15
    4a10:	21 ab       	std	Z+49, r18	; 0x31
    4a12:	32 ab       	std	Z+50, r19	; 0x32
    4a14:	43 ab       	std	Z+51, r20	; 0x33
    4a16:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    4a18:	88 23       	and	r24, r24
    4a1a:	51 f4       	brne	.+20     	; 0x4a30 <MS_Device_USBTask+0x156>
    4a1c:	21 15       	cp	r18, r1
    4a1e:	31 05       	cpc	r19, r1
    4a20:	41 05       	cpc	r20, r1
    4a22:	51 05       	cpc	r21, r1
    4a24:	29 f0       	breq	.+10     	; 0x4a30 <MS_Device_USBTask+0x156>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4a26:	80 91 eb 00 	lds	r24, 0x00EB
    4a2a:	80 62       	ori	r24, 0x20	; 32
    4a2c:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4a30:	f8 01       	movw	r30, r16
    4a32:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4a34:	80 93 e9 00 	sts	0x00E9, r24
    4a38:	04 c0       	rjmp	.+8      	; 0x4a42 <MS_Device_USBTask+0x168>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4a3a:	f8 01       	movw	r30, r16
    4a3c:	86 a9       	ldd	r24, Z+54	; 0x36
    4a3e:	88 23       	and	r24, r24
    4a40:	69 f5       	brne	.+90     	; 0x4a9c <MS_Device_USBTask+0x1c2>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4a42:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    4a46:	85 fd       	sbrc	r24, 5
    4a48:	f8 cf       	rjmp	.-16     	; 0x4a3a <MS_Device_USBTask+0x160>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4a4a:	f8 01       	movw	r30, r16
    4a4c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4a4e:	80 93 e9 00 	sts	0x00E9, r24
    4a52:	04 c0       	rjmp	.+8      	; 0x4a5c <MS_Device_USBTask+0x182>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    4a54:	f8 01       	movw	r30, r16
    4a56:	86 a9       	ldd	r24, Z+54	; 0x36
    4a58:	88 23       	and	r24, r24
    4a5a:	01 f5       	brne	.+64     	; 0x4a9c <MS_Device_USBTask+0x1c2>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    4a5c:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    4a60:	85 fd       	sbrc	r24, 5
    4a62:	f8 cf       	rjmp	.-16     	; 0x4a54 <MS_Device_USBTask+0x17a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    4a64:	1a 82       	std	Y+2, r1	; 0x02
    4a66:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4a68:	89 e2       	ldi	r24, 0x29	; 41
    4a6a:	e8 2e       	mov	r14, r24
    4a6c:	f1 2c       	mov	r15, r1
    4a6e:	e0 0e       	add	r14, r16
    4a70:	f1 1e       	adc	r15, r17
    4a72:	6e 01       	movw	r12, r28
    4a74:	08 94       	sec
    4a76:	c1 1c       	adc	r12, r1
    4a78:	d1 1c       	adc	r13, r1
    4a7a:	04 c0       	rjmp	.+8      	; 0x4a84 <MS_Device_USBTask+0x1aa>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4a7c:	f8 01       	movw	r30, r16
    4a7e:	86 a9       	ldd	r24, Z+54	; 0x36
    4a80:	88 23       	and	r24, r24
    4a82:	61 f4       	brne	.+24     	; 0x4a9c <MS_Device_USBTask+0x1c2>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    4a84:	c7 01       	movw	r24, r14
    4a86:	6d e0       	ldi	r22, 0x0D	; 13
    4a88:	70 e0       	ldi	r23, 0x00	; 0
    4a8a:	a6 01       	movw	r20, r12
    4a8c:	e6 da       	rcall	.-2612   	; 0x405a <Endpoint_Write_Stream_LE>
    4a8e:	85 30       	cpi	r24, 0x05	; 5
    4a90:	a9 f3       	breq	.-22     	; 0x4a7c <MS_Device_USBTask+0x1a2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4a92:	80 91 e8 00 	lds	r24, 0x00E8
    4a96:	8e 77       	andi	r24, 0x7E	; 126
    4a98:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    4a9c:	f8 01       	movw	r30, r16
    4a9e:	86 a9       	ldd	r24, Z+54	; 0x36
    4aa0:	88 23       	and	r24, r24
    4aa2:	91 f1       	breq	.+100    	; 0x4b08 <MS_Device_USBTask+0x22e>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    4aa4:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    4aa6:	21 e0       	ldi	r18, 0x01	; 1
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	c9 01       	movw	r24, r18
    4aac:	04 2e       	mov	r0, r20
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <MS_Device_USBTask+0x1da>
    4ab0:	88 0f       	add	r24, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	0a 94       	dec	r0
    4ab6:	e2 f7       	brpl	.-8      	; 0x4ab0 <MS_Device_USBTask+0x1d6>
    4ab8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    4abc:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    4ac2:	09 2e       	mov	r0, r25
    4ac4:	02 c0       	rjmp	.+4      	; 0x4aca <MS_Device_USBTask+0x1f0>
    4ac6:	22 0f       	add	r18, r18
    4ac8:	33 1f       	adc	r19, r19
    4aca:	0a 94       	dec	r0
    4acc:	e2 f7       	brpl	.-8      	; 0x4ac6 <MS_Device_USBTask+0x1ec>
    4ace:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    4ad2:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4ad6:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4ada:	80 91 eb 00 	lds	r24, 0x00EB
    4ade:	80 61       	ori	r24, 0x10	; 16
    4ae0:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4ae4:	80 91 eb 00 	lds	r24, 0x00EB
    4ae8:	88 60       	ori	r24, 0x08	; 8
    4aea:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    4aee:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    4af2:	80 91 eb 00 	lds	r24, 0x00EB
    4af6:	80 61       	ori	r24, 0x10	; 16
    4af8:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    4afc:	80 91 eb 00 	lds	r24, 0x00EB
    4b00:	88 60       	ori	r24, 0x08	; 8
    4b02:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    4b06:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	cf 91       	pop	r28
    4b0e:	df 91       	pop	r29
    4b10:	1f 91       	pop	r17
    4b12:	0f 91       	pop	r16
    4b14:	ff 90       	pop	r15
    4b16:	ef 90       	pop	r14
    4b18:	df 90       	pop	r13
    4b1a:	cf 90       	pop	r12
    4b1c:	08 95       	ret

00004b1e <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4b1e:	1f 93       	push	r17
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    4b26:	0a 96       	adiw	r24, 0x0a	; 10
    4b28:	fc 01       	movw	r30, r24
    4b2a:	8d e2       	ldi	r24, 0x2D	; 45
    4b2c:	df 01       	movw	r26, r30
    4b2e:	1d 92       	st	X+, r1
    4b30:	8a 95       	dec	r24
    4b32:	e9 f7       	brne	.-6      	; 0x4b2e <MS_Device_ConfigureEndpoints+0x10>
    4b34:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	18 17       	cp	r17, r24
    4b3a:	29 f4       	brne	.+10     	; 0x4b46 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    4b3c:	6a 81       	ldd	r22, Y+2	; 0x02
    4b3e:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    4b40:	8c 81       	ldd	r24, Y+4	; 0x04
    4b42:	30 e8       	ldi	r19, 0x80	; 128
    4b44:	07 c0       	rjmp	.+14     	; 0x4b54 <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    4b46:	8d 81       	ldd	r24, Y+5	; 0x05
    4b48:	18 17       	cp	r17, r24
    4b4a:	01 f5       	brne	.+64     	; 0x4b8c <MS_Device_ConfigureEndpoints+0x6e>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    4b4c:	6e 81       	ldd	r22, Y+6	; 0x06
    4b4e:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    4b50:	88 85       	ldd	r24, Y+8	; 0x08
    4b52:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    4b54:	88 23       	and	r24, r24
    4b56:	11 f4       	brne	.+4      	; 0x4b5c <MS_Device_ConfigureEndpoints+0x3e>
    4b58:	40 e0       	ldi	r20, 0x00	; 0
    4b5a:	01 c0       	rjmp	.+2      	; 0x4b5e <MS_Device_ConfigureEndpoints+0x40>
    4b5c:	44 e0       	ldi	r20, 0x04	; 4
    4b5e:	20 e0       	ldi	r18, 0x00	; 0
    4b60:	88 e0       	ldi	r24, 0x08	; 8
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	03 c0       	rjmp	.+6      	; 0x4b6c <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    4b66:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    4b68:	88 0f       	add	r24, r24
    4b6a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    4b6c:	86 17       	cp	r24, r22
    4b6e:	97 07       	cpc	r25, r23
    4b70:	d0 f3       	brcs	.-12     	; 0x4b66 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    4b72:	60 e0       	ldi	r22, 0x00	; 0
    4b74:	31 11       	cpse	r19, r1
    4b76:	61 e0       	ldi	r22, 0x01	; 1
    4b78:	60 68       	ori	r22, 0x80	; 128
    4b7a:	42 60       	ori	r20, 0x02	; 2
    4b7c:	22 95       	swap	r18
    4b7e:	20 7f       	andi	r18, 0xF0	; 240
    4b80:	42 2b       	or	r20, r18
    4b82:	81 2f       	mov	r24, r17
    4b84:	0e 94 9e 1c 	call	0x393c	; 0x393c <Endpoint_ConfigureEndpoint_Prv>
    4b88:	88 23       	and	r24, r24
    4b8a:	21 f0       	breq	.+8      	; 0x4b94 <MS_Device_ConfigureEndpoints+0x76>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    4b8c:	1f 5f       	subi	r17, 0xFF	; 255
    4b8e:	17 30       	cpi	r17, 0x07	; 7
    4b90:	91 f6       	brne	.-92     	; 0x4b36 <MS_Device_ConfigureEndpoints+0x18>
    4b92:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    4b94:	df 91       	pop	r29
    4b96:	cf 91       	pop	r28
    4b98:	1f 91       	pop	r17
    4b9a:	08 95       	ret

00004b9c <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4b9c:	cf 93       	push	r28
    4b9e:	df 93       	push	r29
    4ba0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4ba2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    4ba6:	83 ff       	sbrs	r24, 3
    4ba8:	31 c0       	rjmp	.+98     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    4baa:	88 81       	ld	r24, Y
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	20 91 30 06 	lds	r18, 0x0630
    4bb2:	30 91 31 06 	lds	r19, 0x0631
    4bb6:	28 17       	cp	r18, r24
    4bb8:	39 07       	cpc	r19, r25
    4bba:	41 f5       	brne	.+80     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    4bbc:	80 91 2d 06 	lds	r24, 0x062D
    4bc0:	8e 3f       	cpi	r24, 0xFE	; 254
    4bc2:	81 f0       	breq	.+32     	; 0x4be4 <MS_Device_ProcessControlRequest+0x48>
    4bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc6:	11 f5       	brne	.+68     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4bc8:	80 91 2c 06 	lds	r24, 0x062C
    4bcc:	81 32       	cpi	r24, 0x21	; 33
    4bce:	f1 f4       	brne	.+60     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4bd0:	80 91 e8 00 	lds	r24, 0x00E8
    4bd4:	87 7f       	andi	r24, 0xF7	; 247
    4bd6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    4bda:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	8e ab       	std	Y+54, r24	; 0x36
    4be2:	14 c0       	rjmp	.+40     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    4be4:	80 91 2c 06 	lds	r24, 0x062C
    4be8:	81 3a       	cpi	r24, 0xA1	; 161
    4bea:	81 f4       	brne	.+32     	; 0x4c0c <MS_Device_ProcessControlRequest+0x70>
    4bec:	80 91 e8 00 	lds	r24, 0x00E8
    4bf0:	87 7f       	andi	r24, 0xF7	; 247
    4bf2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    4bf6:	89 85       	ldd	r24, Y+9	; 0x09
    4bf8:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4bfa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4bfe:	80 91 e8 00 	lds	r24, 0x00E8
    4c02:	8e 77       	andi	r24, 0x7E	; 126
    4c04:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4c08:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    4c0c:	df 91       	pop	r29
    4c0e:	cf 91       	pop	r28
    4c10:	08 95       	ret

00004c12 <Temperature_GetTemperature>:
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
    4c12:	80 e4       	ldi	r24, 0x40	; 64
    4c14:	80 93 7c 00 	sts	0x007C, r24

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
    4c18:	80 91 7b 00 	lds	r24, 0x007B
    4c1c:	8f 7d       	andi	r24, 0xDF	; 223
    4c1e:	80 93 7b 00 	sts	0x007B, r24
				#endif

				ADCSRA |= (1 << ADSC);
    4c22:	80 91 7a 00 	lds	r24, 0x007A
    4c26:	80 64       	ori	r24, 0x40	; 64
    4c28:	80 93 7a 00 	sts	0x007A, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
    4c2c:	80 91 7a 00 	lds	r24, 0x007A
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
    4c30:	84 ff       	sbrs	r24, 4
    4c32:	fc cf       	rjmp	.-8      	; 0x4c2c <Temperature_GetTemperature+0x1a>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
    4c34:	80 91 7a 00 	lds	r24, 0x007A
    4c38:	80 61       	ori	r24, 0x10	; 16
    4c3a:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
    4c3e:	60 91 78 00 	lds	r22, 0x0078
    4c42:	70 91 79 00 	lds	r23, 0x0079

int8_t Temperature_GetTemperature(void)
{
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
    4c46:	45 e8       	ldi	r20, 0x85	; 133
    4c48:	51 e0       	ldi	r21, 0x01	; 1
    4c4a:	fa 01       	movw	r30, r20
    4c4c:	85 91       	lpm	r24, Z+
    4c4e:	94 91       	lpm	r25, Z+
    4c50:	86 17       	cp	r24, r22
    4c52:	97 07       	cpc	r25, r23
    4c54:	10 f4       	brcc	.+4      	; 0x4c5a <Temperature_GetTemperature+0x48>
    4c56:	8b ee       	ldi	r24, 0xEB	; 235
    4c58:	08 95       	ret
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
	{
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
    4c5e:	fa 01       	movw	r30, r20
    4c60:	85 91       	lpm	r24, Z+
    4c62:	94 91       	lpm	r25, Z+
    4c64:	86 17       	cp	r24, r22
    4c66:	97 07       	cpc	r25, r23
    4c68:	18 f4       	brcc	.+6      	; 0x4c70 <Temperature_GetTemperature+0x5e>
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
    4c6a:	82 2f       	mov	r24, r18
    4c6c:	85 51       	subi	r24, 0x15	; 21
    4c6e:	08 95       	ret
	uint16_t Temp_ADC = ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | TEMP_ADC_CHANNEL_MASK);

	if (Temp_ADC > pgm_read_word(&Temperature_Lookup[0]))
	  return TEMP_MIN_TEMP;

	for (uint16_t Index = 0; Index < TEMP_TABLE_SIZE; Index++)
    4c70:	2f 5f       	subi	r18, 0xFF	; 255
    4c72:	3f 4f       	sbci	r19, 0xFF	; 255
    4c74:	4e 5f       	subi	r20, 0xFE	; 254
    4c76:	5f 4f       	sbci	r21, 0xFF	; 255
    4c78:	28 37       	cpi	r18, 0x78	; 120
    4c7a:	31 05       	cpc	r19, r1
    4c7c:	81 f7       	brne	.-32     	; 0x4c5e <Temperature_GetTemperature+0x4c>
    4c7e:	82 e6       	ldi	r24, 0x62	; 98
		if (Temp_ADC > pgm_read_word(&Temperature_Lookup[Index]))
		  return (Index + TEMP_TABLE_OFFSET_DEGREES);
	}

	return TEMP_MAX_TEMP;
}
    4c80:	08 95       	ret

00004c82 <TWI_StartTransmission>:
#define  __INCLUDE_FROM_TWI_C
#include "../TWI.h"

uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
    4c82:	78 2f       	mov	r23, r24
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4c84:	84 ea       	ldi	r24, 0xA4	; 164
    4c86:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
    4c8a:	84 e6       	ldi	r24, 0x64	; 100
    4c8c:	68 9f       	mul	r22, r24
    4c8e:	a0 01       	movw	r20, r0
    4c90:	11 24       	eor	r1, r1
    4c92:	9a 01       	movw	r18, r20
    4c94:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4c96:	f5 e3       	ldi	r31, 0x35	; 53
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4c98:	e4 ea       	ldi	r30, 0xA4	; 164
    4c9a:	1e c0       	rjmp	.+60     	; 0x4cd8 <TWI_StartTransmission+0x56>
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
		{
			if (TWCR & (1 << TWINT))
    4c9c:	80 91 bc 00 	lds	r24, 0x00BC
    4ca0:	87 ff       	sbrs	r24, 7
    4ca2:	17 c0       	rjmp	.+46     	; 0x4cd2 <TWI_StartTransmission+0x50>
			{
				switch (TWSR & TW_STATUS_MASK)
    4ca4:	80 91 b9 00 	lds	r24, 0x00B9
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	88 7f       	andi	r24, 0xF8	; 248
    4cac:	90 70       	andi	r25, 0x00	; 0
    4cae:	80 31       	cpi	r24, 0x10	; 16
    4cb0:	91 05       	cpc	r25, r1
    4cb2:	71 f0       	breq	.+28     	; 0x4cd0 <TWI_StartTransmission+0x4e>
    4cb4:	88 33       	cpi	r24, 0x38	; 56
    4cb6:	91 05       	cpc	r25, r1
    4cb8:	19 f0       	breq	.+6      	; 0x4cc0 <TWI_StartTransmission+0x3e>
    4cba:	08 97       	sbiw	r24, 0x08	; 8
    4cbc:	21 f4       	brne	.+8      	; 0x4cc6 <TWI_StartTransmission+0x44>
    4cbe:	08 c0       	rjmp	.+16     	; 0x4cd0 <TWI_StartTransmission+0x4e>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    4cc0:	e0 93 bc 00 	sts	0x00BC, r30
    4cc4:	09 c0       	rjmp	.+18     	; 0x4cd8 <TWI_StartTransmission+0x56>
						continue;
					default:
						TWCR = (1 << TWEN);
    4cc6:	84 e0       	ldi	r24, 0x04	; 4
    4cc8:	80 93 bc 00 	sts	0x00BC, r24
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
    4cce:	08 95       	ret
						return TWI_ERROR_BusFault;
    4cd0:	61 e0       	ldi	r22, 0x01	; 1
    4cd2:	8f 2f       	mov	r24, r31
    4cd4:	8a 95       	dec	r24
    4cd6:	f1 f7       	brne	.-4      	; 0x4cd4 <TWI_StartTransmission+0x52>
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    4cd8:	21 50       	subi	r18, 0x01	; 1
    4cda:	30 40       	sbci	r19, 0x00	; 0
    4cdc:	8f ef       	ldi	r24, 0xFF	; 255
    4cde:	2f 3f       	cpi	r18, 0xFF	; 255
    4ce0:	38 07       	cpc	r19, r24
    4ce2:	11 f0       	breq	.+4      	; 0x4ce8 <TWI_StartTransmission+0x66>
    4ce4:	66 23       	and	r22, r22
    4ce6:	d1 f2       	breq	.-76     	; 0x4c9c <TWI_StartTransmission+0x1a>
			}

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    4ce8:	23 2b       	or	r18, r19
    4cea:	29 f4       	brne	.+10     	; 0x4cf6 <TWI_StartTransmission+0x74>
		{
			TWCR = (1 << TWEN);
    4cec:	84 e0       	ldi	r24, 0x04	; 4
    4cee:	80 93 bc 00 	sts	0x00BC, r24
    4cf2:	82 e0       	ldi	r24, 0x02	; 2
    4cf4:	08 95       	ret
			return TWI_ERROR_BusCaptureTimeout;
		}

		TWDR = SlaveAddress;
    4cf6:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = ((1 << TWINT) | (1 << TWEN));
    4cfa:	84 e8       	ldi	r24, 0x84	; 132
    4cfc:	80 93 bc 00 	sts	0x00BC, r24
    4d00:	95 e3       	ldi	r25, 0x35	; 53
    4d02:	07 c0       	rjmp	.+14     	; 0x4d12 <TWI_StartTransmission+0x90>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
		{
			if (TWCR & (1 << TWINT))
    4d04:	80 91 bc 00 	lds	r24, 0x00BC
    4d08:	87 fd       	sbrc	r24, 7
    4d0a:	09 c0       	rjmp	.+18     	; 0x4d1e <TWI_StartTransmission+0x9c>
    4d0c:	89 2f       	mov	r24, r25
    4d0e:	8a 95       	dec	r24
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <TWI_StartTransmission+0x8c>

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
    4d12:	41 50       	subi	r20, 0x01	; 1
    4d14:	50 40       	sbci	r21, 0x00	; 0
    4d16:	8f ef       	ldi	r24, 0xFF	; 255
    4d18:	4f 3f       	cpi	r20, 0xFF	; 255
    4d1a:	58 07       	cpc	r21, r24
    4d1c:	99 f7       	brne	.-26     	; 0x4d04 <TWI_StartTransmission+0x82>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    4d1e:	45 2b       	or	r20, r21
    4d20:	11 f4       	brne	.+4      	; 0x4d26 <TWI_StartTransmission+0xa4>
    4d22:	83 e0       	ldi	r24, 0x03	; 3
    4d24:	08 95       	ret
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
    4d26:	80 91 b9 00 	lds	r24, 0x00B9
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	88 7f       	andi	r24, 0xF8	; 248
    4d2e:	90 70       	andi	r25, 0x00	; 0
    4d30:	88 31       	cpi	r24, 0x18	; 24
    4d32:	91 05       	cpc	r25, r1
    4d34:	19 f0       	breq	.+6      	; 0x4d3c <TWI_StartTransmission+0xba>
    4d36:	80 34       	cpi	r24, 0x40	; 64
    4d38:	91 05       	cpc	r25, r1
    4d3a:	11 f4       	brne	.+4      	; 0x4d40 <TWI_StartTransmission+0xbe>
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	08 95       	ret
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    4d40:	84 e9       	ldi	r24, 0x94	; 148
    4d42:	80 93 bc 00 	sts	0x00BC, r24
    4d46:	84 e0       	ldi	r24, 0x04	; 4
				return TWI_ERROR_SlaveNotReady;
		}
	}
}
    4d48:	08 95       	ret

00004d4a <TWI_SendByte>:

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    4d4a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
    4d4e:	84 e8       	ldi	r24, 0x84	; 132
    4d50:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
    4d54:	80 91 bc 00 	lds	r24, 0x00BC
    4d58:	87 ff       	sbrs	r24, 7
    4d5a:	fc cf       	rjmp	.-8      	; 0x4d54 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    4d5c:	80 91 b9 00 	lds	r24, 0x00B9
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	88 7f       	andi	r24, 0xF8	; 248
    4d64:	88 32       	cpi	r24, 0x28	; 40
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <TWI_SendByte+0x20>
    4d68:	91 e0       	ldi	r25, 0x01	; 1
}
    4d6a:	89 2f       	mov	r24, r25
    4d6c:	08 95       	ret

00004d6e <TWI_ReceiveByte>:

bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
    4d6e:	fc 01       	movw	r30, r24
	uint8_t TWCRMask;

	if (LastByte)
    4d70:	66 23       	and	r22, r22
    4d72:	11 f4       	brne	.+4      	; 0x4d78 <TWI_ReceiveByte+0xa>
    4d74:	84 ec       	ldi	r24, 0xC4	; 196
    4d76:	01 c0       	rjmp	.+2      	; 0x4d7a <TWI_ReceiveByte+0xc>
    4d78:	84 e8       	ldi	r24, 0x84	; 132
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

	TWCR = TWCRMask;
    4d7a:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
    4d7e:	80 91 bc 00 	lds	r24, 0x00BC
    4d82:	87 ff       	sbrs	r24, 7
    4d84:	fc cf       	rjmp	.-8      	; 0x4d7e <TWI_ReceiveByte+0x10>
	*Byte = TWDR;
    4d86:	80 91 bb 00 	lds	r24, 0x00BB
    4d8a:	80 83       	st	Z, r24
	
	uint8_t Status = (TWSR & TW_STATUS_MASK);
    4d8c:	90 91 b9 00 	lds	r25, 0x00B9
    4d90:	98 7f       	andi	r25, 0xF8	; 248
	
	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    4d92:	66 23       	and	r22, r22
    4d94:	29 f0       	breq	.+10     	; 0x4da0 <TWI_ReceiveByte+0x32>
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	98 35       	cpi	r25, 0x58	; 88
    4d9a:	31 f4       	brne	.+12     	; 0x4da8 <TWI_ReceiveByte+0x3a>
    4d9c:	81 e0       	ldi	r24, 0x01	; 1
    4d9e:	08 95       	ret
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	90 35       	cpi	r25, 0x50	; 80
    4da4:	09 f4       	brne	.+2      	; 0x4da8 <TWI_ReceiveByte+0x3a>
    4da6:	81 e0       	ldi	r24, 0x01	; 1
}
    4da8:	08 95       	ret

00004daa <TWI_ReadPacket>:
                       const uint8_t TimeoutMS,
                       const uint8_t* InternalAddress,
                       uint8_t InternalAddressLen,
                       uint8_t* Buffer,
                       uint8_t Length)
{
    4daa:	af 92       	push	r10
    4dac:	bf 92       	push	r11
    4dae:	cf 92       	push	r12
    4db0:	df 92       	push	r13
    4db2:	ef 92       	push	r14
    4db4:	ff 92       	push	r15
    4db6:	0f 93       	push	r16
    4db8:	1f 93       	push	r17
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	b8 2e       	mov	r11, r24
    4dc0:	a6 2e       	mov	r10, r22
    4dc2:	ea 01       	movw	r28, r20
    4dc4:	f2 2e       	mov	r15, r18
    4dc6:	68 01       	movw	r12, r16
	uint8_t ErrorCode;
	
	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    4dc8:	8e 7f       	andi	r24, 0xFE	; 254
    4dca:	5b df       	rcall	.-330    	; 0x4c82 <TWI_StartTransmission>
    4dcc:	18 2f       	mov	r17, r24
    4dce:	88 23       	and	r24, r24
    4dd0:	39 f0       	breq	.+14     	; 0x4de0 <TWI_ReadPacket+0x36>
    4dd2:	22 c0       	rjmp	.+68     	; 0x4e18 <TWI_ReadPacket+0x6e>
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    4dd4:	88 81       	ld	r24, Y
    4dd6:	b9 df       	rcall	.-142    	; 0x4d4a <TWI_SendByte>
    4dd8:	fa 94       	dec	r15
    4dda:	88 23       	and	r24, r24
    4ddc:	19 f0       	breq	.+6      	; 0x4de4 <TWI_ReadPacket+0x3a>
    4dde:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ErrorCode;
	
	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4de0:	ff 20       	and	r15, r15
    4de2:	c1 f7       	brne	.-16     	; 0x4dd4 <TWI_ReadPacket+0x2a>
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}
		
		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    4de4:	8b 2d       	mov	r24, r11
    4de6:	81 60       	ori	r24, 0x01	; 1
    4de8:	6a 2d       	mov	r22, r10
    4dea:	4b df       	rcall	.-362    	; 0x4c82 <TWI_StartTransmission>
    4dec:	18 2f       	mov	r17, r24
    4dee:	88 23       	and	r24, r24
    4df0:	71 f0       	breq	.+28     	; 0x4e0e <TWI_ReadPacket+0x64>
    4df2:	12 c0       	rjmp	.+36     	; 0x4e18 <TWI_ReadPacket+0x6e>
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    4df4:	ea 94       	dec	r14
			{
				if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    4df6:	60 e0       	ldi	r22, 0x00	; 0
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <TWI_ReadPacket+0x52>
    4dfa:	61 e0       	ldi	r22, 0x01	; 1
    4dfc:	c6 01       	movw	r24, r12
    4dfe:	b7 df       	rcall	.-146    	; 0x4d6e <TWI_ReceiveByte>
    4e00:	88 23       	and	r24, r24
    4e02:	11 f4       	brne	.+4      	; 0x4e08 <TWI_ReadPacket+0x5e>
    4e04:	15 e0       	ldi	r17, 0x05	; 5
    4e06:	05 c0       	rjmp	.+10     	; 0x4e12 <TWI_ReadPacket+0x68>
    4e08:	08 94       	sec
    4e0a:	c1 1c       	adc	r12, r1
    4e0c:	d1 1c       	adc	r13, r1
		}
		
		if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
											   TimeoutMS)) == TWI_ERROR_NoError)
		{
			while (Length--)
    4e0e:	ee 20       	and	r14, r14
    4e10:	89 f7       	brne	.-30     	; 0x4df4 <TWI_ReadPacket+0x4a>

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    4e12:	84 e9       	ldi	r24, 0x94	; 148
    4e14:	80 93 bc 00 	sts	0x00BC, r24
			TWI_StopTransmission();
		}
	}
	
	return ErrorCode;
}
    4e18:	81 2f       	mov	r24, r17
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	ff 90       	pop	r15
    4e24:	ef 90       	pop	r14
    4e26:	df 90       	pop	r13
    4e28:	cf 90       	pop	r12
    4e2a:	bf 90       	pop	r11
    4e2c:	af 90       	pop	r10
    4e2e:	08 95       	ret

00004e30 <TWI_WritePacket>:
                        const uint8_t TimeoutMS,
                        const uint8_t* InternalAddress,
                        uint8_t InternalAddressLen,
                        const uint8_t* Buffer,
                        uint8_t Length)
{
    4e30:	df 92       	push	r13
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	0f 93       	push	r16
    4e38:	1f 93       	push	r17
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	ea 01       	movw	r28, r20
    4e40:	f2 2e       	mov	r15, r18
    4e42:	de 2c       	mov	r13, r14
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    4e44:	8e 7f       	andi	r24, 0xFE	; 254
    4e46:	1d df       	rcall	.-454    	; 0x4c82 <TWI_StartTransmission>
    4e48:	e8 2e       	mov	r14, r24
    4e4a:	88 23       	and	r24, r24
    4e4c:	39 f0       	breq	.+14     	; 0x4e5c <TWI_WritePacket+0x2c>
    4e4e:	1c c0       	rjmp	.+56     	; 0x4e88 <TWI_WritePacket+0x58>
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
		{
			if (!(TWI_SendByte(*(InternalAddress++))))
    4e50:	88 81       	ld	r24, Y
    4e52:	7b df       	rcall	.-266    	; 0x4d4a <TWI_SendByte>
    4e54:	fa 94       	dec	r15
    4e56:	88 23       	and	r24, r24
    4e58:	81 f0       	breq	.+32     	; 0x4e7a <TWI_WritePacket+0x4a>
    4e5a:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ErrorCode;

	if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
	                                       TimeoutMS)) == TWI_ERROR_NoError)
	{
		while (InternalAddressLen--)
    4e5c:	ff 20       	and	r15, r15
    4e5e:	c1 f7       	brne	.-16     	; 0x4e50 <TWI_WritePacket+0x20>
    4e60:	0e c0       	rjmp	.+28     	; 0x4e7e <TWI_WritePacket+0x4e>
			}
		}

		while (Length--)
		{
			if (!(TWI_SendByte(*(Buffer++))))
    4e62:	f8 01       	movw	r30, r16
    4e64:	80 81       	ld	r24, Z
    4e66:	71 df       	rcall	.-286    	; 0x4d4a <TWI_SendByte>
    4e68:	da 94       	dec	r13
    4e6a:	88 23       	and	r24, r24
    4e6c:	19 f4       	brne	.+6      	; 0x4e74 <TWI_WritePacket+0x44>
    4e6e:	95 e0       	ldi	r25, 0x05	; 5
    4e70:	e9 2e       	mov	r14, r25
    4e72:	07 c0       	rjmp	.+14     	; 0x4e82 <TWI_WritePacket+0x52>
    4e74:	0f 5f       	subi	r16, 0xFF	; 255
    4e76:	1f 4f       	sbci	r17, 0xFF	; 255
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <TWI_WritePacket+0x4e>
    4e7a:	85 e0       	ldi	r24, 0x05	; 5
    4e7c:	e8 2e       	mov	r14, r24
				ErrorCode = TWI_ERROR_SlaveNAK;
				break;
			}
		}

		while (Length--)
    4e7e:	dd 20       	and	r13, r13
    4e80:	81 f7       	brne	.-32     	; 0x4e62 <TWI_WritePacket+0x32>
    4e82:	84 e9       	ldi	r24, 0x94	; 148
    4e84:	80 93 bc 00 	sts	0x00BC, r24
		
		TWI_StopTransmission();
	}
	
	return ErrorCode;
}
    4e88:	8e 2d       	mov	r24, r14
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	1f 91       	pop	r17
    4e90:	0f 91       	pop	r16
    4e92:	ff 90       	pop	r15
    4e94:	ef 90       	pop	r14
    4e96:	df 90       	pop	r13
    4e98:	08 95       	ret

00004e9a <__mulsi3>:
    4e9a:	62 9f       	mul	r22, r18
    4e9c:	d0 01       	movw	r26, r0
    4e9e:	73 9f       	mul	r23, r19
    4ea0:	f0 01       	movw	r30, r0
    4ea2:	82 9f       	mul	r24, r18
    4ea4:	e0 0d       	add	r30, r0
    4ea6:	f1 1d       	adc	r31, r1
    4ea8:	64 9f       	mul	r22, r20
    4eaa:	e0 0d       	add	r30, r0
    4eac:	f1 1d       	adc	r31, r1
    4eae:	92 9f       	mul	r25, r18
    4eb0:	f0 0d       	add	r31, r0
    4eb2:	83 9f       	mul	r24, r19
    4eb4:	f0 0d       	add	r31, r0
    4eb6:	74 9f       	mul	r23, r20
    4eb8:	f0 0d       	add	r31, r0
    4eba:	65 9f       	mul	r22, r21
    4ebc:	f0 0d       	add	r31, r0
    4ebe:	99 27       	eor	r25, r25
    4ec0:	72 9f       	mul	r23, r18
    4ec2:	b0 0d       	add	r27, r0
    4ec4:	e1 1d       	adc	r30, r1
    4ec6:	f9 1f       	adc	r31, r25
    4ec8:	63 9f       	mul	r22, r19
    4eca:	b0 0d       	add	r27, r0
    4ecc:	e1 1d       	adc	r30, r1
    4ece:	f9 1f       	adc	r31, r25
    4ed0:	bd 01       	movw	r22, r26
    4ed2:	cf 01       	movw	r24, r30
    4ed4:	11 24       	eor	r1, r1
    4ed6:	08 95       	ret

00004ed8 <__udivmodqi4>:
    4ed8:	99 1b       	sub	r25, r25
    4eda:	79 e0       	ldi	r23, 0x09	; 9
    4edc:	04 c0       	rjmp	.+8      	; 0x4ee6 <__udivmodqi4_ep>

00004ede <__udivmodqi4_loop>:
    4ede:	99 1f       	adc	r25, r25
    4ee0:	96 17       	cp	r25, r22
    4ee2:	08 f0       	brcs	.+2      	; 0x4ee6 <__udivmodqi4_ep>
    4ee4:	96 1b       	sub	r25, r22

00004ee6 <__udivmodqi4_ep>:
    4ee6:	88 1f       	adc	r24, r24
    4ee8:	7a 95       	dec	r23
    4eea:	c9 f7       	brne	.-14     	; 0x4ede <__udivmodqi4_loop>
    4eec:	80 95       	com	r24
    4eee:	08 95       	ret

00004ef0 <__udivmodhi4>:
    4ef0:	aa 1b       	sub	r26, r26
    4ef2:	bb 1b       	sub	r27, r27
    4ef4:	51 e1       	ldi	r21, 0x11	; 17
    4ef6:	07 c0       	rjmp	.+14     	; 0x4f06 <__udivmodhi4_ep>

00004ef8 <__udivmodhi4_loop>:
    4ef8:	aa 1f       	adc	r26, r26
    4efa:	bb 1f       	adc	r27, r27
    4efc:	a6 17       	cp	r26, r22
    4efe:	b7 07       	cpc	r27, r23
    4f00:	10 f0       	brcs	.+4      	; 0x4f06 <__udivmodhi4_ep>
    4f02:	a6 1b       	sub	r26, r22
    4f04:	b7 0b       	sbc	r27, r23

00004f06 <__udivmodhi4_ep>:
    4f06:	88 1f       	adc	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	5a 95       	dec	r21
    4f0c:	a9 f7       	brne	.-22     	; 0x4ef8 <__udivmodhi4_loop>
    4f0e:	80 95       	com	r24
    4f10:	90 95       	com	r25
    4f12:	bc 01       	movw	r22, r24
    4f14:	cd 01       	movw	r24, r26
    4f16:	08 95       	ret

00004f18 <__udivmodsi4>:
    4f18:	a1 e2       	ldi	r26, 0x21	; 33
    4f1a:	1a 2e       	mov	r1, r26
    4f1c:	aa 1b       	sub	r26, r26
    4f1e:	bb 1b       	sub	r27, r27
    4f20:	fd 01       	movw	r30, r26
    4f22:	0d c0       	rjmp	.+26     	; 0x4f3e <__udivmodsi4_ep>

00004f24 <__udivmodsi4_loop>:
    4f24:	aa 1f       	adc	r26, r26
    4f26:	bb 1f       	adc	r27, r27
    4f28:	ee 1f       	adc	r30, r30
    4f2a:	ff 1f       	adc	r31, r31
    4f2c:	a2 17       	cp	r26, r18
    4f2e:	b3 07       	cpc	r27, r19
    4f30:	e4 07       	cpc	r30, r20
    4f32:	f5 07       	cpc	r31, r21
    4f34:	20 f0       	brcs	.+8      	; 0x4f3e <__udivmodsi4_ep>
    4f36:	a2 1b       	sub	r26, r18
    4f38:	b3 0b       	sbc	r27, r19
    4f3a:	e4 0b       	sbc	r30, r20
    4f3c:	f5 0b       	sbc	r31, r21

00004f3e <__udivmodsi4_ep>:
    4f3e:	66 1f       	adc	r22, r22
    4f40:	77 1f       	adc	r23, r23
    4f42:	88 1f       	adc	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	1a 94       	dec	r1
    4f48:	69 f7       	brne	.-38     	; 0x4f24 <__udivmodsi4_loop>
    4f4a:	60 95       	com	r22
    4f4c:	70 95       	com	r23
    4f4e:	80 95       	com	r24
    4f50:	90 95       	com	r25
    4f52:	9b 01       	movw	r18, r22
    4f54:	ac 01       	movw	r20, r24
    4f56:	bd 01       	movw	r22, r26
    4f58:	cf 01       	movw	r24, r30
    4f5a:	08 95       	ret

00004f5c <memcmp>:
    4f5c:	fb 01       	movw	r30, r22
    4f5e:	dc 01       	movw	r26, r24
    4f60:	04 c0       	rjmp	.+8      	; 0x4f6a <memcmp+0xe>
    4f62:	8d 91       	ld	r24, X+
    4f64:	01 90       	ld	r0, Z+
    4f66:	80 19       	sub	r24, r0
    4f68:	21 f4       	brne	.+8      	; 0x4f72 <memcmp+0x16>
    4f6a:	41 50       	subi	r20, 0x01	; 1
    4f6c:	50 40       	sbci	r21, 0x00	; 0
    4f6e:	c8 f7       	brcc	.-14     	; 0x4f62 <memcmp+0x6>
    4f70:	88 1b       	sub	r24, r24
    4f72:	99 0b       	sbc	r25, r25
    4f74:	08 95       	ret

00004f76 <memcpy>:
    4f76:	fb 01       	movw	r30, r22
    4f78:	dc 01       	movw	r26, r24
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <memcpy+0xa>
    4f7c:	01 90       	ld	r0, Z+
    4f7e:	0d 92       	st	X+, r0
    4f80:	41 50       	subi	r20, 0x01	; 1
    4f82:	50 40       	sbci	r21, 0x00	; 0
    4f84:	d8 f7       	brcc	.-10     	; 0x4f7c <memcpy+0x6>
    4f86:	08 95       	ret

00004f88 <memset>:
    4f88:	dc 01       	movw	r26, r24
    4f8a:	01 c0       	rjmp	.+2      	; 0x4f8e <memset+0x6>
    4f8c:	6d 93       	st	X+, r22
    4f8e:	41 50       	subi	r20, 0x01	; 1
    4f90:	50 40       	sbci	r21, 0x00	; 0
    4f92:	e0 f7       	brcc	.-8      	; 0x4f8c <memset+0x4>
    4f94:	08 95       	ret

00004f96 <sprintf>:
    4f96:	ae e0       	ldi	r26, 0x0E	; 14
    4f98:	b0 e0       	ldi	r27, 0x00	; 0
    4f9a:	e0 ed       	ldi	r30, 0xD0	; 208
    4f9c:	f7 e2       	ldi	r31, 0x27	; 39
    4f9e:	b2 c2       	rjmp	.+1380   	; 0x5504 <__prologue_saves__+0x1c>
    4fa0:	0d 89       	ldd	r16, Y+21	; 0x15
    4fa2:	1e 89       	ldd	r17, Y+22	; 0x16
    4fa4:	86 e0       	ldi	r24, 0x06	; 6
    4fa6:	8c 83       	std	Y+4, r24	; 0x04
    4fa8:	1a 83       	std	Y+2, r17	; 0x02
    4faa:	09 83       	std	Y+1, r16	; 0x01
    4fac:	8f ef       	ldi	r24, 0xFF	; 255
    4fae:	9f e7       	ldi	r25, 0x7F	; 127
    4fb0:	9e 83       	std	Y+6, r25	; 0x06
    4fb2:	8d 83       	std	Y+5, r24	; 0x05
    4fb4:	9e 01       	movw	r18, r28
    4fb6:	27 5e       	subi	r18, 0xE7	; 231
    4fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fba:	ce 01       	movw	r24, r28
    4fbc:	01 96       	adiw	r24, 0x01	; 1
    4fbe:	6f 89       	ldd	r22, Y+23	; 0x17
    4fc0:	78 8d       	ldd	r23, Y+24	; 0x18
    4fc2:	a9 01       	movw	r20, r18
    4fc4:	09 d0       	rcall	.+18     	; 0x4fd8 <vfprintf>
    4fc6:	2f 81       	ldd	r18, Y+7	; 0x07
    4fc8:	38 85       	ldd	r19, Y+8	; 0x08
    4fca:	02 0f       	add	r16, r18
    4fcc:	13 1f       	adc	r17, r19
    4fce:	f8 01       	movw	r30, r16
    4fd0:	10 82       	st	Z, r1
    4fd2:	2e 96       	adiw	r28, 0x0e	; 14
    4fd4:	e4 e0       	ldi	r30, 0x04	; 4
    4fd6:	b2 c2       	rjmp	.+1380   	; 0x553c <__epilogue_restores__+0x1c>

00004fd8 <vfprintf>:
    4fd8:	ab e0       	ldi	r26, 0x0B	; 11
    4fda:	b0 e0       	ldi	r27, 0x00	; 0
    4fdc:	e1 ef       	ldi	r30, 0xF1	; 241
    4fde:	f7 e2       	ldi	r31, 0x27	; 39
    4fe0:	83 c2       	rjmp	.+1286   	; 0x54e8 <__prologue_saves__>
    4fe2:	3c 01       	movw	r6, r24
    4fe4:	2b 01       	movw	r4, r22
    4fe6:	5a 01       	movw	r10, r20
    4fe8:	fc 01       	movw	r30, r24
    4fea:	17 82       	std	Z+7, r1	; 0x07
    4fec:	16 82       	std	Z+6, r1	; 0x06
    4fee:	83 81       	ldd	r24, Z+3	; 0x03
    4ff0:	81 fd       	sbrc	r24, 1
    4ff2:	03 c0       	rjmp	.+6      	; 0x4ffa <vfprintf+0x22>
    4ff4:	6f ef       	ldi	r22, 0xFF	; 255
    4ff6:	7f ef       	ldi	r23, 0xFF	; 255
    4ff8:	b9 c1       	rjmp	.+882    	; 0x536c <vfprintf+0x394>
    4ffa:	9a e0       	ldi	r25, 0x0A	; 10
    4ffc:	89 2e       	mov	r8, r25
    4ffe:	1e 01       	movw	r2, r28
    5000:	08 94       	sec
    5002:	21 1c       	adc	r2, r1
    5004:	31 1c       	adc	r3, r1
    5006:	f3 01       	movw	r30, r6
    5008:	23 81       	ldd	r18, Z+3	; 0x03
    500a:	f2 01       	movw	r30, r4
    500c:	23 fd       	sbrc	r18, 3
    500e:	85 91       	lpm	r24, Z+
    5010:	23 ff       	sbrs	r18, 3
    5012:	81 91       	ld	r24, Z+
    5014:	2f 01       	movw	r4, r30
    5016:	88 23       	and	r24, r24
    5018:	09 f4       	brne	.+2      	; 0x501c <vfprintf+0x44>
    501a:	a5 c1       	rjmp	.+842    	; 0x5366 <vfprintf+0x38e>
    501c:	85 32       	cpi	r24, 0x25	; 37
    501e:	39 f4       	brne	.+14     	; 0x502e <vfprintf+0x56>
    5020:	23 fd       	sbrc	r18, 3
    5022:	85 91       	lpm	r24, Z+
    5024:	23 ff       	sbrs	r18, 3
    5026:	81 91       	ld	r24, Z+
    5028:	2f 01       	movw	r4, r30
    502a:	85 32       	cpi	r24, 0x25	; 37
    502c:	21 f4       	brne	.+8      	; 0x5036 <vfprintf+0x5e>
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	b3 01       	movw	r22, r6
    5032:	d0 d1       	rcall	.+928    	; 0x53d4 <fputc>
    5034:	e8 cf       	rjmp	.-48     	; 0x5006 <vfprintf+0x2e>
    5036:	98 2f       	mov	r25, r24
    5038:	ff 24       	eor	r15, r15
    503a:	ee 24       	eor	r14, r14
    503c:	99 24       	eor	r9, r9
    503e:	ff e1       	ldi	r31, 0x1F	; 31
    5040:	ff 15       	cp	r31, r15
    5042:	d0 f0       	brcs	.+52     	; 0x5078 <vfprintf+0xa0>
    5044:	9b 32       	cpi	r25, 0x2B	; 43
    5046:	69 f0       	breq	.+26     	; 0x5062 <vfprintf+0x8a>
    5048:	9c 32       	cpi	r25, 0x2C	; 44
    504a:	28 f4       	brcc	.+10     	; 0x5056 <vfprintf+0x7e>
    504c:	90 32       	cpi	r25, 0x20	; 32
    504e:	59 f0       	breq	.+22     	; 0x5066 <vfprintf+0x8e>
    5050:	93 32       	cpi	r25, 0x23	; 35
    5052:	91 f4       	brne	.+36     	; 0x5078 <vfprintf+0xa0>
    5054:	0e c0       	rjmp	.+28     	; 0x5072 <vfprintf+0x9a>
    5056:	9d 32       	cpi	r25, 0x2D	; 45
    5058:	49 f0       	breq	.+18     	; 0x506c <vfprintf+0x94>
    505a:	90 33       	cpi	r25, 0x30	; 48
    505c:	69 f4       	brne	.+26     	; 0x5078 <vfprintf+0xa0>
    505e:	41 e0       	ldi	r20, 0x01	; 1
    5060:	24 c0       	rjmp	.+72     	; 0x50aa <vfprintf+0xd2>
    5062:	52 e0       	ldi	r21, 0x02	; 2
    5064:	f5 2a       	or	r15, r21
    5066:	84 e0       	ldi	r24, 0x04	; 4
    5068:	f8 2a       	or	r15, r24
    506a:	28 c0       	rjmp	.+80     	; 0x50bc <vfprintf+0xe4>
    506c:	98 e0       	ldi	r25, 0x08	; 8
    506e:	f9 2a       	or	r15, r25
    5070:	25 c0       	rjmp	.+74     	; 0x50bc <vfprintf+0xe4>
    5072:	e0 e1       	ldi	r30, 0x10	; 16
    5074:	fe 2a       	or	r15, r30
    5076:	22 c0       	rjmp	.+68     	; 0x50bc <vfprintf+0xe4>
    5078:	f7 fc       	sbrc	r15, 7
    507a:	29 c0       	rjmp	.+82     	; 0x50ce <vfprintf+0xf6>
    507c:	89 2f       	mov	r24, r25
    507e:	80 53       	subi	r24, 0x30	; 48
    5080:	8a 30       	cpi	r24, 0x0A	; 10
    5082:	70 f4       	brcc	.+28     	; 0x50a0 <vfprintf+0xc8>
    5084:	f6 fe       	sbrs	r15, 6
    5086:	05 c0       	rjmp	.+10     	; 0x5092 <vfprintf+0xba>
    5088:	98 9c       	mul	r9, r8
    508a:	90 2c       	mov	r9, r0
    508c:	11 24       	eor	r1, r1
    508e:	98 0e       	add	r9, r24
    5090:	15 c0       	rjmp	.+42     	; 0x50bc <vfprintf+0xe4>
    5092:	e8 9c       	mul	r14, r8
    5094:	e0 2c       	mov	r14, r0
    5096:	11 24       	eor	r1, r1
    5098:	e8 0e       	add	r14, r24
    509a:	f0 e2       	ldi	r31, 0x20	; 32
    509c:	ff 2a       	or	r15, r31
    509e:	0e c0       	rjmp	.+28     	; 0x50bc <vfprintf+0xe4>
    50a0:	9e 32       	cpi	r25, 0x2E	; 46
    50a2:	29 f4       	brne	.+10     	; 0x50ae <vfprintf+0xd6>
    50a4:	f6 fc       	sbrc	r15, 6
    50a6:	5f c1       	rjmp	.+702    	; 0x5366 <vfprintf+0x38e>
    50a8:	40 e4       	ldi	r20, 0x40	; 64
    50aa:	f4 2a       	or	r15, r20
    50ac:	07 c0       	rjmp	.+14     	; 0x50bc <vfprintf+0xe4>
    50ae:	9c 36       	cpi	r25, 0x6C	; 108
    50b0:	19 f4       	brne	.+6      	; 0x50b8 <vfprintf+0xe0>
    50b2:	50 e8       	ldi	r21, 0x80	; 128
    50b4:	f5 2a       	or	r15, r21
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <vfprintf+0xe4>
    50b8:	98 36       	cpi	r25, 0x68	; 104
    50ba:	49 f4       	brne	.+18     	; 0x50ce <vfprintf+0xf6>
    50bc:	f2 01       	movw	r30, r4
    50be:	23 fd       	sbrc	r18, 3
    50c0:	95 91       	lpm	r25, Z+
    50c2:	23 ff       	sbrs	r18, 3
    50c4:	91 91       	ld	r25, Z+
    50c6:	2f 01       	movw	r4, r30
    50c8:	99 23       	and	r25, r25
    50ca:	09 f0       	breq	.+2      	; 0x50ce <vfprintf+0xf6>
    50cc:	b8 cf       	rjmp	.-144    	; 0x503e <vfprintf+0x66>
    50ce:	89 2f       	mov	r24, r25
    50d0:	85 54       	subi	r24, 0x45	; 69
    50d2:	83 30       	cpi	r24, 0x03	; 3
    50d4:	18 f0       	brcs	.+6      	; 0x50dc <vfprintf+0x104>
    50d6:	80 52       	subi	r24, 0x20	; 32
    50d8:	83 30       	cpi	r24, 0x03	; 3
    50da:	38 f4       	brcc	.+14     	; 0x50ea <vfprintf+0x112>
    50dc:	44 e0       	ldi	r20, 0x04	; 4
    50de:	50 e0       	ldi	r21, 0x00	; 0
    50e0:	a4 0e       	add	r10, r20
    50e2:	b5 1e       	adc	r11, r21
    50e4:	5f e3       	ldi	r21, 0x3F	; 63
    50e6:	59 83       	std	Y+1, r21	; 0x01
    50e8:	0f c0       	rjmp	.+30     	; 0x5108 <vfprintf+0x130>
    50ea:	93 36       	cpi	r25, 0x63	; 99
    50ec:	31 f0       	breq	.+12     	; 0x50fa <vfprintf+0x122>
    50ee:	93 37       	cpi	r25, 0x73	; 115
    50f0:	79 f0       	breq	.+30     	; 0x5110 <vfprintf+0x138>
    50f2:	93 35       	cpi	r25, 0x53	; 83
    50f4:	09 f0       	breq	.+2      	; 0x50f8 <vfprintf+0x120>
    50f6:	52 c0       	rjmp	.+164    	; 0x519c <vfprintf+0x1c4>
    50f8:	1f c0       	rjmp	.+62     	; 0x5138 <vfprintf+0x160>
    50fa:	f5 01       	movw	r30, r10
    50fc:	80 81       	ld	r24, Z
    50fe:	89 83       	std	Y+1, r24	; 0x01
    5100:	42 e0       	ldi	r20, 0x02	; 2
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	a4 0e       	add	r10, r20
    5106:	b5 1e       	adc	r11, r21
    5108:	61 01       	movw	r12, r2
    510a:	01 e0       	ldi	r16, 0x01	; 1
    510c:	10 e0       	ldi	r17, 0x00	; 0
    510e:	11 c0       	rjmp	.+34     	; 0x5132 <vfprintf+0x15a>
    5110:	f5 01       	movw	r30, r10
    5112:	c0 80       	ld	r12, Z
    5114:	d1 80       	ldd	r13, Z+1	; 0x01
    5116:	f6 fc       	sbrc	r15, 6
    5118:	03 c0       	rjmp	.+6      	; 0x5120 <vfprintf+0x148>
    511a:	6f ef       	ldi	r22, 0xFF	; 255
    511c:	7f ef       	ldi	r23, 0xFF	; 255
    511e:	02 c0       	rjmp	.+4      	; 0x5124 <vfprintf+0x14c>
    5120:	69 2d       	mov	r22, r9
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	42 e0       	ldi	r20, 0x02	; 2
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	a4 0e       	add	r10, r20
    512a:	b5 1e       	adc	r11, r21
    512c:	c6 01       	movw	r24, r12
    512e:	47 d1       	rcall	.+654    	; 0x53be <strnlen>
    5130:	8c 01       	movw	r16, r24
    5132:	5f e7       	ldi	r21, 0x7F	; 127
    5134:	f5 22       	and	r15, r21
    5136:	13 c0       	rjmp	.+38     	; 0x515e <vfprintf+0x186>
    5138:	f5 01       	movw	r30, r10
    513a:	c0 80       	ld	r12, Z
    513c:	d1 80       	ldd	r13, Z+1	; 0x01
    513e:	f6 fc       	sbrc	r15, 6
    5140:	03 c0       	rjmp	.+6      	; 0x5148 <vfprintf+0x170>
    5142:	6f ef       	ldi	r22, 0xFF	; 255
    5144:	7f ef       	ldi	r23, 0xFF	; 255
    5146:	02 c0       	rjmp	.+4      	; 0x514c <vfprintf+0x174>
    5148:	69 2d       	mov	r22, r9
    514a:	70 e0       	ldi	r23, 0x00	; 0
    514c:	42 e0       	ldi	r20, 0x02	; 2
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	a4 0e       	add	r10, r20
    5152:	b5 1e       	adc	r11, r21
    5154:	c6 01       	movw	r24, r12
    5156:	28 d1       	rcall	.+592    	; 0x53a8 <strnlen_P>
    5158:	8c 01       	movw	r16, r24
    515a:	50 e8       	ldi	r21, 0x80	; 128
    515c:	f5 2a       	or	r15, r21
    515e:	f3 fe       	sbrs	r15, 3
    5160:	06 c0       	rjmp	.+12     	; 0x516e <vfprintf+0x196>
    5162:	18 c0       	rjmp	.+48     	; 0x5194 <vfprintf+0x1bc>
    5164:	80 e2       	ldi	r24, 0x20	; 32
    5166:	90 e0       	ldi	r25, 0x00	; 0
    5168:	b3 01       	movw	r22, r6
    516a:	34 d1       	rcall	.+616    	; 0x53d4 <fputc>
    516c:	ea 94       	dec	r14
    516e:	8e 2d       	mov	r24, r14
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	08 17       	cp	r16, r24
    5174:	19 07       	cpc	r17, r25
    5176:	b0 f3       	brcs	.-20     	; 0x5164 <vfprintf+0x18c>
    5178:	0d c0       	rjmp	.+26     	; 0x5194 <vfprintf+0x1bc>
    517a:	f6 01       	movw	r30, r12
    517c:	f7 fc       	sbrc	r15, 7
    517e:	85 91       	lpm	r24, Z+
    5180:	f7 fe       	sbrs	r15, 7
    5182:	81 91       	ld	r24, Z+
    5184:	6f 01       	movw	r12, r30
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	b3 01       	movw	r22, r6
    518a:	24 d1       	rcall	.+584    	; 0x53d4 <fputc>
    518c:	e1 10       	cpse	r14, r1
    518e:	ea 94       	dec	r14
    5190:	01 50       	subi	r16, 0x01	; 1
    5192:	10 40       	sbci	r17, 0x00	; 0
    5194:	01 15       	cp	r16, r1
    5196:	11 05       	cpc	r17, r1
    5198:	81 f7       	brne	.-32     	; 0x517a <vfprintf+0x1a2>
    519a:	e2 c0       	rjmp	.+452    	; 0x5360 <vfprintf+0x388>
    519c:	94 36       	cpi	r25, 0x64	; 100
    519e:	11 f0       	breq	.+4      	; 0x51a4 <vfprintf+0x1cc>
    51a0:	99 36       	cpi	r25, 0x69	; 105
    51a2:	61 f5       	brne	.+88     	; 0x51fc <vfprintf+0x224>
    51a4:	f7 fe       	sbrs	r15, 7
    51a6:	08 c0       	rjmp	.+16     	; 0x51b8 <vfprintf+0x1e0>
    51a8:	f5 01       	movw	r30, r10
    51aa:	20 81       	ld	r18, Z
    51ac:	31 81       	ldd	r19, Z+1	; 0x01
    51ae:	42 81       	ldd	r20, Z+2	; 0x02
    51b0:	53 81       	ldd	r21, Z+3	; 0x03
    51b2:	84 e0       	ldi	r24, 0x04	; 4
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	0a c0       	rjmp	.+20     	; 0x51cc <vfprintf+0x1f4>
    51b8:	f5 01       	movw	r30, r10
    51ba:	80 81       	ld	r24, Z
    51bc:	91 81       	ldd	r25, Z+1	; 0x01
    51be:	9c 01       	movw	r18, r24
    51c0:	44 27       	eor	r20, r20
    51c2:	37 fd       	sbrc	r19, 7
    51c4:	40 95       	com	r20
    51c6:	54 2f       	mov	r21, r20
    51c8:	82 e0       	ldi	r24, 0x02	; 2
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	a8 0e       	add	r10, r24
    51ce:	b9 1e       	adc	r11, r25
    51d0:	9f e6       	ldi	r25, 0x6F	; 111
    51d2:	f9 22       	and	r15, r25
    51d4:	57 ff       	sbrs	r21, 7
    51d6:	09 c0       	rjmp	.+18     	; 0x51ea <vfprintf+0x212>
    51d8:	50 95       	com	r21
    51da:	40 95       	com	r20
    51dc:	30 95       	com	r19
    51de:	21 95       	neg	r18
    51e0:	3f 4f       	sbci	r19, 0xFF	; 255
    51e2:	4f 4f       	sbci	r20, 0xFF	; 255
    51e4:	5f 4f       	sbci	r21, 0xFF	; 255
    51e6:	e0 e8       	ldi	r30, 0x80	; 128
    51e8:	fe 2a       	or	r15, r30
    51ea:	ca 01       	movw	r24, r20
    51ec:	b9 01       	movw	r22, r18
    51ee:	a1 01       	movw	r20, r2
    51f0:	2a e0       	ldi	r18, 0x0A	; 10
    51f2:	30 e0       	ldi	r19, 0x00	; 0
    51f4:	1b d1       	rcall	.+566    	; 0x542c <__ultoa_invert>
    51f6:	d8 2e       	mov	r13, r24
    51f8:	d2 18       	sub	r13, r2
    51fa:	3f c0       	rjmp	.+126    	; 0x527a <vfprintf+0x2a2>
    51fc:	95 37       	cpi	r25, 0x75	; 117
    51fe:	29 f4       	brne	.+10     	; 0x520a <vfprintf+0x232>
    5200:	1f 2d       	mov	r17, r15
    5202:	1f 7e       	andi	r17, 0xEF	; 239
    5204:	2a e0       	ldi	r18, 0x0A	; 10
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	1d c0       	rjmp	.+58     	; 0x5244 <vfprintf+0x26c>
    520a:	1f 2d       	mov	r17, r15
    520c:	19 7f       	andi	r17, 0xF9	; 249
    520e:	9f 36       	cpi	r25, 0x6F	; 111
    5210:	61 f0       	breq	.+24     	; 0x522a <vfprintf+0x252>
    5212:	90 37       	cpi	r25, 0x70	; 112
    5214:	20 f4       	brcc	.+8      	; 0x521e <vfprintf+0x246>
    5216:	98 35       	cpi	r25, 0x58	; 88
    5218:	09 f0       	breq	.+2      	; 0x521c <vfprintf+0x244>
    521a:	a5 c0       	rjmp	.+330    	; 0x5366 <vfprintf+0x38e>
    521c:	0f c0       	rjmp	.+30     	; 0x523c <vfprintf+0x264>
    521e:	90 37       	cpi	r25, 0x70	; 112
    5220:	39 f0       	breq	.+14     	; 0x5230 <vfprintf+0x258>
    5222:	98 37       	cpi	r25, 0x78	; 120
    5224:	09 f0       	breq	.+2      	; 0x5228 <vfprintf+0x250>
    5226:	9f c0       	rjmp	.+318    	; 0x5366 <vfprintf+0x38e>
    5228:	04 c0       	rjmp	.+8      	; 0x5232 <vfprintf+0x25a>
    522a:	28 e0       	ldi	r18, 0x08	; 8
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	0a c0       	rjmp	.+20     	; 0x5244 <vfprintf+0x26c>
    5230:	10 61       	ori	r17, 0x10	; 16
    5232:	14 fd       	sbrc	r17, 4
    5234:	14 60       	ori	r17, 0x04	; 4
    5236:	20 e1       	ldi	r18, 0x10	; 16
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	04 c0       	rjmp	.+8      	; 0x5244 <vfprintf+0x26c>
    523c:	14 fd       	sbrc	r17, 4
    523e:	16 60       	ori	r17, 0x06	; 6
    5240:	20 e1       	ldi	r18, 0x10	; 16
    5242:	32 e0       	ldi	r19, 0x02	; 2
    5244:	17 ff       	sbrs	r17, 7
    5246:	08 c0       	rjmp	.+16     	; 0x5258 <vfprintf+0x280>
    5248:	f5 01       	movw	r30, r10
    524a:	60 81       	ld	r22, Z
    524c:	71 81       	ldd	r23, Z+1	; 0x01
    524e:	82 81       	ldd	r24, Z+2	; 0x02
    5250:	93 81       	ldd	r25, Z+3	; 0x03
    5252:	44 e0       	ldi	r20, 0x04	; 4
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	08 c0       	rjmp	.+16     	; 0x5268 <vfprintf+0x290>
    5258:	f5 01       	movw	r30, r10
    525a:	80 81       	ld	r24, Z
    525c:	91 81       	ldd	r25, Z+1	; 0x01
    525e:	bc 01       	movw	r22, r24
    5260:	80 e0       	ldi	r24, 0x00	; 0
    5262:	90 e0       	ldi	r25, 0x00	; 0
    5264:	42 e0       	ldi	r20, 0x02	; 2
    5266:	50 e0       	ldi	r21, 0x00	; 0
    5268:	a4 0e       	add	r10, r20
    526a:	b5 1e       	adc	r11, r21
    526c:	a1 01       	movw	r20, r2
    526e:	de d0       	rcall	.+444    	; 0x542c <__ultoa_invert>
    5270:	d8 2e       	mov	r13, r24
    5272:	d2 18       	sub	r13, r2
    5274:	8f e7       	ldi	r24, 0x7F	; 127
    5276:	f8 2e       	mov	r15, r24
    5278:	f1 22       	and	r15, r17
    527a:	f6 fe       	sbrs	r15, 6
    527c:	0b c0       	rjmp	.+22     	; 0x5294 <vfprintf+0x2bc>
    527e:	5e ef       	ldi	r21, 0xFE	; 254
    5280:	f5 22       	and	r15, r21
    5282:	d9 14       	cp	r13, r9
    5284:	38 f4       	brcc	.+14     	; 0x5294 <vfprintf+0x2bc>
    5286:	f4 fe       	sbrs	r15, 4
    5288:	07 c0       	rjmp	.+14     	; 0x5298 <vfprintf+0x2c0>
    528a:	f2 fc       	sbrc	r15, 2
    528c:	05 c0       	rjmp	.+10     	; 0x5298 <vfprintf+0x2c0>
    528e:	8f ee       	ldi	r24, 0xEF	; 239
    5290:	f8 22       	and	r15, r24
    5292:	02 c0       	rjmp	.+4      	; 0x5298 <vfprintf+0x2c0>
    5294:	1d 2d       	mov	r17, r13
    5296:	01 c0       	rjmp	.+2      	; 0x529a <vfprintf+0x2c2>
    5298:	19 2d       	mov	r17, r9
    529a:	f4 fe       	sbrs	r15, 4
    529c:	0d c0       	rjmp	.+26     	; 0x52b8 <vfprintf+0x2e0>
    529e:	fe 01       	movw	r30, r28
    52a0:	ed 0d       	add	r30, r13
    52a2:	f1 1d       	adc	r31, r1
    52a4:	80 81       	ld	r24, Z
    52a6:	80 33       	cpi	r24, 0x30	; 48
    52a8:	19 f4       	brne	.+6      	; 0x52b0 <vfprintf+0x2d8>
    52aa:	99 ee       	ldi	r25, 0xE9	; 233
    52ac:	f9 22       	and	r15, r25
    52ae:	08 c0       	rjmp	.+16     	; 0x52c0 <vfprintf+0x2e8>
    52b0:	1f 5f       	subi	r17, 0xFF	; 255
    52b2:	f2 fe       	sbrs	r15, 2
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <vfprintf+0x2e8>
    52b6:	03 c0       	rjmp	.+6      	; 0x52be <vfprintf+0x2e6>
    52b8:	8f 2d       	mov	r24, r15
    52ba:	86 78       	andi	r24, 0x86	; 134
    52bc:	09 f0       	breq	.+2      	; 0x52c0 <vfprintf+0x2e8>
    52be:	1f 5f       	subi	r17, 0xFF	; 255
    52c0:	0f 2d       	mov	r16, r15
    52c2:	f3 fc       	sbrc	r15, 3
    52c4:	13 c0       	rjmp	.+38     	; 0x52ec <vfprintf+0x314>
    52c6:	f0 fe       	sbrs	r15, 0
    52c8:	0e c0       	rjmp	.+28     	; 0x52e6 <vfprintf+0x30e>
    52ca:	1e 15       	cp	r17, r14
    52cc:	10 f0       	brcs	.+4      	; 0x52d2 <vfprintf+0x2fa>
    52ce:	9d 2c       	mov	r9, r13
    52d0:	0a c0       	rjmp	.+20     	; 0x52e6 <vfprintf+0x30e>
    52d2:	9d 2c       	mov	r9, r13
    52d4:	9e 0c       	add	r9, r14
    52d6:	91 1a       	sub	r9, r17
    52d8:	1e 2d       	mov	r17, r14
    52da:	05 c0       	rjmp	.+10     	; 0x52e6 <vfprintf+0x30e>
    52dc:	80 e2       	ldi	r24, 0x20	; 32
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	b3 01       	movw	r22, r6
    52e2:	78 d0       	rcall	.+240    	; 0x53d4 <fputc>
    52e4:	1f 5f       	subi	r17, 0xFF	; 255
    52e6:	1e 15       	cp	r17, r14
    52e8:	c8 f3       	brcs	.-14     	; 0x52dc <vfprintf+0x304>
    52ea:	04 c0       	rjmp	.+8      	; 0x52f4 <vfprintf+0x31c>
    52ec:	1e 15       	cp	r17, r14
    52ee:	10 f4       	brcc	.+4      	; 0x52f4 <vfprintf+0x31c>
    52f0:	e1 1a       	sub	r14, r17
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <vfprintf+0x31e>
    52f4:	ee 24       	eor	r14, r14
    52f6:	04 ff       	sbrs	r16, 4
    52f8:	0e c0       	rjmp	.+28     	; 0x5316 <vfprintf+0x33e>
    52fa:	80 e3       	ldi	r24, 0x30	; 48
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	b3 01       	movw	r22, r6
    5300:	69 d0       	rcall	.+210    	; 0x53d4 <fputc>
    5302:	02 ff       	sbrs	r16, 2
    5304:	1b c0       	rjmp	.+54     	; 0x533c <vfprintf+0x364>
    5306:	01 fd       	sbrc	r16, 1
    5308:	03 c0       	rjmp	.+6      	; 0x5310 <vfprintf+0x338>
    530a:	88 e7       	ldi	r24, 0x78	; 120
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	0e c0       	rjmp	.+28     	; 0x532c <vfprintf+0x354>
    5310:	88 e5       	ldi	r24, 0x58	; 88
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	0b c0       	rjmp	.+22     	; 0x532c <vfprintf+0x354>
    5316:	80 2f       	mov	r24, r16
    5318:	86 78       	andi	r24, 0x86	; 134
    531a:	81 f0       	breq	.+32     	; 0x533c <vfprintf+0x364>
    531c:	01 ff       	sbrs	r16, 1
    531e:	02 c0       	rjmp	.+4      	; 0x5324 <vfprintf+0x34c>
    5320:	8b e2       	ldi	r24, 0x2B	; 43
    5322:	01 c0       	rjmp	.+2      	; 0x5326 <vfprintf+0x34e>
    5324:	80 e2       	ldi	r24, 0x20	; 32
    5326:	f7 fc       	sbrc	r15, 7
    5328:	8d e2       	ldi	r24, 0x2D	; 45
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	b3 01       	movw	r22, r6
    532e:	52 d0       	rcall	.+164    	; 0x53d4 <fputc>
    5330:	05 c0       	rjmp	.+10     	; 0x533c <vfprintf+0x364>
    5332:	80 e3       	ldi	r24, 0x30	; 48
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	b3 01       	movw	r22, r6
    5338:	4d d0       	rcall	.+154    	; 0x53d4 <fputc>
    533a:	9a 94       	dec	r9
    533c:	d9 14       	cp	r13, r9
    533e:	c8 f3       	brcs	.-14     	; 0x5332 <vfprintf+0x35a>
    5340:	da 94       	dec	r13
    5342:	f1 01       	movw	r30, r2
    5344:	ed 0d       	add	r30, r13
    5346:	f1 1d       	adc	r31, r1
    5348:	80 81       	ld	r24, Z
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	b3 01       	movw	r22, r6
    534e:	42 d0       	rcall	.+132    	; 0x53d4 <fputc>
    5350:	dd 20       	and	r13, r13
    5352:	b1 f7       	brne	.-20     	; 0x5340 <vfprintf+0x368>
    5354:	05 c0       	rjmp	.+10     	; 0x5360 <vfprintf+0x388>
    5356:	80 e2       	ldi	r24, 0x20	; 32
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	b3 01       	movw	r22, r6
    535c:	3b d0       	rcall	.+118    	; 0x53d4 <fputc>
    535e:	ea 94       	dec	r14
    5360:	ee 20       	and	r14, r14
    5362:	c9 f7       	brne	.-14     	; 0x5356 <vfprintf+0x37e>
    5364:	50 ce       	rjmp	.-864    	; 0x5006 <vfprintf+0x2e>
    5366:	f3 01       	movw	r30, r6
    5368:	66 81       	ldd	r22, Z+6	; 0x06
    536a:	77 81       	ldd	r23, Z+7	; 0x07
    536c:	cb 01       	movw	r24, r22
    536e:	2b 96       	adiw	r28, 0x0b	; 11
    5370:	e2 e1       	ldi	r30, 0x12	; 18
    5372:	d6 c0       	rjmp	.+428    	; 0x5520 <__epilogue_restores__>

00005374 <__eerd_byte_m32u4>:
    5374:	f9 99       	sbic	0x1f, 1	; 31
    5376:	fe cf       	rjmp	.-4      	; 0x5374 <__eerd_byte_m32u4>
    5378:	92 bd       	out	0x22, r25	; 34
    537a:	81 bd       	out	0x21, r24	; 33
    537c:	f8 9a       	sbi	0x1f, 0	; 31
    537e:	99 27       	eor	r25, r25
    5380:	80 b5       	in	r24, 0x20	; 32
    5382:	08 95       	ret

00005384 <__eeupd_byte_m32u4>:
    5384:	26 2f       	mov	r18, r22

00005386 <__eeupd_r18_m32u4>:
    5386:	f9 99       	sbic	0x1f, 1	; 31
    5388:	fe cf       	rjmp	.-4      	; 0x5386 <__eeupd_r18_m32u4>
    538a:	92 bd       	out	0x22, r25	; 34
    538c:	81 bd       	out	0x21, r24	; 33
    538e:	f8 9a       	sbi	0x1f, 0	; 31
    5390:	01 97       	sbiw	r24, 0x01	; 1
    5392:	00 b4       	in	r0, 0x20	; 32
    5394:	02 16       	cp	r0, r18
    5396:	39 f0       	breq	.+14     	; 0x53a6 <__eeupd_r18_m32u4+0x20>
    5398:	1f ba       	out	0x1f, r1	; 31
    539a:	20 bd       	out	0x20, r18	; 32
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	fa 9a       	sbi	0x1f, 2	; 31
    53a2:	f9 9a       	sbi	0x1f, 1	; 31
    53a4:	0f be       	out	0x3f, r0	; 63
    53a6:	08 95       	ret

000053a8 <strnlen_P>:
    53a8:	fc 01       	movw	r30, r24
    53aa:	05 90       	lpm	r0, Z+
    53ac:	61 50       	subi	r22, 0x01	; 1
    53ae:	70 40       	sbci	r23, 0x00	; 0
    53b0:	01 10       	cpse	r0, r1
    53b2:	d8 f7       	brcc	.-10     	; 0x53aa <strnlen_P+0x2>
    53b4:	80 95       	com	r24
    53b6:	90 95       	com	r25
    53b8:	8e 0f       	add	r24, r30
    53ba:	9f 1f       	adc	r25, r31
    53bc:	08 95       	ret

000053be <strnlen>:
    53be:	fc 01       	movw	r30, r24
    53c0:	61 50       	subi	r22, 0x01	; 1
    53c2:	70 40       	sbci	r23, 0x00	; 0
    53c4:	01 90       	ld	r0, Z+
    53c6:	01 10       	cpse	r0, r1
    53c8:	d8 f7       	brcc	.-10     	; 0x53c0 <strnlen+0x2>
    53ca:	80 95       	com	r24
    53cc:	90 95       	com	r25
    53ce:	8e 0f       	add	r24, r30
    53d0:	9f 1f       	adc	r25, r31
    53d2:	08 95       	ret

000053d4 <fputc>:
    53d4:	0f 93       	push	r16
    53d6:	1f 93       	push	r17
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	8c 01       	movw	r16, r24
    53de:	eb 01       	movw	r28, r22
    53e0:	8b 81       	ldd	r24, Y+3	; 0x03
    53e2:	81 ff       	sbrs	r24, 1
    53e4:	1b c0       	rjmp	.+54     	; 0x541c <fputc+0x48>
    53e6:	82 ff       	sbrs	r24, 2
    53e8:	0d c0       	rjmp	.+26     	; 0x5404 <fputc+0x30>
    53ea:	2e 81       	ldd	r18, Y+6	; 0x06
    53ec:	3f 81       	ldd	r19, Y+7	; 0x07
    53ee:	8c 81       	ldd	r24, Y+4	; 0x04
    53f0:	9d 81       	ldd	r25, Y+5	; 0x05
    53f2:	28 17       	cp	r18, r24
    53f4:	39 07       	cpc	r19, r25
    53f6:	64 f4       	brge	.+24     	; 0x5410 <fputc+0x3c>
    53f8:	e8 81       	ld	r30, Y
    53fa:	f9 81       	ldd	r31, Y+1	; 0x01
    53fc:	01 93       	st	Z+, r16
    53fe:	f9 83       	std	Y+1, r31	; 0x01
    5400:	e8 83       	st	Y, r30
    5402:	06 c0       	rjmp	.+12     	; 0x5410 <fputc+0x3c>
    5404:	e8 85       	ldd	r30, Y+8	; 0x08
    5406:	f9 85       	ldd	r31, Y+9	; 0x09
    5408:	80 2f       	mov	r24, r16
    540a:	09 95       	icall
    540c:	89 2b       	or	r24, r25
    540e:	31 f4       	brne	.+12     	; 0x541c <fputc+0x48>
    5410:	8e 81       	ldd	r24, Y+6	; 0x06
    5412:	9f 81       	ldd	r25, Y+7	; 0x07
    5414:	01 96       	adiw	r24, 0x01	; 1
    5416:	9f 83       	std	Y+7, r25	; 0x07
    5418:	8e 83       	std	Y+6, r24	; 0x06
    541a:	02 c0       	rjmp	.+4      	; 0x5420 <fputc+0x4c>
    541c:	0f ef       	ldi	r16, 0xFF	; 255
    541e:	1f ef       	ldi	r17, 0xFF	; 255
    5420:	c8 01       	movw	r24, r16
    5422:	df 91       	pop	r29
    5424:	cf 91       	pop	r28
    5426:	1f 91       	pop	r17
    5428:	0f 91       	pop	r16
    542a:	08 95       	ret

0000542c <__ultoa_invert>:
    542c:	fa 01       	movw	r30, r20
    542e:	aa 27       	eor	r26, r26
    5430:	28 30       	cpi	r18, 0x08	; 8
    5432:	51 f1       	breq	.+84     	; 0x5488 <__ultoa_invert+0x5c>
    5434:	20 31       	cpi	r18, 0x10	; 16
    5436:	81 f1       	breq	.+96     	; 0x5498 <__ultoa_invert+0x6c>
    5438:	e8 94       	clt
    543a:	6f 93       	push	r22
    543c:	6e 7f       	andi	r22, 0xFE	; 254
    543e:	6e 5f       	subi	r22, 0xFE	; 254
    5440:	7f 4f       	sbci	r23, 0xFF	; 255
    5442:	8f 4f       	sbci	r24, 0xFF	; 255
    5444:	9f 4f       	sbci	r25, 0xFF	; 255
    5446:	af 4f       	sbci	r26, 0xFF	; 255
    5448:	b1 e0       	ldi	r27, 0x01	; 1
    544a:	3e d0       	rcall	.+124    	; 0x54c8 <__ultoa_invert+0x9c>
    544c:	b4 e0       	ldi	r27, 0x04	; 4
    544e:	3c d0       	rcall	.+120    	; 0x54c8 <__ultoa_invert+0x9c>
    5450:	67 0f       	add	r22, r23
    5452:	78 1f       	adc	r23, r24
    5454:	89 1f       	adc	r24, r25
    5456:	9a 1f       	adc	r25, r26
    5458:	a1 1d       	adc	r26, r1
    545a:	68 0f       	add	r22, r24
    545c:	79 1f       	adc	r23, r25
    545e:	8a 1f       	adc	r24, r26
    5460:	91 1d       	adc	r25, r1
    5462:	a1 1d       	adc	r26, r1
    5464:	6a 0f       	add	r22, r26
    5466:	71 1d       	adc	r23, r1
    5468:	81 1d       	adc	r24, r1
    546a:	91 1d       	adc	r25, r1
    546c:	a1 1d       	adc	r26, r1
    546e:	20 d0       	rcall	.+64     	; 0x54b0 <__ultoa_invert+0x84>
    5470:	09 f4       	brne	.+2      	; 0x5474 <__ultoa_invert+0x48>
    5472:	68 94       	set
    5474:	3f 91       	pop	r19
    5476:	2a e0       	ldi	r18, 0x0A	; 10
    5478:	26 9f       	mul	r18, r22
    547a:	11 24       	eor	r1, r1
    547c:	30 19       	sub	r19, r0
    547e:	30 5d       	subi	r19, 0xD0	; 208
    5480:	31 93       	st	Z+, r19
    5482:	de f6       	brtc	.-74     	; 0x543a <__ultoa_invert+0xe>
    5484:	cf 01       	movw	r24, r30
    5486:	08 95       	ret
    5488:	46 2f       	mov	r20, r22
    548a:	47 70       	andi	r20, 0x07	; 7
    548c:	40 5d       	subi	r20, 0xD0	; 208
    548e:	41 93       	st	Z+, r20
    5490:	b3 e0       	ldi	r27, 0x03	; 3
    5492:	0f d0       	rcall	.+30     	; 0x54b2 <__ultoa_invert+0x86>
    5494:	c9 f7       	brne	.-14     	; 0x5488 <__ultoa_invert+0x5c>
    5496:	f6 cf       	rjmp	.-20     	; 0x5484 <__ultoa_invert+0x58>
    5498:	46 2f       	mov	r20, r22
    549a:	4f 70       	andi	r20, 0x0F	; 15
    549c:	40 5d       	subi	r20, 0xD0	; 208
    549e:	4a 33       	cpi	r20, 0x3A	; 58
    54a0:	18 f0       	brcs	.+6      	; 0x54a8 <__ultoa_invert+0x7c>
    54a2:	49 5d       	subi	r20, 0xD9	; 217
    54a4:	31 fd       	sbrc	r19, 1
    54a6:	40 52       	subi	r20, 0x20	; 32
    54a8:	41 93       	st	Z+, r20
    54aa:	02 d0       	rcall	.+4      	; 0x54b0 <__ultoa_invert+0x84>
    54ac:	a9 f7       	brne	.-22     	; 0x5498 <__ultoa_invert+0x6c>
    54ae:	ea cf       	rjmp	.-44     	; 0x5484 <__ultoa_invert+0x58>
    54b0:	b4 e0       	ldi	r27, 0x04	; 4
    54b2:	a6 95       	lsr	r26
    54b4:	97 95       	ror	r25
    54b6:	87 95       	ror	r24
    54b8:	77 95       	ror	r23
    54ba:	67 95       	ror	r22
    54bc:	ba 95       	dec	r27
    54be:	c9 f7       	brne	.-14     	; 0x54b2 <__ultoa_invert+0x86>
    54c0:	00 97       	sbiw	r24, 0x00	; 0
    54c2:	61 05       	cpc	r22, r1
    54c4:	71 05       	cpc	r23, r1
    54c6:	08 95       	ret
    54c8:	9b 01       	movw	r18, r22
    54ca:	ac 01       	movw	r20, r24
    54cc:	0a 2e       	mov	r0, r26
    54ce:	06 94       	lsr	r0
    54d0:	57 95       	ror	r21
    54d2:	47 95       	ror	r20
    54d4:	37 95       	ror	r19
    54d6:	27 95       	ror	r18
    54d8:	ba 95       	dec	r27
    54da:	c9 f7       	brne	.-14     	; 0x54ce <__ultoa_invert+0xa2>
    54dc:	62 0f       	add	r22, r18
    54de:	73 1f       	adc	r23, r19
    54e0:	84 1f       	adc	r24, r20
    54e2:	95 1f       	adc	r25, r21
    54e4:	a0 1d       	adc	r26, r0
    54e6:	08 95       	ret

000054e8 <__prologue_saves__>:
    54e8:	2f 92       	push	r2
    54ea:	3f 92       	push	r3
    54ec:	4f 92       	push	r4
    54ee:	5f 92       	push	r5
    54f0:	6f 92       	push	r6
    54f2:	7f 92       	push	r7
    54f4:	8f 92       	push	r8
    54f6:	9f 92       	push	r9
    54f8:	af 92       	push	r10
    54fa:	bf 92       	push	r11
    54fc:	cf 92       	push	r12
    54fe:	df 92       	push	r13
    5500:	ef 92       	push	r14
    5502:	ff 92       	push	r15
    5504:	0f 93       	push	r16
    5506:	1f 93       	push	r17
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	cd b7       	in	r28, 0x3d	; 61
    550e:	de b7       	in	r29, 0x3e	; 62
    5510:	ca 1b       	sub	r28, r26
    5512:	db 0b       	sbc	r29, r27
    5514:	0f b6       	in	r0, 0x3f	; 63
    5516:	f8 94       	cli
    5518:	de bf       	out	0x3e, r29	; 62
    551a:	0f be       	out	0x3f, r0	; 63
    551c:	cd bf       	out	0x3d, r28	; 61
    551e:	09 94       	ijmp

00005520 <__epilogue_restores__>:
    5520:	2a 88       	ldd	r2, Y+18	; 0x12
    5522:	39 88       	ldd	r3, Y+17	; 0x11
    5524:	48 88       	ldd	r4, Y+16	; 0x10
    5526:	5f 84       	ldd	r5, Y+15	; 0x0f
    5528:	6e 84       	ldd	r6, Y+14	; 0x0e
    552a:	7d 84       	ldd	r7, Y+13	; 0x0d
    552c:	8c 84       	ldd	r8, Y+12	; 0x0c
    552e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5530:	aa 84       	ldd	r10, Y+10	; 0x0a
    5532:	b9 84       	ldd	r11, Y+9	; 0x09
    5534:	c8 84       	ldd	r12, Y+8	; 0x08
    5536:	df 80       	ldd	r13, Y+7	; 0x07
    5538:	ee 80       	ldd	r14, Y+6	; 0x06
    553a:	fd 80       	ldd	r15, Y+5	; 0x05
    553c:	0c 81       	ldd	r16, Y+4	; 0x04
    553e:	1b 81       	ldd	r17, Y+3	; 0x03
    5540:	aa 81       	ldd	r26, Y+2	; 0x02
    5542:	b9 81       	ldd	r27, Y+1	; 0x01
    5544:	ce 0f       	add	r28, r30
    5546:	d1 1d       	adc	r29, r1
    5548:	0f b6       	in	r0, 0x3f	; 63
    554a:	f8 94       	cli
    554c:	de bf       	out	0x3e, r29	; 62
    554e:	0f be       	out	0x3f, r0	; 63
    5550:	cd bf       	out	0x3d, r28	; 61
    5552:	ed 01       	movw	r28, r26
    5554:	08 95       	ret

00005556 <_exit>:
    5556:	f8 94       	cli

00005558 <__stop_program>:
    5558:	ff cf       	rjmp	.-2      	; 0x5558 <__stop_program>
