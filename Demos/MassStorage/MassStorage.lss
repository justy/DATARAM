
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001bd4  00001c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080016e  0080016e  00001cd6  2**0
                  ALLOC
  3 .stab         00002238  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000871  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e8  00000000  00000000  00004781  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000dbe  00000000  00000000  00004c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009da4  00000000  00000000  00005a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002571  00000000  00000000  0000f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007769  00000000  00000000  00011d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000750  00000000  00000000  000194a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003770  00000000  00000000  00019bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b95  00000000  00000000  0001d368  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e8  00000000  00000000  00020efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
       0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	c0 c0       	rjmp	.+384    	; 0x186 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	be c0       	rjmp	.+380    	; 0x186 <__bad_interrupt>
       a:	00 00       	nop
       c:	bc c0       	rjmp	.+376    	; 0x186 <__bad_interrupt>
       e:	00 00       	nop
      10:	ba c0       	rjmp	.+372    	; 0x186 <__bad_interrupt>
      12:	00 00       	nop
      14:	b8 c0       	rjmp	.+368    	; 0x186 <__bad_interrupt>
      16:	00 00       	nop
      18:	b6 c0       	rjmp	.+364    	; 0x186 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b4 c0       	rjmp	.+360    	; 0x186 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b2 c0       	rjmp	.+356    	; 0x186 <__bad_interrupt>
      22:	00 00       	nop
      24:	b0 c0       	rjmp	.+352    	; 0x186 <__bad_interrupt>
      26:	00 00       	nop
      28:	3d c6       	rjmp	.+3194   	; 0xca4 <__vector_10>
      2a:	00 00       	nop
      2c:	02 c6       	rjmp	.+3076   	; 0xc32 <__vector_11>
      2e:	00 00       	nop
      30:	aa c0       	rjmp	.+340    	; 0x186 <__bad_interrupt>
      32:	00 00       	nop
      34:	a8 c0       	rjmp	.+336    	; 0x186 <__bad_interrupt>
      36:	00 00       	nop
      38:	a6 c0       	rjmp	.+332    	; 0x186 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a4 c0       	rjmp	.+328    	; 0x186 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a2 c0       	rjmp	.+324    	; 0x186 <__bad_interrupt>
      42:	00 00       	nop
      44:	a0 c0       	rjmp	.+320    	; 0x186 <__bad_interrupt>
      46:	00 00       	nop
      48:	9e c0       	rjmp	.+316    	; 0x186 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9c c0       	rjmp	.+312    	; 0x186 <__bad_interrupt>
      4e:	00 00       	nop
      50:	9a c0       	rjmp	.+308    	; 0x186 <__bad_interrupt>
      52:	00 00       	nop
      54:	98 c0       	rjmp	.+304    	; 0x186 <__bad_interrupt>
      56:	00 00       	nop
      58:	96 c0       	rjmp	.+300    	; 0x186 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	94 c0       	rjmp	.+296    	; 0x186 <__bad_interrupt>
      5e:	00 00       	nop
      60:	92 c0       	rjmp	.+292    	; 0x186 <__bad_interrupt>
      62:	00 00       	nop
      64:	90 c0       	rjmp	.+288    	; 0x186 <__bad_interrupt>
      66:	00 00       	nop
      68:	8e c0       	rjmp	.+284    	; 0x186 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8c c0       	rjmp	.+280    	; 0x186 <__bad_interrupt>
      6e:	00 00       	nop
      70:	8a c0       	rjmp	.+276    	; 0x186 <__bad_interrupt>
      72:	00 00       	nop
      74:	88 c0       	rjmp	.+272    	; 0x186 <__bad_interrupt>
      76:	00 00       	nop
      78:	86 c0       	rjmp	.+268    	; 0x186 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	84 c0       	rjmp	.+264    	; 0x186 <__bad_interrupt>
      7e:	00 00       	nop
      80:	82 c0       	rjmp	.+260    	; 0x186 <__bad_interrupt>
      82:	00 00       	nop
      84:	80 c0       	rjmp	.+256    	; 0x186 <__bad_interrupt>
      86:	00 00       	nop
      88:	7e c0       	rjmp	.+252    	; 0x186 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7c c0       	rjmp	.+248    	; 0x186 <__bad_interrupt>
      8e:	00 00       	nop
      90:	7a c0       	rjmp	.+244    	; 0x186 <__bad_interrupt>
      92:	00 00       	nop
      94:	78 c0       	rjmp	.+240    	; 0x186 <__bad_interrupt>
      96:	00 00       	nop
      98:	76 c0       	rjmp	.+236    	; 0x186 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	74 c0       	rjmp	.+232    	; 0x186 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	72 c0       	rjmp	.+228    	; 0x186 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	70 c0       	rjmp	.+224    	; 0x186 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6e c0       	rjmp	.+220    	; 0x186 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      ce:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..

000000de <LanguageString>:
      de:	04 03 09 04                                         ....

000000e2 <ManufacturerString>:
      e2:	18 03 4a 00 75 00 73 00 74 00 69 00 6e 00 20 00     ..J.u.s.t.i.n. .
      f2:	4a 00 61 00 6d 00 65 00 73 00 20 00 43 00 6c 00     J.a.m.e.s. .C.l.
     102:	61 00 79 00 64 00 65 00 6e 00 00 00                 a.y.d.e.n...

0000010e <ProductString>:
     10e:	2e 03 42 00 6c 00 75 00 65 00 63 00 68 00 69 00     ..B.l.u.e.c.h.i.
     11e:	6c 00 6c 00 69 00 20 00 55 00 53 00 42 00 20 00     l.l.i. .U.S.B. .
     12e:	48 00 65 00 61 00 72 00 74 00 20 00 44 00 61 00     H.e.a.r.t. .D.a.
     13e:	74 00 61 00 20 00 44 00 69 00 73 00 6b 00 00 00     t.a. .D.i.s.k...

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	da e0       	ldi	r29, 0x0A	; 10
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	e4 ed       	ldi	r30, 0xD4	; 212
     162:	fb e1       	ldi	r31, 0x1B	; 27
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ae 36       	cpi	r26, 0x6E	; 110
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	ae e6       	ldi	r26, 0x6E	; 110
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 37       	cpi	r26, 0x7B	; 123
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	43 d0       	rcall	.+134    	; 0x208 <main>
     182:	0c 94 e8 0d 	jmp	0x1bd0	; 0x1bd0 <_exit>

00000186 <__bad_interrupt>:
     186:	3c cf       	rjmp	.-392    	; 0x0 <__vectors>

00000188 <EVENT_USB_Device_Connect>:
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     188:	76 98       	cbi	0x0e, 6	; 14
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
  //LED_ON;
}
     18a:	08 95       	ret

0000018c <EVENT_USB_Device_Disconnect>:
     18c:	76 9a       	sbi	0x0e, 6	; 14
/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
  //LED_OFF;
}
     18e:	08 95       	ret

00000190 <CALLBACK_MS_Device_SCSICommandReceived>:
     190:	76 98       	cbi	0x0e, 6	; 14
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     192:	47 d3       	rcall	.+1678   	; 0x822 <SCSI_DecodeSCSICommand>
     194:	76 98       	cbi	0x0e, 6	; 14
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     196:	08 95       	ret

00000198 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <MS_Device_ProcessControlRequest>

000001a0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 c3 0b 	call	0x1786	; 0x1786 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1a8:	80 fd       	sbrc	r24, 0
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <EVENT_USB_Device_ConfigurationChanged+0x10>
     1ac:	90 e4       	ldi	r25, 0x40	; 64
     1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <EVENT_USB_Device_ConfigurationChanged+0x12>
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	8e b1       	in	r24, 0x0e	; 14
     1b4:	8f 7b       	andi	r24, 0xBF	; 191
     1b6:	98 2b       	or	r25, r24
     1b8:	9e b9       	out	0x0e, r25	; 14
}
     1ba:	08 95       	ret

000001bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1bc:	84 b7       	in	r24, 0x34	; 52
     1be:	87 7f       	andi	r24, 0xF7	; 247
     1c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1c2:	88 e1       	ldi	r24, 0x18	; 24
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	80 93 60 00 	sts	0x0060, r24
     1cc:	10 92 60 00 	sts	0x0060, r1
     1d0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	20 e8       	ldi	r18, 0x80	; 128
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	20 93 61 00 	sts	0x0061, r18
     1e0:	80 93 61 00 	sts	0x0061, r24
     1e4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRE  |=  LEDS_ALL_LEDS;
     1e6:	6e 9a       	sbi	0x0d, 6	; 13
				PORTE &= ~LEDS_ALL_LEDS;
     1e8:	76 98       	cbi	0x0e, 6	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1ea:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1ec:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1ee:	84 b1       	in	r24, 0x04	; 4
     1f0:	86 60       	ori	r24, 0x06	; 6
     1f2:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1f4:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1f6:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1f8:	8d b5       	in	r24, 0x2d	; 45
     1fa:	81 60       	ori	r24, 0x01	; 1
     1fc:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1fe:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     200:	8c e5       	ldi	r24, 0x5C	; 92
     202:	8c bd       	out	0x2c, r24	; 44

	/* Hardware Initialization */
	LEDs_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     204:	fe d4       	rcall	.+2556   	; 0xc02 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     206:	f3 c0       	rjmp	.+486    	; 0x3ee <DataflashManager_ResetDataflashProtections>

00000208 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     208:	4f 92       	push	r4
     20a:	5f 92       	push	r5
     20c:	6f 92       	push	r6
     20e:	7f 92       	push	r7
     210:	8f 92       	push	r8
     212:	9f 92       	push	r9
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
  unsigned char i;

	// set for 16 MHz clock, and make sure the LED is off
	CPU_PRESCALE(0);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	80 93 61 00 	sts	0x0061, r24
     22e:	10 92 61 00 	sts	0x0061, r1
	LED_CONFIG;
     232:	56 9a       	sbi	0x0a, 6	; 10
	LED_OFF;
     234:	5e 98       	cbi	0x0b, 6	; 11
     236:	c0 e0       	ldi	r28, 0x00	; 0
     238:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     23a:	80 e9       	ldi	r24, 0x90	; 144
     23c:	48 2e       	mov	r4, r24
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	58 2e       	mov	r5, r24
	
	// Justy's hack
  int d,e;
	for (d=0; d<100; d++) {
    LED_ON;
     242:	5e 9a       	sbi	0x0b, 6	; 11
		_delay_ms(1+.1*d);
     244:	be 01       	movw	r22, r28
     246:	88 27       	eor	r24, r24
     248:	77 fd       	sbrc	r23, 7
     24a:	80 95       	com	r24
     24c:	98 2f       	mov	r25, r24
     24e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__floatsisf>
     252:	3b 01       	movw	r6, r22
     254:	4c 01       	movw	r8, r24
     256:	2d ec       	ldi	r18, 0xCD	; 205
     258:	3c ec       	ldi	r19, 0xCC	; 204
     25a:	4c ec       	ldi	r20, 0xCC	; 204
     25c:	5d e3       	ldi	r21, 0x3D	; 61
     25e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e3       	ldi	r21, 0x3F	; 63
     26a:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__addsf3>
     26e:	5b 01       	movw	r10, r22
     270:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	4a e7       	ldi	r20, 0x7A	; 122
     278:	55 e4       	ldi	r21, 0x45	; 69
     27a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     27e:	7b 01       	movw	r14, r22
     280:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e8       	ldi	r20, 0x80	; 128
     288:	5f e3       	ldi	r21, 0x3F	; 63
     28a:	0e 94 9f 0c 	call	0x193e	; 0x193e <__cmpsf2>
     28e:	88 23       	and	r24, r24
     290:	1c f4       	brge	.+6      	; 0x298 <main+0x90>
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	22 c0       	rjmp	.+68     	; 0x2dc <main+0xd4>
		__ticks = 1;
	else if (__tmp > 65535)
     298:	c8 01       	movw	r24, r16
     29a:	b7 01       	movw	r22, r14
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	3f ef       	ldi	r19, 0xFF	; 255
     2a0:	4f e7       	ldi	r20, 0x7F	; 127
     2a2:	57 e4       	ldi	r21, 0x47	; 71
     2a4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__gesf2>
     2a8:	18 16       	cp	r1, r24
     2aa:	a4 f4       	brge	.+40     	; 0x2d4 <main+0xcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ac:	c6 01       	movw	r24, r12
     2ae:	b5 01       	movw	r22, r10
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e2       	ldi	r20, 0x20	; 32
     2b6:	51 e4       	ldi	r21, 0x41	; 65
     2b8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     2bc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixunssfsi>
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <main+0xc4>
     2c2:	c2 01       	movw	r24, r4
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0xbc>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c8:	61 50       	subi	r22, 0x01	; 1
     2ca:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2cc:	61 15       	cp	r22, r1
     2ce:	71 05       	cpc	r23, r1
     2d0:	c1 f7       	brne	.-16     	; 0x2c2 <main+0xba>
     2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <main+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d4:	c8 01       	movw	r24, r16
     2d6:	b7 01       	movw	r22, r14
     2d8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixunssfsi>
     2dc:	cb 01       	movw	r24, r22
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0xd6>
  LED_OFF;
     2e2:	5e 98       	cbi	0x0b, 6	; 11
  _delay_ms(21-.1*d);
     2e4:	c4 01       	movw	r24, r8
     2e6:	b3 01       	movw	r22, r6
     2e8:	2d ec       	ldi	r18, 0xCD	; 205
     2ea:	3c ec       	ldi	r19, 0xCC	; 204
     2ec:	4c ec       	ldi	r20, 0xCC	; 204
     2ee:	5d eb       	ldi	r21, 0xBD	; 189
     2f0:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	48 ea       	ldi	r20, 0xA8	; 168
     2fa:	51 e4       	ldi	r21, 0x41	; 65
     2fc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__addsf3>
     300:	5b 01       	movw	r10, r22
     302:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	4a e7       	ldi	r20, 0x7A	; 122
     30a:	55 e4       	ldi	r21, 0x45	; 69
     30c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     310:	7b 01       	movw	r14, r22
     312:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e8       	ldi	r20, 0x80	; 128
     31a:	5f e3       	ldi	r21, 0x3F	; 63
     31c:	0e 94 9f 0c 	call	0x193e	; 0x193e <__cmpsf2>
     320:	88 23       	and	r24, r24
     322:	1c f4       	brge	.+6      	; 0x32a <main+0x122>
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	22 c0       	rjmp	.+68     	; 0x36e <main+0x166>
		__ticks = 1;
	else if (__tmp > 65535)
     32a:	c8 01       	movw	r24, r16
     32c:	b7 01       	movw	r22, r14
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	3f ef       	ldi	r19, 0xFF	; 255
     332:	4f e7       	ldi	r20, 0x7F	; 127
     334:	57 e4       	ldi	r21, 0x47	; 71
     336:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__gesf2>
     33a:	18 16       	cp	r1, r24
     33c:	a4 f4       	brge	.+40     	; 0x366 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     33e:	c6 01       	movw	r24, r12
     340:	b5 01       	movw	r22, r10
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e2       	ldi	r20, 0x20	; 32
     348:	51 e4       	ldi	r21, 0x41	; 65
     34a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <__mulsf3>
     34e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixunssfsi>
     352:	05 c0       	rjmp	.+10     	; 0x35e <main+0x156>
     354:	c2 01       	movw	r24, r4
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <main+0x14e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     35a:	61 50       	subi	r22, 0x01	; 1
     35c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35e:	61 15       	cp	r22, r1
     360:	71 05       	cpc	r23, r1
     362:	c1 f7       	brne	.-16     	; 0x354 <main+0x14c>
     364:	07 c0       	rjmp	.+14     	; 0x374 <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     366:	c8 01       	movw	r24, r16
     368:	b7 01       	movw	r22, r14
     36a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixunssfsi>
     36e:	cb 01       	movw	r24, r22
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <main+0x168>
	LED_CONFIG;
	LED_OFF;
	
	// Justy's hack
  int d,e;
	for (d=0; d<100; d++) {
     374:	21 96       	adiw	r28, 0x01	; 1
     376:	c4 36       	cpi	r28, 0x64	; 100
     378:	d1 05       	cpc	r29, r1
     37a:	09 f0       	breq	.+2      	; 0x37e <main+0x176>
     37c:	62 cf       	rjmp	.-316    	; 0x242 <main+0x3a>
  LED_OFF;
  _delay_ms(21-.1*d);
	}
	
	
	SetupHardware();
     37e:	1e df       	rcall	.-452    	; 0x1bc <SetupHardware>
				PORTE &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LEDMask);
     380:	76 9a       	sbi	0x0e, 6	; 14

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     382:	78 94       	sei

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 a0 0a 	call	0x1540	; 0x1540 <MS_Device_USBTask>
		USB_USBTask();
     38c:	0e 94 8d 0a 	call	0x151a	; 0x151a <USB_USBTask>
     390:	f9 cf       	rjmp	.-14     	; 0x384 <main+0x17c>

00000392 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     392:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     394:	92 30       	cpi	r25, 0x02	; 2
     396:	49 f0       	breq	.+18     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x18>
     398:	93 30       	cpi	r25, 0x03	; 3
     39a:	61 f0       	breq	.+24     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x22>
     39c:	91 30       	cpi	r25, 0x01	; 1
     39e:	f9 f4       	brne	.+62     	; 0x3de <CALLBACK_USB_GetDescriptor+0x4c>
     3a0:	ec ea       	ldi	r30, 0xAC	; 172
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	22 e1       	ldi	r18, 0x12	; 18
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	1e c0       	rjmp	.+60     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x54>
     3aa:	ee eb       	ldi	r30, 0xBE	; 190
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	20 e2       	ldi	r18, 0x20	; 32
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	19 c0       	rjmp	.+50     	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	49 f0       	breq	.+18     	; 0x3ca <CALLBACK_USB_GetDescriptor+0x38>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	18 f0       	brcs	.+6      	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x30>
     3bc:	82 30       	cpi	r24, 0x02	; 2
     3be:	79 f4       	brne	.+30     	; 0x3de <CALLBACK_USB_GetDescriptor+0x4c>
     3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3c2:	ee ed       	ldi	r30, 0xDE	; 222
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	84 91       	lpm	r24, Z+
     3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3ca:	e2 ee       	ldi	r30, 0xE2	; 226
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	84 91       	lpm	r24, Z+
     3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3d2:	ee e0       	ldi	r30, 0x0E	; 14
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	84 91       	lpm	r24, Z+
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <CALLBACK_USB_GetDescriptor+0x54>
     3de:	e0 e0       	ldi	r30, 0x00	; 0
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3e6:	ed 93       	st	X+, r30
     3e8:	fc 93       	st	X, r31
	return Size;
}
     3ea:	c9 01       	movw	r24, r18
     3ec:	08 95       	ret

000003ee <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3ee:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3f0:	87 ed       	ldi	r24, 0xD7	; 215
     3f2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3f4:	0d b4       	in	r0, 0x2d	; 45
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <DataflashManager_ResetDataflashProtections+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3fa:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3fc:	0d b4       	in	r0, 0x2d	; 45
     3fe:	07 fe       	sbrs	r0, 7
     400:	fd cf       	rjmp	.-6      	; 0x3fc <DataflashManager_ResetDataflashProtections+0xe>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     402:	0e b4       	in	r0, 0x2e	; 46
     404:	01 fe       	sbrs	r0, 1
     406:	14 c0       	rjmp	.+40     	; 0x430 <DataflashManager_ResetDataflashProtections+0x42>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     408:	8d e3       	ldi	r24, 0x3D	; 61
     40a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     40c:	0d b4       	in	r0, 0x2d	; 45
     40e:	07 fe       	sbrs	r0, 7
     410:	fd cf       	rjmp	.-6      	; 0x40c <DataflashManager_ResetDataflashProtections+0x1e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     412:	8a e2       	ldi	r24, 0x2A	; 42
     414:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     416:	0d b4       	in	r0, 0x2d	; 45
     418:	07 fe       	sbrs	r0, 7
     41a:	fd cf       	rjmp	.-6      	; 0x416 <DataflashManager_ResetDataflashProtections+0x28>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     41c:	8f e7       	ldi	r24, 0x7F	; 127
     41e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     420:	0d b4       	in	r0, 0x2d	; 45
     422:	07 fe       	sbrs	r0, 7
     424:	fd cf       	rjmp	.-6      	; 0x420 <DataflashManager_ResetDataflashProtections+0x32>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     426:	8f ec       	ldi	r24, 0xCF	; 207
     428:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     42a:	0d b4       	in	r0, 0x2d	; 45
     42c:	07 fe       	sbrs	r0, 7
     42e:	fd cf       	rjmp	.-6      	; 0x42a <DataflashManager_ResetDataflashProtections+0x3c>
     430:	08 95       	ret

00000432 <DataflashManager_CheckDataflashOperation>:
     432:	2c 98       	cbi	0x05, 4	; 5
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     434:	8f e9       	ldi	r24, 0x9F	; 159
     436:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     438:	0d b4       	in	r0, 0x2d	; 45
     43a:	07 fe       	sbrs	r0, 7
     43c:	fd cf       	rjmp	.-6      	; 0x438 <DataflashManager_CheckDataflashOperation+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     43e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <DataflashManager_CheckDataflashOperation+0xe>
				return SPDR;
     446:	8e b5       	in	r24, 0x2e	; 46
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	8f 31       	cpi	r24, 0x1F	; 31
     44c:	09 f4       	brne	.+2      	; 0x450 <DataflashManager_CheckDataflashOperation+0x1e>
     44e:	91 e0       	ldi	r25, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     450:	89 2f       	mov	r24, r25
     452:	08 95       	ret

00000454 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     454:	df 92       	push	r13
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
     464:	e9 01       	movw	r28, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     466:	82 ed       	ldi	r24, 0xD2	; 210
     468:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     46a:	0d b4       	in	r0, 0x2d	; 45
     46c:	07 fe       	sbrs	r0, 7
     46e:	fd cf       	rjmp	.-6      	; 0x46a <DataflashManager_ReadBlocks+0x16>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     470:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     472:	0d b4       	in	r0, 0x2d	; 45
     474:	07 fe       	sbrs	r0, 7
     476:	fd cf       	rjmp	.-6      	; 0x472 <DataflashManager_ReadBlocks+0x1e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     478:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     47a:	0d b4       	in	r0, 0x2d	; 45
     47c:	07 fe       	sbrs	r0, 7
     47e:	fd cf       	rjmp	.-6      	; 0x47a <DataflashManager_ReadBlocks+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     480:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     482:	0d b4       	in	r0, 0x2d	; 45
     484:	07 fe       	sbrs	r0, 7
     486:	fd cf       	rjmp	.-6      	; 0x482 <DataflashManager_ReadBlocks+0x2e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     488:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     48a:	0d b4       	in	r0, 0x2d	; 45
     48c:	07 fe       	sbrs	r0, 7
     48e:	fd cf       	rjmp	.-6      	; 0x48a <DataflashManager_ReadBlocks+0x36>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     490:	42 d3       	rcall	.+1668   	; 0xb16 <Endpoint_WaitUntilReady>
     492:	88 23       	and	r24, r24
     494:	09 f0       	breq	.+2      	; 0x498 <DataflashManager_ReadBlocks+0x44>
     496:	af c0       	rjmp	.+350    	; 0x5f6 <DataflashManager_ReadBlocks+0x1a2>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     498:	10 e0       	ldi	r17, 0x00	; 0
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     49a:	82 ed       	ldi	r24, 0xD2	; 210
     49c:	d8 2e       	mov	r13, r24
     49e:	9f c0       	rjmp	.+318    	; 0x5de <DataflashManager_ReadBlocks+0x18a>
     4a0:	00 e0       	ldi	r16, 0x00	; 0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     4a2:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     4a6:	85 fd       	sbrc	r24, 5
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <DataflashManager_ReadBlocks+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4aa:	80 91 e8 00 	lds	r24, 0x00E8
     4ae:	8e 77       	andi	r24, 0x7E	; 126
     4b0:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     4b4:	30 d3       	rcall	.+1632   	; 0xb16 <Endpoint_WaitUntilReady>
     4b6:	88 23       	and	r24, r24
     4b8:	09 f0       	breq	.+2      	; 0x4bc <DataflashManager_ReadBlocks+0x68>
     4ba:	9d c0       	rjmp	.+314    	; 0x5f6 <DataflashManager_ReadBlocks+0x1a2>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     4bc:	10 32       	cpi	r17, 0x20	; 32
     4be:	a9 f4       	brne	.+42     	; 0x4ea <DataflashManager_ReadBlocks+0x96>
     4c0:	de bc       	out	0x2e, r13	; 46
				while (!(SPSR & (1 << SPIF)));
     4c2:	0d b4       	in	r0, 0x2d	; 45
     4c4:	07 fe       	sbrs	r0, 7
     4c6:	fd cf       	rjmp	.-6      	; 0x4c2 <DataflashManager_ReadBlocks+0x6e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4c8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ca:	0d b4       	in	r0, 0x2d	; 45
     4cc:	07 fe       	sbrs	r0, 7
     4ce:	fd cf       	rjmp	.-6      	; 0x4ca <DataflashManager_ReadBlocks+0x76>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <DataflashManager_ReadBlocks+0x7e>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4d8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <DataflashManager_ReadBlocks+0x86>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4e0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <DataflashManager_ReadBlocks+0x8e>
     4e8:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4ea:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ec:	0d b4       	in	r0, 0x2d	; 45
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <DataflashManager_ReadBlocks+0x98>
				return SPDR;
     4f2:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f4:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <DataflashManager_ReadBlocks+0xa6>
				return SPDR;
     500:	8e b5       	in	r24, 0x2e	; 46
     502:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     506:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     508:	0d b4       	in	r0, 0x2d	; 45
     50a:	07 fe       	sbrs	r0, 7
     50c:	fd cf       	rjmp	.-6      	; 0x508 <DataflashManager_ReadBlocks+0xb4>
				return SPDR;
     50e:	8e b5       	in	r24, 0x2e	; 46
     510:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     514:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     516:	0d b4       	in	r0, 0x2d	; 45
     518:	07 fe       	sbrs	r0, 7
     51a:	fd cf       	rjmp	.-6      	; 0x516 <DataflashManager_ReadBlocks+0xc2>
				return SPDR;
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     522:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     524:	0d b4       	in	r0, 0x2d	; 45
     526:	07 fe       	sbrs	r0, 7
     528:	fd cf       	rjmp	.-6      	; 0x524 <DataflashManager_ReadBlocks+0xd0>
				return SPDR;
     52a:	8e b5       	in	r24, 0x2e	; 46
     52c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     530:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <DataflashManager_ReadBlocks+0xde>
				return SPDR;
     538:	8e b5       	in	r24, 0x2e	; 46
     53a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     53e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <DataflashManager_ReadBlocks+0xec>
				return SPDR;
     546:	8e b5       	in	r24, 0x2e	; 46
     548:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     54c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     54e:	0d b4       	in	r0, 0x2d	; 45
     550:	07 fe       	sbrs	r0, 7
     552:	fd cf       	rjmp	.-6      	; 0x54e <DataflashManager_ReadBlocks+0xfa>
				return SPDR;
     554:	8e b5       	in	r24, 0x2e	; 46
     556:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     55a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     55c:	0d b4       	in	r0, 0x2d	; 45
     55e:	07 fe       	sbrs	r0, 7
     560:	fd cf       	rjmp	.-6      	; 0x55c <DataflashManager_ReadBlocks+0x108>
				return SPDR;
     562:	8e b5       	in	r24, 0x2e	; 46
     564:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     568:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <DataflashManager_ReadBlocks+0x116>
				return SPDR;
     570:	8e b5       	in	r24, 0x2e	; 46
     572:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     576:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     578:	0d b4       	in	r0, 0x2d	; 45
     57a:	07 fe       	sbrs	r0, 7
     57c:	fd cf       	rjmp	.-6      	; 0x578 <DataflashManager_ReadBlocks+0x124>
				return SPDR;
     57e:	8e b5       	in	r24, 0x2e	; 46
     580:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     584:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     586:	0d b4       	in	r0, 0x2d	; 45
     588:	07 fe       	sbrs	r0, 7
     58a:	fd cf       	rjmp	.-6      	; 0x586 <DataflashManager_ReadBlocks+0x132>
				return SPDR;
     58c:	8e b5       	in	r24, 0x2e	; 46
     58e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     592:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     594:	0d b4       	in	r0, 0x2d	; 45
     596:	07 fe       	sbrs	r0, 7
     598:	fd cf       	rjmp	.-6      	; 0x594 <DataflashManager_ReadBlocks+0x140>
				return SPDR;
     59a:	8e b5       	in	r24, 0x2e	; 46
     59c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5a0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5a2:	0d b4       	in	r0, 0x2d	; 45
     5a4:	07 fe       	sbrs	r0, 7
     5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <DataflashManager_ReadBlocks+0x14e>
				return SPDR;
     5a8:	8e b5       	in	r24, 0x2e	; 46
     5aa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5b0:	0d b4       	in	r0, 0x2d	; 45
     5b2:	07 fe       	sbrs	r0, 7
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <DataflashManager_ReadBlocks+0x15c>
				return SPDR;
     5b6:	8e b5       	in	r24, 0x2e	; 46
     5b8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5be:	0d b4       	in	r0, 0x2d	; 45
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <DataflashManager_ReadBlocks+0x16a>
				return SPDR;
     5c4:	8e b5       	in	r24, 0x2e	; 46
     5c6:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     5ca:	f7 01       	movw	r30, r14
     5cc:	86 a9       	ldd	r24, Z+54	; 0x36
     5ce:	88 23       	and	r24, r24
     5d0:	91 f4       	brne	.+36     	; 0x5f6 <DataflashManager_ReadBlocks+0x1a2>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     5d2:	1f 5f       	subi	r17, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     5d4:	0f 5f       	subi	r16, 0xFF	; 255
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     5d6:	00 32       	cpi	r16, 0x20	; 32
     5d8:	09 f0       	breq	.+2      	; 0x5dc <DataflashManager_ReadBlocks+0x188>
     5da:	63 cf       	rjmp	.-314    	; 0x4a2 <DataflashManager_ReadBlocks+0x4e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     5dc:	21 97       	sbiw	r28, 0x01	; 1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     5de:	20 97       	sbiw	r28, 0x00	; 0
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <DataflashManager_ReadBlocks+0x190>
     5e2:	5e cf       	rjmp	.-324    	; 0x4a0 <DataflashManager_ReadBlocks+0x4c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5e4:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5e8:	85 fd       	sbrc	r24, 5
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <DataflashManager_ReadBlocks+0x1a2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ec:	80 91 e8 00 	lds	r24, 0x00E8
     5f0:	8e 77       	andi	r24, 0x7E	; 126
     5f2:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	08 95       	ret

00000606 <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	6c 01       	movw	r12, r24
     618:	e9 01       	movw	r28, r18
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     61a:	84 e8       	ldi	r24, 0x84	; 132
     61c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     61e:	0d b4       	in	r0, 0x2d	; 45
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <DataflashManager_WriteBlocks+0x18>
	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     624:	78 d2       	rcall	.+1264   	; 0xb16 <Endpoint_WaitUntilReady>
     626:	88 23       	and	r24, r24
     628:	09 f0       	breq	.+2      	; 0x62c <DataflashManager_WriteBlocks+0x26>
     62a:	aa c0       	rjmp	.+340    	; 0x780 <DataflashManager_WriteBlocks+0x17a>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	00 e0       	ldi	r16, 0x00	; 0
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
				  UsingSecondBuffer = !(UsingSecondBuffer);
     630:	ee 24       	eor	r14, r14
     632:	e3 94       	inc	r14
     634:	90 c0       	rjmp	.+288    	; 0x756 <DataflashManager_WriteBlocks+0x150>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     636:	ff 24       	eor	r15, r15
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     638:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     63c:	85 fd       	sbrc	r24, 5
     63e:	09 c0       	rjmp	.+18     	; 0x652 <DataflashManager_WriteBlocks+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     640:	80 91 e8 00 	lds	r24, 0x00E8
     644:	8b 77       	andi	r24, 0x7B	; 123
     646:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     64a:	65 d2       	rcall	.+1226   	; 0xb16 <Endpoint_WaitUntilReady>
     64c:	88 23       	and	r24, r24
     64e:	09 f0       	breq	.+2      	; 0x652 <DataflashManager_WriteBlocks+0x4c>
     650:	97 c0       	rjmp	.+302    	; 0x780 <DataflashManager_WriteBlocks+0x17a>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     652:	10 32       	cpi	r17, 0x20	; 32
     654:	a9 f4       	brne	.+42     	; 0x680 <DataflashManager_WriteBlocks+0x7a>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     656:	00 23       	and	r16, r16
     658:	11 f4       	brne	.+4      	; 0x65e <DataflashManager_WriteBlocks+0x58>
     65a:	83 e8       	ldi	r24, 0x83	; 131
     65c:	01 c0       	rjmp	.+2      	; 0x660 <DataflashManager_WriteBlocks+0x5a>
     65e:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     660:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     662:	0d b4       	in	r0, 0x2d	; 45
     664:	07 fe       	sbrs	r0, 7
     666:	fd cf       	rjmp	.-6      	; 0x662 <DataflashManager_WriteBlocks+0x5c>
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     668:	2c 9b       	sbis	0x05, 4	; 5
				  UsingSecondBuffer = !(UsingSecondBuffer);
     66a:	0e 25       	eor	r16, r14
					Dataflash_WaitWhileBusy();
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     66c:	00 23       	and	r16, r16
     66e:	11 f4       	brne	.+4      	; 0x674 <DataflashManager_WriteBlocks+0x6e>
     670:	84 e8       	ldi	r24, 0x84	; 132
     672:	01 c0       	rjmp	.+2      	; 0x676 <DataflashManager_WriteBlocks+0x70>
     674:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     676:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     678:	0d b4       	in	r0, 0x2d	; 45
     67a:	07 fe       	sbrs	r0, 7
     67c:	fd cf       	rjmp	.-6      	; 0x678 <DataflashManager_WriteBlocks+0x72>
     67e:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     680:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     684:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     686:	0d b4       	in	r0, 0x2d	; 45
     688:	07 fe       	sbrs	r0, 7
     68a:	fd cf       	rjmp	.-6      	; 0x686 <DataflashManager_WriteBlocks+0x80>
     68c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     690:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     692:	0d b4       	in	r0, 0x2d	; 45
     694:	07 fe       	sbrs	r0, 7
     696:	fd cf       	rjmp	.-6      	; 0x692 <DataflashManager_WriteBlocks+0x8c>
     698:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     69c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     69e:	0d b4       	in	r0, 0x2d	; 45
     6a0:	07 fe       	sbrs	r0, 7
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <DataflashManager_WriteBlocks+0x98>
     6a4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6aa:	0d b4       	in	r0, 0x2d	; 45
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <DataflashManager_WriteBlocks+0xa4>
     6b0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <DataflashManager_WriteBlocks+0xb0>
     6bc:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6c0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6c2:	0d b4       	in	r0, 0x2d	; 45
     6c4:	07 fe       	sbrs	r0, 7
     6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <DataflashManager_WriteBlocks+0xbc>
     6c8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6cc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6ce:	0d b4       	in	r0, 0x2d	; 45
     6d0:	07 fe       	sbrs	r0, 7
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <DataflashManager_WriteBlocks+0xc8>
     6d4:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6d8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6da:	0d b4       	in	r0, 0x2d	; 45
     6dc:	07 fe       	sbrs	r0, 7
     6de:	fd cf       	rjmp	.-6      	; 0x6da <DataflashManager_WriteBlocks+0xd4>
     6e0:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6e4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <DataflashManager_WriteBlocks+0xe0>
     6ec:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6f0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6f2:	0d b4       	in	r0, 0x2d	; 45
     6f4:	07 fe       	sbrs	r0, 7
     6f6:	fd cf       	rjmp	.-6      	; 0x6f2 <DataflashManager_WriteBlocks+0xec>
     6f8:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     6fc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     6fe:	0d b4       	in	r0, 0x2d	; 45
     700:	07 fe       	sbrs	r0, 7
     702:	fd cf       	rjmp	.-6      	; 0x6fe <DataflashManager_WriteBlocks+0xf8>
     704:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     708:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     70a:	0d b4       	in	r0, 0x2d	; 45
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <DataflashManager_WriteBlocks+0x104>
     710:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     714:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     716:	0d b4       	in	r0, 0x2d	; 45
     718:	07 fe       	sbrs	r0, 7
     71a:	fd cf       	rjmp	.-6      	; 0x716 <DataflashManager_WriteBlocks+0x110>
     71c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     720:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     722:	0d b4       	in	r0, 0x2d	; 45
     724:	07 fe       	sbrs	r0, 7
     726:	fd cf       	rjmp	.-6      	; 0x722 <DataflashManager_WriteBlocks+0x11c>
     728:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     72c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     72e:	0d b4       	in	r0, 0x2d	; 45
     730:	07 fe       	sbrs	r0, 7
     732:	fd cf       	rjmp	.-6      	; 0x72e <DataflashManager_WriteBlocks+0x128>
     734:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     738:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     73a:	0d b4       	in	r0, 0x2d	; 45
     73c:	07 fe       	sbrs	r0, 7
     73e:	fd cf       	rjmp	.-6      	; 0x73a <DataflashManager_WriteBlocks+0x134>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     740:	f6 01       	movw	r30, r12
     742:	86 a9       	ldd	r24, Z+54	; 0x36
     744:	88 23       	and	r24, r24
     746:	e1 f4       	brne	.+56     	; 0x780 <DataflashManager_WriteBlocks+0x17a>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     748:	1f 5f       	subi	r17, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     74a:	f3 94       	inc	r15
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     74c:	f0 e2       	ldi	r31, 0x20	; 32
     74e:	ff 16       	cp	r15, r31
     750:	09 f0       	breq	.+2      	; 0x754 <DataflashManager_WriteBlocks+0x14e>
     752:	72 cf       	rjmp	.-284    	; 0x638 <DataflashManager_WriteBlocks+0x32>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     754:	21 97       	sbiw	r28, 0x01	; 1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     756:	20 97       	sbiw	r28, 0x00	; 0
     758:	09 f0       	breq	.+2      	; 0x75c <DataflashManager_WriteBlocks+0x156>
     75a:	6d cf       	rjmp	.-294    	; 0x636 <DataflashManager_WriteBlocks+0x30>
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     75c:	00 23       	and	r16, r16
     75e:	11 f4       	brne	.+4      	; 0x764 <DataflashManager_WriteBlocks+0x15e>
     760:	83 e8       	ldi	r24, 0x83	; 131
     762:	01 c0       	rjmp	.+2      	; 0x766 <DataflashManager_WriteBlocks+0x160>
     764:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     766:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     768:	0d b4       	in	r0, 0x2d	; 45
     76a:	07 fe       	sbrs	r0, 7
     76c:	fd cf       	rjmp	.-6      	; 0x768 <DataflashManager_WriteBlocks+0x162>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     76e:	80 91 e8 00 	lds	r24, 0x00E8
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
	Dataflash_WaitWhileBusy();

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     772:	85 fd       	sbrc	r24, 5
     774:	05 c0       	rjmp	.+10     	; 0x780 <DataflashManager_WriteBlocks+0x17a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     776:	80 91 e8 00 	lds	r24, 0x00E8
     77a:	8b 77       	andi	r24, 0x7B	; 123
     77c:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	df 90       	pop	r13
     78e:	cf 90       	pop	r12
     790:	08 95       	ret

00000792 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	8c 01       	movw	r16, r24
     79c:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     79e:	f8 01       	movw	r30, r16
     7a0:	46 8d       	ldd	r20, Z+30	; 0x1e
     7a2:	55 8d       	ldd	r21, Z+29	; 0x1d
     7a4:	64 8d       	ldd	r22, Z+28	; 0x1c
     7a6:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     7a8:	c1 a1       	ldd	r28, Z+33	; 0x21
     7aa:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     7ac:	40 30       	cpi	r20, 0x00	; 0
     7ae:	f2 e0       	ldi	r31, 0x02	; 2
     7b0:	5f 07       	cpc	r21, r31
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	6f 07       	cpc	r22, r31
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	7f 07       	cpc	r23, r31
     7ba:	68 f0       	brcs	.+26     	; 0x7d6 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     7bc:	80 91 39 01 	lds	r24, 0x0139
     7c0:	80 7f       	andi	r24, 0xF0	; 240
     7c2:	85 60       	ori	r24, 0x05	; 5
     7c4:	80 93 39 01 	sts	0x0139, r24
     7c8:	81 e2       	ldi	r24, 0x21	; 33
     7ca:	80 93 43 01 	sts	0x0143, r24
     7ce:	10 92 44 01 	sts	0x0144, r1
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	21 c0       	rjmp	.+66     	; 0x818 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     7d6:	88 23       	and	r24, r24
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     7da:	c8 01       	movw	r24, r16
     7dc:	9e 01       	movw	r18, r28
     7de:	3a de       	rcall	.-908    	; 0x454 <DataflashManager_ReadBlocks>
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     7e2:	c8 01       	movw	r24, r16
     7e4:	9e 01       	movw	r18, r28
     7e6:	0f df       	rcall	.-482    	; 0x606 <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     7e8:	9e 01       	movw	r18, r28
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	44 1f       	adc	r20, r20
     7f6:	55 1f       	adc	r21, r21
     7f8:	8a 95       	dec	r24
     7fa:	d1 f7       	brne	.-12     	; 0x7f0 <SCSI_Command_ReadWrite_10+0x5e>
     7fc:	f8 01       	movw	r30, r16
     7fe:	82 89       	ldd	r24, Z+18	; 0x12
     800:	93 89       	ldd	r25, Z+19	; 0x13
     802:	a4 89       	ldd	r26, Z+20	; 0x14
     804:	b5 89       	ldd	r27, Z+21	; 0x15
     806:	82 1b       	sub	r24, r18
     808:	93 0b       	sbc	r25, r19
     80a:	a4 0b       	sbc	r26, r20
     80c:	b5 0b       	sbc	r27, r21
     80e:	82 8b       	std	Z+18, r24	; 0x12
     810:	93 8b       	std	Z+19, r25	; 0x13
     812:	a4 8b       	std	Z+20, r26	; 0x14
     814:	b5 8b       	std	Z+21, r27	; 0x15
     816:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	df 93       	push	r29
     830:	cf 93       	push	r28
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	28 97       	sbiw	r28, 0x08	; 8
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     844:	fc 01       	movw	r30, r24
     846:	81 8d       	ldd	r24, Z+25	; 0x19
     848:	8d 31       	cpi	r24, 0x1D	; 29
     84a:	09 f4       	brne	.+2      	; 0x84e <SCSI_DecodeSCSICommand+0x2c>
     84c:	a6 c0       	rjmp	.+332    	; 0x99a <SCSI_DecodeSCSICommand+0x178>
     84e:	8e 31       	cpi	r24, 0x1E	; 30
     850:	78 f4       	brcc	.+30     	; 0x870 <SCSI_DecodeSCSICommand+0x4e>
     852:	83 30       	cpi	r24, 0x03	; 3
     854:	09 f4       	brne	.+2      	; 0x858 <SCSI_DecodeSCSICommand+0x36>
     856:	52 c0       	rjmp	.+164    	; 0x8fc <SCSI_DecodeSCSICommand+0xda>
     858:	84 30       	cpi	r24, 0x04	; 4
     85a:	20 f4       	brcc	.+8      	; 0x864 <SCSI_DecodeSCSICommand+0x42>
     85c:	88 23       	and	r24, r24
     85e:	09 f4       	brne	.+2      	; 0x862 <SCSI_DecodeSCSICommand+0x40>
     860:	d9 c0       	rjmp	.+434    	; 0xa14 <SCSI_DecodeSCSICommand+0x1f2>
     862:	de c0       	rjmp	.+444    	; 0xa20 <SCSI_DecodeSCSICommand+0x1fe>
     864:	82 31       	cpi	r24, 0x12	; 18
     866:	b9 f0       	breq	.+46     	; 0x896 <SCSI_DecodeSCSICommand+0x74>
     868:	8a 31       	cpi	r24, 0x1A	; 26
     86a:	09 f0       	breq	.+2      	; 0x86e <SCSI_DecodeSCSICommand+0x4c>
     86c:	d9 c0       	rjmp	.+434    	; 0xa20 <SCSI_DecodeSCSICommand+0x1fe>
     86e:	b8 c0       	rjmp	.+368    	; 0x9e0 <SCSI_DecodeSCSICommand+0x1be>
     870:	88 32       	cpi	r24, 0x28	; 40
     872:	09 f4       	brne	.+2      	; 0x876 <SCSI_DecodeSCSICommand+0x54>
     874:	af c0       	rjmp	.+350    	; 0x9d4 <SCSI_DecodeSCSICommand+0x1b2>
     876:	89 32       	cpi	r24, 0x29	; 41
     878:	38 f4       	brcc	.+14     	; 0x888 <SCSI_DecodeSCSICommand+0x66>
     87a:	8e 31       	cpi	r24, 0x1E	; 30
     87c:	09 f4       	brne	.+2      	; 0x880 <SCSI_DecodeSCSICommand+0x5e>
     87e:	ca c0       	rjmp	.+404    	; 0xa14 <SCSI_DecodeSCSICommand+0x1f2>
     880:	85 32       	cpi	r24, 0x25	; 37
     882:	09 f0       	breq	.+2      	; 0x886 <SCSI_DecodeSCSICommand+0x64>
     884:	cd c0       	rjmp	.+410    	; 0xa20 <SCSI_DecodeSCSICommand+0x1fe>
     886:	5d c0       	rjmp	.+186    	; 0x942 <SCSI_DecodeSCSICommand+0x120>
     888:	8a 32       	cpi	r24, 0x2A	; 42
     88a:	09 f4       	brne	.+2      	; 0x88e <SCSI_DecodeSCSICommand+0x6c>
     88c:	a0 c0       	rjmp	.+320    	; 0x9ce <SCSI_DecodeSCSICommand+0x1ac>
     88e:	8f 32       	cpi	r24, 0x2F	; 47
     890:	09 f0       	breq	.+2      	; 0x894 <SCSI_DecodeSCSICommand+0x72>
     892:	c6 c0       	rjmp	.+396    	; 0xa20 <SCSI_DecodeSCSICommand+0x1fe>
     894:	bf c0       	rjmp	.+382    	; 0xa14 <SCSI_DecodeSCSICommand+0x1f2>
     896:	f7 01       	movw	r30, r14
     898:	05 8d       	ldd	r16, Z+29	; 0x1d
     89a:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     89c:	82 8d       	ldd	r24, Z+26	; 0x1a
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	83 70       	andi	r24, 0x03	; 3
     8a2:	90 70       	andi	r25, 0x00	; 0
     8a4:	89 2b       	or	r24, r25
     8a6:	09 f0       	breq	.+2      	; 0x8aa <SCSI_DecodeSCSICommand+0x88>
     8a8:	7c c0       	rjmp	.+248    	; 0x9a2 <SCSI_DecodeSCSICommand+0x180>
     8aa:	83 8d       	ldd	r24, Z+27	; 0x1b
     8ac:	88 23       	and	r24, r24
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <SCSI_DecodeSCSICommand+0x90>
     8b0:	78 c0       	rjmp	.+240    	; 0x9a2 <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     8b2:	68 01       	movw	r12, r16
     8b4:	05 32       	cpi	r16, 0x25	; 37
     8b6:	11 05       	cpc	r17, r1
     8b8:	18 f0       	brcs	.+6      	; 0x8c0 <SCSI_DecodeSCSICommand+0x9e>
     8ba:	94 e2       	ldi	r25, 0x24	; 36
     8bc:	c9 2e       	mov	r12, r25
     8be:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     8c0:	89 e4       	ldi	r24, 0x49	; 73
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	b6 01       	movw	r22, r12
     8c6:	40 e0       	ldi	r20, 0x00	; 0
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	25 d4       	rcall	.+2122   	; 0x1116 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     8cc:	c8 01       	movw	r24, r16
     8ce:	8c 19       	sub	r24, r12
     8d0:	9d 09       	sbc	r25, r13
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	70 d4       	rcall	.+2272   	; 0x11b8 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8d8:	80 91 e8 00 	lds	r24, 0x00E8
     8dc:	8e 77       	andi	r24, 0x7E	; 126
     8de:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     8e2:	96 01       	movw	r18, r12
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	f7 01       	movw	r30, r14
     8ea:	82 89       	ldd	r24, Z+18	; 0x12
     8ec:	93 89       	ldd	r25, Z+19	; 0x13
     8ee:	a4 89       	ldd	r26, Z+20	; 0x14
     8f0:	b5 89       	ldd	r27, Z+21	; 0x15
     8f2:	82 1b       	sub	r24, r18
     8f4:	93 0b       	sbc	r25, r19
     8f6:	a4 0b       	sbc	r26, r20
     8f8:	b5 0b       	sbc	r27, r21
     8fa:	87 c0       	rjmp	.+270    	; 0xa0a <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     8fc:	f7 01       	movw	r30, r14
     8fe:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     900:	01 2f       	mov	r16, r17
     902:	13 31       	cpi	r17, 0x13	; 19
     904:	08 f0       	brcs	.+2      	; 0x908 <SCSI_DecodeSCSICommand+0xe6>
     906:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     908:	87 e3       	ldi	r24, 0x37	; 55
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	60 2f       	mov	r22, r16
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	00 d4       	rcall	.+2048   	; 0x1116 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     916:	81 2f       	mov	r24, r17
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	80 1b       	sub	r24, r16
     91c:	91 09       	sbc	r25, r1
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	4a d4       	rcall	.+2196   	; 0x11b8 <Endpoint_Null_Stream>
     924:	80 91 e8 00 	lds	r24, 0x00E8
     928:	8e 77       	andi	r24, 0x7E	; 126
     92a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     92e:	f7 01       	movw	r30, r14
     930:	82 89       	ldd	r24, Z+18	; 0x12
     932:	93 89       	ldd	r25, Z+19	; 0x13
     934:	a4 89       	ldd	r26, Z+20	; 0x14
     936:	b5 89       	ldd	r27, Z+21	; 0x15
     938:	80 1b       	sub	r24, r16
     93a:	91 09       	sbc	r25, r1
     93c:	a1 09       	sbc	r26, r1
     93e:	b1 09       	sbc	r27, r1
     940:	64 c0       	rjmp	.+200    	; 0xa0a <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	89 83       	std	Y+1, r24	; 0x01
     94c:	9a 83       	std	Y+2, r25	; 0x02
     94e:	ab 83       	std	Y+3, r26	; 0x03
     950:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	8d 83       	std	Y+5, r24	; 0x05
     95c:	9e 83       	std	Y+6, r25	; 0x06
     95e:	af 83       	std	Y+7, r26	; 0x07
     960:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	64 e0       	ldi	r22, 0x04	; 4
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	82 d3       	rcall	.+1796   	; 0x1074 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     970:	ce 01       	movw	r24, r28
     972:	05 96       	adiw	r24, 0x05	; 5
     974:	64 e0       	ldi	r22, 0x04	; 4
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	7b d3       	rcall	.+1782   	; 0x1074 <Endpoint_Write_Stream_BE>
     97e:	80 91 e8 00 	lds	r24, 0x00E8
     982:	8e 77       	andi	r24, 0x7E	; 126
     984:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     988:	f7 01       	movw	r30, r14
     98a:	82 89       	ldd	r24, Z+18	; 0x12
     98c:	93 89       	ldd	r25, Z+19	; 0x13
     98e:	a4 89       	ldd	r26, Z+20	; 0x14
     990:	b5 89       	ldd	r27, Z+21	; 0x15
     992:	08 97       	sbiw	r24, 0x08	; 8
     994:	a1 09       	sbc	r26, r1
     996:	b1 09       	sbc	r27, r1
     998:	38 c0       	rjmp	.+112    	; 0xa0a <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     99a:	f7 01       	movw	r30, r14
     99c:	82 8d       	ldd	r24, Z+26	; 0x1a
     99e:	82 fd       	sbrc	r24, 2
     9a0:	08 c0       	rjmp	.+16     	; 0x9b2 <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9a2:	80 91 39 01 	lds	r24, 0x0139
     9a6:	80 7f       	andi	r24, 0xF0	; 240
     9a8:	85 60       	ori	r24, 0x05	; 5
     9aa:	80 93 39 01 	sts	0x0139, r24
     9ae:	84 e2       	ldi	r24, 0x24	; 36
     9b0:	3e c0       	rjmp	.+124    	; 0xa2e <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     9b2:	3f dd       	rcall	.-1410   	; 0x432 <DataflashManager_CheckDataflashOperation>
     9b4:	88 23       	and	r24, r24
     9b6:	71 f5       	brne	.+92     	; 0xa14 <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     9b8:	80 91 39 01 	lds	r24, 0x0139
     9bc:	80 7f       	andi	r24, 0xF0	; 240
     9be:	84 60       	ori	r24, 0x04	; 4
     9c0:	80 93 39 01 	sts	0x0139, r24
     9c4:	10 92 43 01 	sts	0x0143, r1
     9c8:	10 92 44 01 	sts	0x0144, r1
     9cc:	33 c0       	rjmp	.+102    	; 0xa34 <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     9ce:	c7 01       	movw	r24, r14
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     9d4:	c7 01       	movw	r24, r14
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	dc de       	rcall	.-584    	; 0x792 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     9da:	88 23       	and	r24, r24
     9dc:	59 f1       	breq	.+86     	; 0xa34 <SCSI_DecodeSCSICommand+0x212>
     9de:	2c c0       	rjmp	.+88     	; 0xa38 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9e0:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e4:	10 92 f1 00 	sts	0x00F1, r1
     9e8:	10 92 f1 00 	sts	0x00F1, r1
     9ec:	10 92 f1 00 	sts	0x00F1, r1
     9f0:	80 91 e8 00 	lds	r24, 0x00E8
     9f4:	8e 77       	andi	r24, 0x7E	; 126
     9f6:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     9fa:	f7 01       	movw	r30, r14
     9fc:	82 89       	ldd	r24, Z+18	; 0x12
     9fe:	93 89       	ldd	r25, Z+19	; 0x13
     a00:	a4 89       	ldd	r26, Z+20	; 0x14
     a02:	b5 89       	ldd	r27, Z+21	; 0x15
     a04:	04 97       	sbiw	r24, 0x04	; 4
     a06:	a1 09       	sbc	r26, r1
     a08:	b1 09       	sbc	r27, r1
     a0a:	82 8b       	std	Z+18, r24	; 0x12
     a0c:	93 8b       	std	Z+19, r25	; 0x13
     a0e:	a4 8b       	std	Z+20, r26	; 0x14
     a10:	b5 8b       	std	Z+21, r27	; 0x15
     a12:	12 c0       	rjmp	.+36     	; 0xa38 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     a14:	f7 01       	movw	r30, r14
     a16:	12 8a       	std	Z+18, r1	; 0x12
     a18:	13 8a       	std	Z+19, r1	; 0x13
     a1a:	14 8a       	std	Z+20, r1	; 0x14
     a1c:	15 8a       	std	Z+21, r1	; 0x15
     a1e:	0c c0       	rjmp	.+24     	; 0xa38 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     a20:	80 91 39 01 	lds	r24, 0x0139
     a24:	80 7f       	andi	r24, 0xF0	; 240
     a26:	85 60       	ori	r24, 0x05	; 5
     a28:	80 93 39 01 	sts	0x0139, r24
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	80 93 43 01 	sts	0x0143, r24
     a32:	ca cf       	rjmp	.-108    	; 0x9c8 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0a c0       	rjmp	.+20     	; 0xa4c <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     a38:	80 91 39 01 	lds	r24, 0x0139
     a3c:	80 7f       	andi	r24, 0xF0	; 240
     a3e:	80 93 39 01 	sts	0x0139, r24
     a42:	10 92 43 01 	sts	0x0143, r1
     a46:	10 92 44 01 	sts	0x0144, r1
     a4a:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     a4c:	28 96       	adiw	r28, 0x08	; 8
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	08 95       	ret

00000a6a <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     a6a:	38 2f       	mov	r19, r24
     a6c:	28 2f       	mov	r18, r24
     a6e:	2c c0       	rjmp	.+88     	; 0xac8 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a70:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     a74:	23 17       	cp	r18, r19
     a76:	21 f4       	brne	.+8      	; 0xa80 <Endpoint_ConfigureEndpoint_Prv+0x16>
     a78:	76 2f       	mov	r23, r22
     a7a:	94 2f       	mov	r25, r20
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     a80:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     a84:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     a88:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     a8c:	91 ff       	sbrs	r25, 1
     a8e:	1b c0       	rjmp	.+54     	; 0xac6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     a90:	80 91 eb 00 	lds	r24, 0x00EB
     a94:	8e 7f       	andi	r24, 0xFE	; 254
     a96:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     a9a:	80 91 ed 00 	lds	r24, 0x00ED
     a9e:	8d 7f       	andi	r24, 0xFD	; 253
     aa0:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     aa4:	80 91 eb 00 	lds	r24, 0x00EB
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     aae:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     ab2:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     ab6:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     aba:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     abe:	87 fd       	sbrc	r24, 7
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	27 30       	cpi	r18, 0x07	; 7
     aca:	90 f2       	brcs	.-92     	; 0xa70 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     acc:	30 93 e9 00 	sts	0x00E9, r19
     ad0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     ad2:	08 95       	ret

00000ad4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ad4:	80 91 73 01 	lds	r24, 0x0173
     ad8:	88 23       	and	r24, r24
     ada:	9c f4       	brge	.+38     	; 0xb02 <__stack+0x3>
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ade:	80 91 72 01 	lds	r24, 0x0172
     ae2:	88 23       	and	r24, r24
     ae4:	b9 f0       	breq	.+46     	; 0xb14 <__stack+0x15>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ae6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     aea:	82 ff       	sbrs	r24, 2
     aec:	f8 cf       	rjmp	.-16     	; 0xade <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     aee:	80 91 e8 00 	lds	r24, 0x00E8
     af2:	8b 77       	andi	r24, 0x7B	; 123
     af4:	80 93 e8 00 	sts	0x00E8, r24
     af8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     afa:	80 91 72 01 	lds	r24, 0x0172
     afe:	88 23       	and	r24, r24
     b00:	49 f0       	breq	.+18     	; 0xb14 <__stack+0x15>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b02:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b06:	80 ff       	sbrs	r24, 0
     b08:	f8 cf       	rjmp	.-16     	; 0xafa <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b0a:	80 91 e8 00 	lds	r24, 0x00E8
     b0e:	8e 77       	andi	r24, 0x7E	; 126
     b10:	80 93 e8 00 	sts	0x00E8, r24
     b14:	08 95       	ret

00000b16 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b16:	40 91 e4 00 	lds	r20, 0x00E4
     b1a:	50 91 e5 00 	lds	r21, 0x00E5
     b1e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b20:	80 91 ec 00 	lds	r24, 0x00EC
     b24:	80 ff       	sbrs	r24, 0
     b26:	24 c0       	rjmp	.+72     	; 0xb70 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b28:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b2c:	80 fd       	sbrc	r24, 0
     b2e:	1e c0       	rjmp	.+60     	; 0xb6c <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b30:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b34:	88 23       	and	r24, r24
     b36:	11 f4       	brne	.+4      	; 0xb3c <Endpoint_WaitUntilReady+0x26>
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b3c:	85 30       	cpi	r24, 0x05	; 5
     b3e:	11 f4       	brne	.+4      	; 0xb44 <Endpoint_WaitUntilReady+0x2e>
     b40:	83 e0       	ldi	r24, 0x03	; 3
     b42:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b44:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b48:	85 ff       	sbrs	r24, 5
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <Endpoint_WaitUntilReady+0x3a>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret
     b50:	80 91 e4 00 	lds	r24, 0x00E4
     b54:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b58:	84 17       	cp	r24, r20
     b5a:	95 07       	cpc	r25, r21
     b5c:	09 f3       	breq	.-62     	; 0xb20 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b5e:	22 23       	and	r18, r18
     b60:	11 f4       	brne	.+4      	; 0xb66 <Endpoint_WaitUntilReady+0x50>
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	08 95       	ret
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	ac 01       	movw	r20, r24
     b6a:	da cf       	rjmp	.-76     	; 0xb20 <Endpoint_WaitUntilReady+0xa>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b6e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b70:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b74:	82 ff       	sbrs	r24, 2
     b76:	dc cf       	rjmp	.-72     	; 0xb30 <Endpoint_WaitUntilReady+0x1a>
     b78:	f9 cf       	rjmp	.-14     	; 0xb6c <Endpoint_WaitUntilReady+0x56>

00000b7a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b82:	4a d0       	rcall	.+148    	; 0xc18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b84:	51 d0       	rcall	.+162    	; 0xc28 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b86:	08 ed       	ldi	r16, 0xD8	; 216
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     b92:	80 81       	ld	r24, Z
     b94:	80 68       	ori	r24, 0x80	; 128
     b96:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b98:	80 81       	ld	r24, Z
     b9a:	8f 7d       	andi	r24, 0xDF	; 223
     b9c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b9e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     ba0:	10 92 72 01 	sts	0x0172, r1
	USB_Device_ConfigurationNumber  = 0;
     ba4:	10 92 6e 01 	sts	0x016E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     ba8:	10 92 70 01 	sts	0x0170, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     bac:	10 92 6f 01 	sts	0x016F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     bb0:	80 ee       	ldi	r24, 0xE0	; 224
     bb2:	e8 2e       	mov	r14, r24
     bb4:	f1 2c       	mov	r15, r1
     bb6:	f7 01       	movw	r30, r14
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     bbe:	f8 01       	movw	r30, r16
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	42 e0       	ldi	r20, 0x02	; 2
     bcc:	4e df       	rcall	.-356    	; 0xa6a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bce:	e1 ee       	ldi	r30, 0xE1	; 225
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bd8:	e2 ee       	ldi	r30, 0xE2	; 226
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     be8:	f7 01       	movw	r30, r14
     bea:	80 81       	ld	r24, Z
     bec:	8e 7f       	andi	r24, 0xFE	; 254
     bee:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bf0:	f8 01       	movw	r30, r16
     bf2:	80 81       	ld	r24, Z
     bf4:	80 61       	ori	r24, 0x10	; 16
     bf6:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret

00000c02 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c02:	e7 ed       	ldi	r30, 0xD7	; 215
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
     c0c:	8a e4       	ldi	r24, 0x4A	; 74
     c0e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 93 71 01 	sts	0x0171, r24

	USB_ResetInterface();
}
     c16:	b1 cf       	rjmp	.-158    	; 0xb7a <USB_ResetInterface>

00000c18 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     c18:	e8 ed       	ldi	r30, 0xD8	; 216
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8e 7f       	andi	r24, 0xFE	; 254
     c20:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c22:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     c26:	08 95       	ret

00000c28 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c28:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c2c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     c30:	08 95       	ret

00000c32 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	1f 93       	push	r17
     c3e:	2f 93       	push	r18
     c40:	3f 93       	push	r19
     c42:	4f 93       	push	r20
     c44:	5f 93       	push	r21
     c46:	6f 93       	push	r22
     c48:	7f 93       	push	r23
     c4a:	8f 93       	push	r24
     c4c:	9f 93       	push	r25
     c4e:	af 93       	push	r26
     c50:	bf 93       	push	r27
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c56:	e9 ee       	ldi	r30, 0xE9	; 233
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	10 81       	ld	r17, Z
     c5c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c5e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     c60:	e0 ef       	ldi	r30, 0xF0	; 240
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     c6a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     c6c:	e7 d2       	rcall	.+1486   	; 0x123c <USB_Device_ProcessControlRequest>
     c6e:	a9 ee       	ldi	r26, 0xE9	; 233
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c74:	e0 ef       	ldi	r30, 0xF0	; 240
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	80 83       	st	Z, r24
     c7e:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	1f 91       	pop	r17
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	2f 93       	push	r18
     cb0:	3f 93       	push	r19
     cb2:	4f 93       	push	r20
     cb4:	5f 93       	push	r21
     cb6:	6f 93       	push	r22
     cb8:	7f 93       	push	r23
     cba:	8f 93       	push	r24
     cbc:	9f 93       	push	r25
     cbe:	af 93       	push	r26
     cc0:	bf 93       	push	r27
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     cc6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     cca:	82 ff       	sbrs	r24, 2
     ccc:	0a c0       	rjmp	.+20     	; 0xce2 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     cce:	80 91 e2 00 	lds	r24, 0x00E2
     cd2:	82 ff       	sbrs	r24, 2
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     cd6:	80 91 e1 00 	lds	r24, 0x00E1
     cda:	8b 7f       	andi	r24, 0xFB	; 251
     cdc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ce0:	1b d4       	rcall	.+2102   	; 0x1518 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ce2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ce6:	80 ff       	sbrs	r24, 0
     ce8:	1d c0       	rjmp	.+58     	; 0xd24 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     cea:	80 91 d8 00 	lds	r24, 0x00D8
     cee:	80 ff       	sbrs	r24, 0
     cf0:	19 c0       	rjmp	.+50     	; 0xd24 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     cf2:	80 91 da 00 	lds	r24, 0x00DA
     cf6:	8e 7f       	andi	r24, 0xFE	; 254
     cf8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     cfc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     d00:	80 ff       	sbrs	r24, 0
     d02:	0c c0       	rjmp	.+24     	; 0xd1c <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d04:	80 e1       	ldi	r24, 0x10	; 16
     d06:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d08:	82 e1       	ldi	r24, 0x12	; 18
     d0a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     d0c:	09 b4       	in	r0, 0x29	; 41
     d0e:	00 fe       	sbrs	r0, 0
     d10:	fd cf       	rjmp	.-6      	; 0xd0c <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 93 72 01 	sts	0x0172, r24
			EVENT_USB_Device_Connect();
     d18:	37 da       	rcall	.-2962   	; 0x188 <EVENT_USB_Device_Connect>
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d1c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     d1e:	10 92 72 01 	sts	0x0172, r1
			EVENT_USB_Device_Disconnect();
     d22:	34 da       	rcall	.-2968   	; 0x18c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d24:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d28:	80 ff       	sbrs	r24, 0
     d2a:	18 c0       	rjmp	.+48     	; 0xd5c <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d2c:	80 91 e2 00 	lds	r24, 0x00E2
     d30:	80 ff       	sbrs	r24, 0
     d32:	14 c0       	rjmp	.+40     	; 0xd5c <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d34:	80 91 e2 00 	lds	r24, 0x00E2
     d38:	8e 7f       	andi	r24, 0xFE	; 254
     d3a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d3e:	80 91 e2 00 	lds	r24, 0x00E2
     d42:	80 61       	ori	r24, 0x10	; 16
     d44:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     d48:	80 91 d8 00 	lds	r24, 0x00D8
     d4c:	80 62       	ori	r24, 0x20	; 32
     d4e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d52:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	80 93 72 01 	sts	0x0172, r24
		EVENT_USB_Device_Suspend();
     d5a:	de d3       	rcall	.+1980   	; 0x1518 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d5c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d60:	84 ff       	sbrs	r24, 4
     d62:	2d c0       	rjmp	.+90     	; 0xdbe <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d64:	80 91 e2 00 	lds	r24, 0x00E2
     d68:	84 ff       	sbrs	r24, 4
     d6a:	29 c0       	rjmp	.+82     	; 0xdbe <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d6c:	80 e1       	ldi	r24, 0x10	; 16
     d6e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d70:	82 e1       	ldi	r24, 0x12	; 18
     d72:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d74:	09 b4       	in	r0, 0x29	; 41
     d76:	00 fe       	sbrs	r0, 0
     d78:	fd cf       	rjmp	.-6      	; 0xd74 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     d7a:	80 91 d8 00 	lds	r24, 0x00D8
     d7e:	8f 7d       	andi	r24, 0xDF	; 223
     d80:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d84:	80 91 e1 00 	lds	r24, 0x00E1
     d88:	8f 7e       	andi	r24, 0xEF	; 239
     d8a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d8e:	80 91 e2 00 	lds	r24, 0x00E2
     d92:	8f 7e       	andi	r24, 0xEF	; 239
     d94:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d98:	80 91 e2 00 	lds	r24, 0x00E2
     d9c:	81 60       	ori	r24, 0x01	; 1
     d9e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     da2:	80 91 6e 01 	lds	r24, 0x016E
     da6:	88 23       	and	r24, r24
     da8:	31 f4       	brne	.+12     	; 0xdb6 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     daa:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dae:	87 fd       	sbrc	r24, 7
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <__vector_10+0x112>
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <__vector_10+0x114>
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	80 93 72 01 	sts	0x0172, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     dbc:	ad d3       	rcall	.+1882   	; 0x1518 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     dbe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     dc2:	83 ff       	sbrs	r24, 3
     dc4:	27 c0       	rjmp	.+78     	; 0xe14 <__vector_10+0x170>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     dc6:	80 91 e2 00 	lds	r24, 0x00E2
     dca:	83 ff       	sbrs	r24, 3
     dcc:	23 c0       	rjmp	.+70     	; 0xe14 <__vector_10+0x170>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     dce:	80 91 e1 00 	lds	r24, 0x00E1
     dd2:	87 7f       	andi	r24, 0xF7	; 247
     dd4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	80 93 72 01 	sts	0x0172, r24
		USB_Device_ConfigurationNumber = 0;
     dde:	10 92 6e 01 	sts	0x016E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     de2:	80 91 e1 00 	lds	r24, 0x00E1
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     dec:	80 91 e2 00 	lds	r24, 0x00E2
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     df6:	80 91 e2 00 	lds	r24, 0x00E2
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	42 e0       	ldi	r20, 0x02	; 2
     e06:	31 de       	rcall	.-926    	; 0xa6a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e08:	80 91 f0 00 	lds	r24, 0x00F0
     e0c:	88 60       	ori	r24, 0x08	; 8
     e0e:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e12:	82 d3       	rcall	.+1796   	; 0x1518 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <Endpoint_Write_Control_Stream_LE>:
     e36:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e38:	40 91 79 01 	lds	r20, 0x0179
     e3c:	50 91 7a 01 	lds	r21, 0x017A
     e40:	46 17       	cp	r20, r22
     e42:	57 07       	cpc	r21, r23
     e44:	18 f4       	brcc	.+6      	; 0xe4c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e46:	f9 01       	movw	r30, r18
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	45 c0       	rjmp	.+138    	; 0xed6 <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e4c:	61 15       	cp	r22, r1
     e4e:	71 05       	cpc	r23, r1
     e50:	11 f0       	breq	.+4      	; 0xe56 <Endpoint_Write_Control_Stream_LE+0x20>
     e52:	ab 01       	movw	r20, r22
     e54:	f8 cf       	rjmp	.-16     	; 0xe46 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e56:	80 91 e8 00 	lds	r24, 0x00E8
     e5a:	8e 77       	andi	r24, 0x7E	; 126
     e5c:	80 93 e8 00 	sts	0x00E8, r24
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	f0 cf       	rjmp	.-32     	; 0xe46 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e66:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e6a:	88 23       	and	r24, r24
     e6c:	09 f4       	brne	.+2      	; 0xe70 <Endpoint_Write_Control_Stream_LE+0x3a>
     e6e:	45 c0       	rjmp	.+138    	; 0xefa <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e70:	85 30       	cpi	r24, 0x05	; 5
     e72:	09 f4       	brne	.+2      	; 0xe76 <Endpoint_Write_Control_Stream_LE+0x40>
     e74:	44 c0       	rjmp	.+136    	; 0xefe <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e76:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e7a:	83 ff       	sbrs	r24, 3
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <Endpoint_Write_Control_Stream_LE+0x4c>
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e82:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e86:	82 fd       	sbrc	r24, 2
     e88:	32 c0       	rjmp	.+100    	; 0xeee <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e8a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     e8e:	80 ff       	sbrs	r24, 0
     e90:	22 c0       	rjmp	.+68     	; 0xed6 <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     e92:	80 91 f3 00 	lds	r24, 0x00F3
     e96:	90 91 f2 00 	lds	r25, 0x00F2
     e9a:	78 2f       	mov	r23, r24
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	29 2f       	mov	r18, r25
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	26 2b       	or	r18, r22
     ea4:	37 2b       	or	r19, r23
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ea8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     eaa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     eae:	41 50       	subi	r20, 0x01	; 1
     eb0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     eb6:	41 15       	cp	r20, r1
     eb8:	51 05       	cpc	r21, r1
     eba:	19 f0       	breq	.+6      	; 0xec2 <Endpoint_Write_Control_Stream_LE+0x8c>
     ebc:	28 30       	cpi	r18, 0x08	; 8
     ebe:	31 05       	cpc	r19, r1
     ec0:	98 f3       	brcs	.-26     	; 0xea8 <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	28 30       	cpi	r18, 0x08	; 8
     ec6:	31 05       	cpc	r19, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <Endpoint_Write_Control_Stream_LE+0x96>
     eca:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ecc:	80 91 e8 00 	lds	r24, 0x00E8
     ed0:	8e 77       	andi	r24, 0x7E	; 126
     ed2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ed6:	41 15       	cp	r20, r1
     ed8:	51 05       	cpc	r21, r1
     eda:	29 f6       	brne	.-118    	; 0xe66 <Endpoint_Write_Control_Stream_LE+0x30>
     edc:	99 23       	and	r25, r25
     ede:	19 f6       	brne	.-122    	; 0xe66 <Endpoint_Write_Control_Stream_LE+0x30>
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ee2:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ee6:	88 23       	and	r24, r24
     ee8:	41 f0       	breq	.+16     	; 0xefa <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     eea:	85 30       	cpi	r24, 0x05	; 5
     eec:	41 f0       	breq	.+16     	; 0xefe <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eee:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ef2:	82 ff       	sbrs	r24, 2
     ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <Endpoint_Write_Control_Stream_LE+0xac>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	08 95       	ret
     efe:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f00:	08 95       	ret

00000f02 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     f02:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f04:	40 91 79 01 	lds	r20, 0x0179
     f08:	50 91 7a 01 	lds	r21, 0x017A
     f0c:	46 17       	cp	r20, r22
     f0e:	57 07       	cpc	r21, r23
     f10:	18 f4       	brcc	.+6      	; 0xf18 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     f12:	f9 01       	movw	r30, r18
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	46 c0       	rjmp	.+140    	; 0xfa4 <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f18:	61 15       	cp	r22, r1
     f1a:	71 05       	cpc	r23, r1
     f1c:	11 f0       	breq	.+4      	; 0xf22 <Endpoint_Write_Control_PStream_LE+0x20>
     f1e:	ab 01       	movw	r20, r22
     f20:	f8 cf       	rjmp	.-16     	; 0xf12 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f22:	80 91 e8 00 	lds	r24, 0x00E8
     f26:	8e 77       	andi	r24, 0x7E	; 126
     f28:	80 93 e8 00 	sts	0x00E8, r24
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	f0 cf       	rjmp	.-32     	; 0xf12 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f32:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f36:	88 23       	and	r24, r24
     f38:	09 f4       	brne	.+2      	; 0xf3c <Endpoint_Write_Control_PStream_LE+0x3a>
     f3a:	47 c0       	rjmp	.+142    	; 0xfca <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f3c:	85 30       	cpi	r24, 0x05	; 5
     f3e:	09 f4       	brne	.+2      	; 0xf42 <Endpoint_Write_Control_PStream_LE+0x40>
     f40:	46 c0       	rjmp	.+140    	; 0xfce <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f42:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     f46:	83 ff       	sbrs	r24, 3
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <Endpoint_Write_Control_PStream_LE+0x4c>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     f52:	82 fd       	sbrc	r24, 2
     f54:	34 c0       	rjmp	.+104    	; 0xfbe <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f56:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     f5a:	80 ff       	sbrs	r24, 0
     f5c:	23 c0       	rjmp	.+70     	; 0xfa4 <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f5e:	80 91 f3 00 	lds	r24, 0x00F3
     f62:	90 91 f2 00 	lds	r25, 0x00F2
     f66:	78 2f       	mov	r23, r24
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	29 2f       	mov	r18, r25
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	26 2b       	or	r18, r22
     f70:	37 2b       	or	r19, r23
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     f74:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f76:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     f7a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     f7c:	41 50       	subi	r20, 0x01	; 1
     f7e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f84:	41 15       	cp	r20, r1
     f86:	51 05       	cpc	r21, r1
     f88:	19 f0       	breq	.+6      	; 0xf90 <Endpoint_Write_Control_PStream_LE+0x8e>
     f8a:	28 30       	cpi	r18, 0x08	; 8
     f8c:	31 05       	cpc	r19, r1
     f8e:	90 f3       	brcs	.-28     	; 0xf74 <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	28 30       	cpi	r18, 0x08	; 8
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <Endpoint_Write_Control_PStream_LE+0x98>
     f98:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
     f9e:	8e 77       	andi	r24, 0x7E	; 126
     fa0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     fa4:	41 15       	cp	r20, r1
     fa6:	51 05       	cpc	r21, r1
     fa8:	21 f6       	brne	.-120    	; 0xf32 <Endpoint_Write_Control_PStream_LE+0x30>
     faa:	99 23       	and	r25, r25
     fac:	09 f0       	breq	.+2      	; 0xfb0 <Endpoint_Write_Control_PStream_LE+0xae>
     fae:	c1 cf       	rjmp	.-126    	; 0xf32 <Endpoint_Write_Control_PStream_LE+0x30>
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fb2:	80 91 72 01 	lds	r24, 0x0172

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fb6:	88 23       	and	r24, r24
     fb8:	41 f0       	breq	.+16     	; 0xfca <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	41 f0       	breq	.+16     	; 0xfce <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fbe:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     fc2:	82 ff       	sbrs	r24, 2
     fc4:	f6 cf       	rjmp	.-20     	; 0xfb2 <Endpoint_Write_Control_PStream_LE+0xb0>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	08 95       	ret
     fce:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     fd0:	08 95       	ret

00000fd2 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	18 2f       	mov	r17, r24
     fe6:	09 2f       	mov	r16, r25
     fe8:	7b 01       	movw	r14, r22
     fea:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     fec:	94 dd       	rcall	.-1240   	; 0xb16 <Endpoint_WaitUntilReady>
     fee:	b8 2e       	mov	r11, r24
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f5       	brne	.+106    	; 0x105e <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ff4:	81 2f       	mov	r24, r17
     ff6:	90 2f       	mov	r25, r16
     ff8:	9c 01       	movw	r18, r24
     ffa:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ffc:	c1 14       	cp	r12, r1
     ffe:	d1 04       	cpc	r13, r1
    1000:	39 f0       	breq	.+14     	; 0x1010 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1002:	f6 01       	movw	r30, r12
    1004:	80 81       	ld	r24, Z
    1006:	91 81       	ldd	r25, Z+1	; 0x01
    1008:	e8 1a       	sub	r14, r24
    100a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    100c:	c8 0f       	add	r28, r24
    100e:	d9 1f       	adc	r29, r25
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	21 c0       	rjmp	.+66     	; 0x1058 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1016:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    101a:	85 fd       	sbrc	r24, 5
    101c:	15 c0       	rjmp	.+42     	; 0x1048 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101e:	80 91 e8 00 	lds	r24, 0x00E8
    1022:	8b 77       	andi	r24, 0x7B	; 123
    1024:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1028:	c1 14       	cp	r12, r1
    102a:	d1 04       	cpc	r13, r1
    102c:	49 f0       	breq	.+18     	; 0x1040 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    102e:	f6 01       	movw	r30, r12
    1030:	80 81       	ld	r24, Z
    1032:	91 81       	ldd	r25, Z+1	; 0x01
    1034:	80 0f       	add	r24, r16
    1036:	91 1f       	adc	r25, r17
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
    103c:	85 e0       	ldi	r24, 0x05	; 5
    103e:	10 c0       	rjmp	.+32     	; 0x1060 <Endpoint_Read_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1040:	6a dd       	rcall	.-1324   	; 0xb16 <Endpoint_WaitUntilReady>
    1042:	88 23       	and	r24, r24
    1044:	49 f0       	breq	.+18     	; 0x1058 <Endpoint_Read_Stream_LE+0x86>
    1046:	0c c0       	rjmp	.+24     	; 0x1060 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1048:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    104c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    104e:	08 94       	sec
    1050:	e1 08       	sbc	r14, r1
    1052:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1054:	0f 5f       	subi	r16, 0xFF	; 255
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1058:	e1 14       	cp	r14, r1
    105a:	f1 04       	cpc	r15, r1
    105c:	e1 f6       	brne	.-72     	; 0x1016 <Endpoint_Read_Stream_LE+0x44>
    105e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	08 95       	ret

00001074 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	8c 01       	movw	r16, r24
    1088:	eb 01       	movw	r28, r22
    108a:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    108c:	44 dd       	rcall	.-1400   	; 0xb16 <Endpoint_WaitUntilReady>
    108e:	b8 2e       	mov	r11, r24
    1090:	88 23       	and	r24, r24
    1092:	b1 f5       	brne	.+108    	; 0x1100 <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1094:	21 97       	sbiw	r28, 0x01	; 1
    1096:	0c 0f       	add	r16, r28
    1098:	1d 1f       	adc	r17, r29
    109a:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    109c:	c1 14       	cp	r12, r1
    109e:	d1 04       	cpc	r13, r1
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    10a2:	f6 01       	movw	r30, r12
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	c8 1b       	sub	r28, r24
    10aa:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10ac:	08 1b       	sub	r16, r24
    10ae:	19 0b       	sbc	r17, r25
    10b0:	ee 24       	eor	r14, r14
    10b2:	ff 24       	eor	r15, r15
    10b4:	23 c0       	rjmp	.+70     	; 0x10fc <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10b6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    10ba:	85 fd       	sbrc	r24, 5
    10bc:	15 c0       	rjmp	.+42     	; 0x10e8 <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10be:	80 91 e8 00 	lds	r24, 0x00E8
    10c2:	8e 77       	andi	r24, 0x7E	; 126
    10c4:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    10c8:	c1 14       	cp	r12, r1
    10ca:	d1 04       	cpc	r13, r1
    10cc:	49 f0       	breq	.+18     	; 0x10e0 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    10ce:	f6 01       	movw	r30, r12
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	8e 0d       	add	r24, r14
    10d6:	9f 1d       	adc	r25, r15
    10d8:	91 83       	std	Z+1, r25	; 0x01
    10da:	80 83       	st	Z, r24
    10dc:	85 e0       	ldi	r24, 0x05	; 5
    10de:	11 c0       	rjmp	.+34     	; 0x1102 <Endpoint_Write_Stream_BE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    10e0:	1a dd       	rcall	.-1484   	; 0xb16 <Endpoint_WaitUntilReady>
    10e2:	88 23       	and	r24, r24
    10e4:	59 f0       	breq	.+22     	; 0x10fc <Endpoint_Write_Stream_BE+0x88>
    10e6:	0d c0       	rjmp	.+26     	; 0x1102 <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    10e8:	f8 01       	movw	r30, r16
    10ea:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ec:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    10f0:	01 50       	subi	r16, 0x01	; 1
    10f2:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    10f4:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    10f6:	08 94       	sec
    10f8:	e1 1c       	adc	r14, r1
    10fa:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    10fc:	20 97       	sbiw	r28, 0x00	; 0
    10fe:	d9 f6       	brne	.-74     	; 0x10b6 <Endpoint_Write_Stream_BE+0x42>
    1100:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	08 95       	ret

00001116 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	18 2f       	mov	r17, r24
    112a:	09 2f       	mov	r16, r25
    112c:	7b 01       	movw	r14, r22
    112e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1130:	f2 dc       	rcall	.-1564   	; 0xb16 <Endpoint_WaitUntilReady>
    1132:	b8 2e       	mov	r11, r24
    1134:	88 23       	and	r24, r24
    1136:	a9 f5       	brne	.+106    	; 0x11a2 <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1138:	81 2f       	mov	r24, r17
    113a:	90 2f       	mov	r25, r16
    113c:	9c 01       	movw	r18, r24
    113e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1140:	c1 14       	cp	r12, r1
    1142:	d1 04       	cpc	r13, r1
    1144:	39 f0       	breq	.+14     	; 0x1154 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1146:	f6 01       	movw	r30, r12
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	e8 1a       	sub	r14, r24
    114e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1150:	c8 0f       	add	r28, r24
    1152:	d9 1f       	adc	r29, r25
    1154:	00 e0       	ldi	r16, 0x00	; 0
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	21 c0       	rjmp	.+66     	; 0x119c <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    115a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    115e:	85 fd       	sbrc	r24, 5
    1160:	15 c0       	rjmp	.+42     	; 0x118c <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1162:	80 91 e8 00 	lds	r24, 0x00E8
    1166:	8e 77       	andi	r24, 0x7E	; 126
    1168:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    116c:	c1 14       	cp	r12, r1
    116e:	d1 04       	cpc	r13, r1
    1170:	49 f0       	breq	.+18     	; 0x1184 <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1172:	f6 01       	movw	r30, r12
    1174:	80 81       	ld	r24, Z
    1176:	91 81       	ldd	r25, Z+1	; 0x01
    1178:	80 0f       	add	r24, r16
    117a:	91 1f       	adc	r25, r17
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <Endpoint_Write_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1184:	c8 dc       	rcall	.-1648   	; 0xb16 <Endpoint_WaitUntilReady>
    1186:	88 23       	and	r24, r24
    1188:	49 f0       	breq	.+18     	; 0x119c <Endpoint_Write_Stream_LE+0x86>
    118a:	0c c0       	rjmp	.+24     	; 0x11a4 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    118c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    118e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1192:	08 94       	sec
    1194:	e1 08       	sbc	r14, r1
    1196:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1198:	0f 5f       	subi	r16, 0xFF	; 255
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    119c:	e1 14       	cp	r14, r1
    119e:	f1 04       	cpc	r15, r1
    11a0:	e1 f6       	brne	.-72     	; 0x115a <Endpoint_Write_Stream_LE+0x44>
    11a2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	08 95       	ret

000011b8 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
    11c8:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    11ca:	a5 dc       	rcall	.-1718   	; 0xb16 <Endpoint_WaitUntilReady>
    11cc:	d8 2e       	mov	r13, r24
    11ce:	88 23       	and	r24, r24
    11d0:	61 f5       	brne	.+88     	; 0x122a <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    11d2:	01 15       	cp	r16, r1
    11d4:	11 05       	cpc	r17, r1
    11d6:	29 f0       	breq	.+10     	; 0x11e2 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    11d8:	f8 01       	movw	r30, r16
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	c8 1b       	sub	r28, r24
    11e0:	d9 0b       	sbc	r29, r25
    11e2:	ee 24       	eor	r14, r14
    11e4:	ff 24       	eor	r15, r15
    11e6:	1f c0       	rjmp	.+62     	; 0x1226 <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11e8:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    11ec:	85 fd       	sbrc	r24, 5
    11ee:	15 c0       	rjmp	.+42     	; 0x121a <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11f0:	80 91 e8 00 	lds	r24, 0x00E8
    11f4:	8e 77       	andi	r24, 0x7E	; 126
    11f6:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    11fa:	01 15       	cp	r16, r1
    11fc:	11 05       	cpc	r17, r1
    11fe:	49 f0       	breq	.+18     	; 0x1212 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1200:	f8 01       	movw	r30, r16
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	8e 0d       	add	r24, r14
    1208:	9f 1d       	adc	r25, r15
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	0d c0       	rjmp	.+26     	; 0x122c <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1212:	81 dc       	rcall	.-1790   	; 0xb16 <Endpoint_WaitUntilReady>
    1214:	88 23       	and	r24, r24
    1216:	39 f0       	breq	.+14     	; 0x1226 <Endpoint_Null_Stream+0x6e>
    1218:	09 c0       	rjmp	.+18     	; 0x122c <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    121a:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    121e:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1220:	08 94       	sec
    1222:	e1 1c       	adc	r14, r1
    1224:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    1226:	20 97       	sbiw	r28, 0x00	; 0
    1228:	f9 f6       	brne	.-66     	; 0x11e8 <Endpoint_Null_Stream+0x30>
    122a:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	08 95       	ret

0000123c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	ac 97       	sbiw	r28, 0x2c	; 44
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	e3 e7       	ldi	r30, 0x73	; 115
    1256:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1258:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    125c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    125e:	21 e0       	ldi	r18, 0x01	; 1
    1260:	eb 37       	cpi	r30, 0x7B	; 123
    1262:	f2 07       	cpc	r31, r18
    1264:	c9 f7       	brne	.-14     	; 0x1258 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1266:	0e 94 cc 00 	call	0x198	; 0x198 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    126a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    126e:	83 ff       	sbrs	r24, 3
    1270:	3a c1       	rjmp	.+628    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1272:	80 91 73 01 	lds	r24, 0x0173

		switch (USB_ControlRequest.bRequest)
    1276:	30 91 74 01 	lds	r19, 0x0174
    127a:	35 30       	cpi	r19, 0x05	; 5
    127c:	09 f4       	brne	.+2      	; 0x1280 <USB_Device_ProcessControlRequest+0x44>
    127e:	87 c0       	rjmp	.+270    	; 0x138e <USB_Device_ProcessControlRequest+0x152>
    1280:	36 30       	cpi	r19, 0x06	; 6
    1282:	40 f4       	brcc	.+16     	; 0x1294 <USB_Device_ProcessControlRequest+0x58>
    1284:	31 30       	cpi	r19, 0x01	; 1
    1286:	c9 f1       	breq	.+114    	; 0x12fa <USB_Device_ProcessControlRequest+0xbe>
    1288:	31 30       	cpi	r19, 0x01	; 1
    128a:	70 f0       	brcs	.+28     	; 0x12a8 <USB_Device_ProcessControlRequest+0x6c>
    128c:	33 30       	cpi	r19, 0x03	; 3
    128e:	09 f0       	breq	.+2      	; 0x1292 <USB_Device_ProcessControlRequest+0x56>
    1290:	2a c1       	rjmp	.+596    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
    1292:	33 c0       	rjmp	.+102    	; 0x12fa <USB_Device_ProcessControlRequest+0xbe>
    1294:	38 30       	cpi	r19, 0x08	; 8
    1296:	09 f4       	brne	.+2      	; 0x129a <USB_Device_ProcessControlRequest+0x5e>
    1298:	f7 c0       	rjmp	.+494    	; 0x1488 <USB_Device_ProcessControlRequest+0x24c>
    129a:	39 30       	cpi	r19, 0x09	; 9
    129c:	09 f4       	brne	.+2      	; 0x12a0 <USB_Device_ProcessControlRequest+0x64>
    129e:	06 c1       	rjmp	.+524    	; 0x14ac <USB_Device_ProcessControlRequest+0x270>
    12a0:	36 30       	cpi	r19, 0x06	; 6
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <USB_Device_ProcessControlRequest+0x6a>
    12a4:	20 c1       	rjmp	.+576    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
    12a6:	97 c0       	rjmp	.+302    	; 0x13d6 <USB_Device_ProcessControlRequest+0x19a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12a8:	80 38       	cpi	r24, 0x80	; 128
    12aa:	21 f0       	breq	.+8      	; 0x12b4 <USB_Device_ProcessControlRequest+0x78>
    12ac:	82 38       	cpi	r24, 0x82	; 130
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <USB_Device_ProcessControlRequest+0x76>
    12b0:	1a c1       	rjmp	.+564    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <USB_Device_ProcessControlRequest+0x88>
    12b4:	90 91 6f 01 	lds	r25, 0x016F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    12b8:	80 91 70 01 	lds	r24, 0x0170
    12bc:	88 23       	and	r24, r24
    12be:	99 f0       	breq	.+38     	; 0x12e6 <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    12c0:	92 60       	ori	r25, 0x02	; 2
    12c2:	11 c0       	rjmp	.+34     	; 0x12e6 <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    12c4:	80 91 77 01 	lds	r24, 0x0177
    12c8:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12ce:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	25 e0       	ldi	r18, 0x05	; 5
    12d6:	96 95       	lsr	r25
    12d8:	87 95       	ror	r24
    12da:	2a 95       	dec	r18
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <USB_Device_ProcessControlRequest+0x9a>
    12de:	98 2f       	mov	r25, r24
    12e0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    12e2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12e6:	80 91 e8 00 	lds	r24, 0x00E8
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    12f0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    12f4:	10 92 f1 00 	sts	0x00F1, r1
    12f8:	d2 c0       	rjmp	.+420    	; 0x149e <USB_Device_ProcessControlRequest+0x262>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12fa:	88 23       	and	r24, r24
    12fc:	19 f0       	breq	.+6      	; 0x1304 <USB_Device_ProcessControlRequest+0xc8>
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	09 f0       	breq	.+2      	; 0x1304 <USB_Device_ProcessControlRequest+0xc8>
    1302:	f1 c0       	rjmp	.+482    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	8f 71       	andi	r24, 0x1F	; 31
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	21 f0       	breq	.+8      	; 0x1316 <USB_Device_ProcessControlRequest+0xda>
    130e:	02 97       	sbiw	r24, 0x02	; 2
    1310:	09 f0       	breq	.+2      	; 0x1314 <USB_Device_ProcessControlRequest+0xd8>
    1312:	e9 c0       	rjmp	.+466    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
    1314:	0c c0       	rjmp	.+24     	; 0x132e <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1316:	80 91 75 01 	lds	r24, 0x0175
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	09 f0       	breq	.+2      	; 0x1320 <USB_Device_ProcessControlRequest+0xe4>
    131e:	e3 c0       	rjmp	.+454    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1320:	10 92 70 01 	sts	0x0170, r1
    1324:	33 30       	cpi	r19, 0x03	; 3
    1326:	69 f5       	brne	.+90     	; 0x1382 <USB_Device_ProcessControlRequest+0x146>
    1328:	80 93 70 01 	sts	0x0170, r24
    132c:	2a c0       	rjmp	.+84     	; 0x1382 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    132e:	80 91 75 01 	lds	r24, 0x0175
    1332:	88 23       	and	r24, r24
    1334:	31 f5       	brne	.+76     	; 0x1382 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1336:	20 91 77 01 	lds	r18, 0x0177
    133a:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    133c:	09 f4       	brne	.+2      	; 0x1340 <USB_Device_ProcessControlRequest+0x104>
    133e:	d3 c0       	rjmp	.+422    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1340:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1344:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1348:	80 ff       	sbrs	r24, 0
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    134c:	33 30       	cpi	r19, 0x03	; 3
    134e:	21 f4       	brne	.+8      	; 0x1358 <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1350:	80 91 eb 00 	lds	r24, 0x00EB
    1354:	80 62       	ori	r24, 0x20	; 32
    1356:	13 c0       	rjmp	.+38     	; 0x137e <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1358:	80 91 eb 00 	lds	r24, 0x00EB
    135c:	80 61       	ori	r24, 0x10	; 16
    135e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <USB_Device_ProcessControlRequest+0x130>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	2a 95       	dec	r18
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <USB_Device_ProcessControlRequest+0x12c>
    1370:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1374:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1378:	80 91 eb 00 	lds	r24, 0x00EB
    137c:	88 60       	ori	r24, 0x08	; 8
    137e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1382:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1386:	80 91 e8 00 	lds	r24, 0x00E8
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	8b c0       	rjmp	.+278    	; 0x14a4 <USB_Device_ProcessControlRequest+0x268>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    138e:	88 23       	and	r24, r24
    1390:	09 f0       	breq	.+2      	; 0x1394 <USB_Device_ProcessControlRequest+0x158>
    1392:	a9 c0       	rjmp	.+338    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1394:	10 91 75 01 	lds	r17, 0x0175
    1398:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    139a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    139c:	f8 94       	cli
    139e:	80 91 e8 00 	lds	r24, 0x00E8
    13a2:	87 7f       	andi	r24, 0xF7	; 247
    13a4:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    13a8:	95 db       	rcall	.-2262   	; 0xad4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13aa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    13ae:	80 ff       	sbrs	r24, 0
    13b0:	fc cf       	rjmp	.-8      	; 0x13aa <USB_Device_ProcessControlRequest+0x16e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    13b2:	80 91 e3 00 	lds	r24, 0x00E3
    13b6:	80 78       	andi	r24, 0x80	; 128
    13b8:	81 2b       	or	r24, r17

				UDADDR = Temp;
    13ba:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    13c4:	11 23       	and	r17, r17
    13c6:	11 f4       	brne	.+4      	; 0x13cc <USB_Device_ProcessControlRequest+0x190>
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <USB_Device_ProcessControlRequest+0x192>
    13cc:	83 e0       	ldi	r24, 0x03	; 3
    13ce:	80 93 72 01 	sts	0x0172, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13d2:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    13d4:	88 c0       	rjmp	.+272    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13d6:	80 58       	subi	r24, 0x80	; 128
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	08 f0       	brcs	.+2      	; 0x13de <USB_Device_ProcessControlRequest+0x1a2>
    13dc:	84 c0       	rjmp	.+264    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    13de:	80 91 75 01 	lds	r24, 0x0175
    13e2:	90 91 76 01 	lds	r25, 0x0176
    13e6:	23 e0       	ldi	r18, 0x03	; 3
    13e8:	8c 3d       	cpi	r24, 0xDC	; 220
    13ea:	92 07       	cpc	r25, r18
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <USB_Device_ProcessControlRequest+0x1b4>
    13ee:	33 c0       	rjmp	.+102    	; 0x1456 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    13f4:	8a e2       	ldi	r24, 0x2A	; 42
    13f6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    13f8:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    13fa:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    13fc:	de 01       	movw	r26, r28
    13fe:	15 96       	adiw	r26, 0x05	; 5
    1400:	6e e0       	ldi	r22, 0x0E	; 14
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1406:	11 e2       	ldi	r17, 0x21	; 33
    1408:	e6 2f       	mov	r30, r22
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	10 93 57 00 	sts	0x0057, r17
    1410:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1412:	40 ff       	sbrs	r20, 0
    1414:	03 c0       	rjmp	.+6      	; 0x141c <USB_Device_ProcessControlRequest+0x1e0>
					{
						SerialByte >>= 4;
    1416:	82 95       	swap	r24
    1418:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    141a:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    141c:	8f 70       	andi	r24, 0x0F	; 15
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1422:	8a 30       	cpi	r24, 0x0A	; 10
    1424:	18 f0       	brcs	.+6      	; 0x142c <USB_Device_ProcessControlRequest+0x1f0>
    1426:	c9 01       	movw	r24, r18
    1428:	c7 96       	adiw	r24, 0x37	; 55
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <USB_Device_ProcessControlRequest+0x1f4>
    142c:	c9 01       	movw	r24, r18
    142e:	c0 96       	adiw	r24, 0x30	; 48
    1430:	8d 93       	st	X+, r24
    1432:	9d 93       	st	X+, r25
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1438:	44 31       	cpi	r20, 0x14	; 20
    143a:	51 05       	cpc	r21, r1
    143c:	29 f7       	brne	.-54     	; 0x1408 <USB_Device_ProcessControlRequest+0x1cc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    143e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1440:	80 91 e8 00 	lds	r24, 0x00E8
    1444:	87 7f       	andi	r24, 0xF7	; 247
    1446:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    144a:	ce 01       	movw	r24, r28
    144c:	03 96       	adiw	r24, 0x03	; 3
    144e:	6a e2       	ldi	r22, 0x2A	; 42
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	f1 dc       	rcall	.-1566   	; 0xe36 <Endpoint_Write_Control_Stream_LE>
    1454:	13 c0       	rjmp	.+38     	; 0x147c <USB_Device_ProcessControlRequest+0x240>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1456:	60 91 77 01 	lds	r22, 0x0177
    145a:	ae 01       	movw	r20, r28
    145c:	4f 5f       	subi	r20, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	0e 94 c9 01 	call	0x392	; 0x392 <CALLBACK_USB_GetDescriptor>
    1464:	bc 01       	movw	r22, r24
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	09 f4       	brne	.+2      	; 0x146c <USB_Device_ProcessControlRequest+0x230>
    146a:	3d c0       	rjmp	.+122    	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
    146c:	80 91 e8 00 	lds	r24, 0x00E8
    1470:	87 7f       	andi	r24, 0xF7	; 247
    1472:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	43 dd       	rcall	.-1402   	; 0xf02 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    147c:	80 91 e8 00 	lds	r24, 0x00E8
    1480:	8b 77       	andi	r24, 0x7B	; 123
    1482:	80 93 e8 00 	sts	0x00E8, r24
    1486:	2f c0       	rjmp	.+94     	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1488:	80 38       	cpi	r24, 0x80	; 128
    148a:	69 f5       	brne	.+90     	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    148c:	80 91 e8 00 	lds	r24, 0x00E8
    1490:	87 7f       	andi	r24, 0xF7	; 247
    1492:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1496:	80 91 6e 01 	lds	r24, 0x016E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    149a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    149e:	80 91 e8 00 	lds	r24, 0x00E8
    14a2:	8e 77       	andi	r24, 0x7E	; 126
    14a4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    14a8:	15 db       	rcall	.-2518   	; 0xad4 <Endpoint_ClearStatusStage>
    14aa:	1d c0       	rjmp	.+58     	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14ac:	88 23       	and	r24, r24
    14ae:	d9 f4       	brne	.+54     	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14b0:	90 91 75 01 	lds	r25, 0x0175
    14b4:	92 30       	cpi	r25, 0x02	; 2
    14b6:	b8 f4       	brcc	.+46     	; 0x14e6 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14b8:	80 91 e8 00 	lds	r24, 0x00E8
    14bc:	87 7f       	andi	r24, 0xF7	; 247
    14be:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    14c2:	90 93 6e 01 	sts	0x016E, r25

	Endpoint_ClearStatusStage();
    14c6:	06 db       	rcall	.-2548   	; 0xad4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    14c8:	80 91 6e 01 	lds	r24, 0x016E
    14cc:	88 23       	and	r24, r24
    14ce:	31 f4       	brne	.+12     	; 0x14dc <USB_Device_ProcessControlRequest+0x2a0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14d0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    14d4:	87 fd       	sbrc	r24, 7
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <USB_Device_ProcessControlRequest+0x2a0>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	01 c0       	rjmp	.+2      	; 0x14de <USB_Device_ProcessControlRequest+0x2a2>
    14dc:	84 e0       	ldi	r24, 0x04	; 4
    14de:	80 93 72 01 	sts	0x0172, r24

	EVENT_USB_Device_ConfigurationChanged();
    14e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14e6:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    14ea:	83 ff       	sbrs	r24, 3
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <USB_Device_ProcessControlRequest+0x2c6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    14ee:	80 91 eb 00 	lds	r24, 0x00EB
    14f2:	80 62       	ori	r24, 0x20	; 32
    14f4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f8:	80 91 e8 00 	lds	r24, 0x00E8
    14fc:	87 7f       	andi	r24, 0xF7	; 247
    14fe:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1502:	ac 96       	adiw	r28, 0x2c	; 44
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1518:	08 95       	ret

0000151a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    151a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    151c:	80 91 72 01 	lds	r24, 0x0172
    1520:	88 23       	and	r24, r24
    1522:	61 f0       	breq	.+24     	; 0x153c <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1524:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1528:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    152c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1530:	83 ff       	sbrs	r24, 3
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    1534:	83 de       	rcall	.-762    	; 0x123c <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1536:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1538:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    153c:	1f 91       	pop	r17
    153e:	08 95       	ret

00001540 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <MS_Device_USBTask+0x12>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1558:	80 91 72 01 	lds	r24, 0x0172
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	09 f0       	breq	.+2      	; 0x1562 <MS_Device_USBTask+0x22>
    1560:	07 c1       	rjmp	.+526    	; 0x1770 <MS_Device_USBTask+0x230>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1562:	f8 01       	movw	r30, r16
    1564:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1566:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    156a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    156e:	85 ff       	sbrs	r24, 5
    1570:	c9 c0       	rjmp	.+402    	; 0x1704 <MS_Device_USBTask+0x1c4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1572:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1576:	1a 82       	std	Y+2, r1	; 0x02
    1578:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    157a:	2a e0       	ldi	r18, 0x0A	; 10
    157c:	e2 2e       	mov	r14, r18
    157e:	f1 2c       	mov	r15, r1
    1580:	e0 0e       	add	r14, r16
    1582:	f1 1e       	adc	r15, r17
    1584:	6e 01       	movw	r12, r28
    1586:	08 94       	sec
    1588:	c1 1c       	adc	r12, r1
    158a:	d1 1c       	adc	r13, r1
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <MS_Device_USBTask+0x58>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    158e:	f8 01       	movw	r30, r16
    1590:	86 a9       	ldd	r24, Z+54	; 0x36
    1592:	88 23       	and	r24, r24
    1594:	09 f0       	breq	.+2      	; 0x1598 <MS_Device_USBTask+0x58>
    1596:	b6 c0       	rjmp	.+364    	; 0x1704 <MS_Device_USBTask+0x1c4>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1598:	c7 01       	movw	r24, r14
    159a:	6f e0       	ldi	r22, 0x0F	; 15
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	a6 01       	movw	r20, r12
    15a0:	18 dd       	rcall	.-1488   	; 0xfd2 <Endpoint_Read_Stream_LE>
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	a1 f3       	breq	.-24     	; 0x158e <MS_Device_USBTask+0x4e>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    15a6:	f8 01       	movw	r30, r16
    15a8:	82 85       	ldd	r24, Z+10	; 0x0a
    15aa:	93 85       	ldd	r25, Z+11	; 0x0b
    15ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    15ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    15b0:	85 55       	subi	r24, 0x55	; 85
    15b2:	93 45       	sbci	r25, 0x53	; 83
    15b4:	a2 44       	sbci	r26, 0x42	; 66
    15b6:	b3 44       	sbci	r27, 0x43	; 67
    15b8:	81 f4       	brne	.+32     	; 0x15da <MS_Device_USBTask+0x9a>
    15ba:	f8 01       	movw	r30, r16
    15bc:	97 89       	ldd	r25, Z+23	; 0x17
    15be:	81 85       	ldd	r24, Z+9	; 0x09
    15c0:	98 17       	cp	r25, r24
    15c2:	58 f4       	brcc	.+22     	; 0x15da <MS_Device_USBTask+0x9a>
    15c4:	86 89       	ldd	r24, Z+22	; 0x16
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	8f 71       	andi	r24, 0x1F	; 31
    15ca:	90 70       	andi	r25, 0x00	; 0
    15cc:	89 2b       	or	r24, r25
    15ce:	29 f4       	brne	.+10     	; 0x15da <MS_Device_USBTask+0x9a>
    15d0:	80 8d       	ldd	r24, Z+24	; 0x18
    15d2:	88 23       	and	r24, r24
    15d4:	11 f0       	breq	.+4      	; 0x15da <MS_Device_USBTask+0x9a>
    15d6:	81 31       	cpi	r24, 0x11	; 17
    15d8:	78 f0       	brcs	.+30     	; 0x15f8 <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15da:	80 91 eb 00 	lds	r24, 0x00EB
    15de:	80 62       	ori	r24, 0x20	; 32
    15e0:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    15e4:	f8 01       	movw	r30, r16
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    15e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    15ec:	80 91 eb 00 	lds	r24, 0x00EB
    15f0:	80 62       	ori	r24, 0x20	; 32
    15f2:	80 93 eb 00 	sts	0x00EB, r24
    15f6:	86 c0       	rjmp	.+268    	; 0x1704 <MS_Device_USBTask+0x1c4>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    15f8:	1a 82       	std	Y+2, r1	; 0x02
    15fa:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    15fc:	99 e1       	ldi	r25, 0x19	; 25
    15fe:	e9 2e       	mov	r14, r25
    1600:	f1 2c       	mov	r15, r1
    1602:	e0 0e       	add	r14, r16
    1604:	f1 1e       	adc	r15, r17
    1606:	6e 01       	movw	r12, r28
    1608:	08 94       	sec
    160a:	c1 1c       	adc	r12, r1
    160c:	d1 1c       	adc	r13, r1
    160e:	05 c0       	rjmp	.+10     	; 0x161a <MS_Device_USBTask+0xda>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1610:	f8 01       	movw	r30, r16
    1612:	86 a9       	ldd	r24, Z+54	; 0x36
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <MS_Device_USBTask+0xda>
    1618:	75 c0       	rjmp	.+234    	; 0x1704 <MS_Device_USBTask+0x1c4>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    161a:	f8 01       	movw	r30, r16
    161c:	60 8d       	ldd	r22, Z+24	; 0x18
    161e:	c7 01       	movw	r24, r14
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	a6 01       	movw	r20, r12
    1624:	d6 dc       	rcall	.-1620   	; 0xfd2 <Endpoint_Read_Stream_LE>
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	99 f3       	breq	.-26     	; 0x1610 <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    162a:	80 91 e8 00 	lds	r24, 0x00E8
    162e:	8b 77       	andi	r24, 0x7B	; 123
    1630:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1634:	f8 01       	movw	r30, r16
    1636:	86 89       	ldd	r24, Z+22	; 0x16
    1638:	87 ff       	sbrs	r24, 7
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    163c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    163e:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1642:	c8 01       	movw	r24, r16
    1644:	0e 94 c8 00 	call	0x190	; 0x190 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	98 27       	eor	r25, r24
    164c:	f8 01       	movw	r30, r16
    164e:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1650:	25 e5       	ldi	r18, 0x55	; 85
    1652:	33 e5       	ldi	r19, 0x53	; 83
    1654:	42 e4       	ldi	r20, 0x42	; 66
    1656:	53 e5       	ldi	r21, 0x53	; 83
    1658:	21 a7       	std	Z+41, r18	; 0x29
    165a:	32 a7       	std	Z+42, r19	; 0x2a
    165c:	43 a7       	std	Z+43, r20	; 0x2b
    165e:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1660:	26 85       	ldd	r18, Z+14	; 0x0e
    1662:	37 85       	ldd	r19, Z+15	; 0x0f
    1664:	40 89       	ldd	r20, Z+16	; 0x10
    1666:	51 89       	ldd	r21, Z+17	; 0x11
    1668:	25 a7       	std	Z+45, r18	; 0x2d
    166a:	36 a7       	std	Z+46, r19	; 0x2e
    166c:	47 a7       	std	Z+47, r20	; 0x2f
    166e:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1670:	22 89       	ldd	r18, Z+18	; 0x12
    1672:	33 89       	ldd	r19, Z+19	; 0x13
    1674:	44 89       	ldd	r20, Z+20	; 0x14
    1676:	55 89       	ldd	r21, Z+21	; 0x15
    1678:	21 ab       	std	Z+49, r18	; 0x31
    167a:	32 ab       	std	Z+50, r19	; 0x32
    167c:	43 ab       	std	Z+51, r20	; 0x33
    167e:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1680:	88 23       	and	r24, r24
    1682:	51 f4       	brne	.+20     	; 0x1698 <MS_Device_USBTask+0x158>
    1684:	21 15       	cp	r18, r1
    1686:	31 05       	cpc	r19, r1
    1688:	41 05       	cpc	r20, r1
    168a:	51 05       	cpc	r21, r1
    168c:	29 f0       	breq	.+10     	; 0x1698 <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    168e:	80 91 eb 00 	lds	r24, 0x00EB
    1692:	80 62       	ori	r24, 0x20	; 32
    1694:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1698:	f8 01       	movw	r30, r16
    169a:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    169c:	80 93 e9 00 	sts	0x00E9, r24
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <MS_Device_USBTask+0x16a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    16a2:	f8 01       	movw	r30, r16
    16a4:	86 a9       	ldd	r24, Z+54	; 0x36
    16a6:	88 23       	and	r24, r24
    16a8:	69 f5       	brne	.+90     	; 0x1704 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16aa:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    16ae:	85 fd       	sbrc	r24, 5
    16b0:	f8 cf       	rjmp	.-16     	; 0x16a2 <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    16b2:	f8 01       	movw	r30, r16
    16b4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16b6:	80 93 e9 00 	sts	0x00E9, r24
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <MS_Device_USBTask+0x184>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    16bc:	f8 01       	movw	r30, r16
    16be:	86 a9       	ldd	r24, Z+54	; 0x36
    16c0:	88 23       	and	r24, r24
    16c2:	01 f5       	brne	.+64     	; 0x1704 <MS_Device_USBTask+0x1c4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16c4:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    16c8:	85 fd       	sbrc	r24, 5
    16ca:	f8 cf       	rjmp	.-16     	; 0x16bc <MS_Device_USBTask+0x17c>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    16cc:	1a 82       	std	Y+2, r1	; 0x02
    16ce:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    16d0:	89 e2       	ldi	r24, 0x29	; 41
    16d2:	e8 2e       	mov	r14, r24
    16d4:	f1 2c       	mov	r15, r1
    16d6:	e0 0e       	add	r14, r16
    16d8:	f1 1e       	adc	r15, r17
    16da:	6e 01       	movw	r12, r28
    16dc:	08 94       	sec
    16de:	c1 1c       	adc	r12, r1
    16e0:	d1 1c       	adc	r13, r1
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <MS_Device_USBTask+0x1ac>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    16e4:	f8 01       	movw	r30, r16
    16e6:	86 a9       	ldd	r24, Z+54	; 0x36
    16e8:	88 23       	and	r24, r24
    16ea:	61 f4       	brne	.+24     	; 0x1704 <MS_Device_USBTask+0x1c4>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    16ec:	c7 01       	movw	r24, r14
    16ee:	6d e0       	ldi	r22, 0x0D	; 13
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	a6 01       	movw	r20, r12
    16f4:	10 dd       	rcall	.-1504   	; 0x1116 <Endpoint_Write_Stream_LE>
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	a9 f3       	breq	.-22     	; 0x16e4 <MS_Device_USBTask+0x1a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16fa:	80 91 e8 00 	lds	r24, 0x00E8
    16fe:	8e 77       	andi	r24, 0x7E	; 126
    1700:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1704:	f8 01       	movw	r30, r16
    1706:	86 a9       	ldd	r24, Z+54	; 0x36
    1708:	88 23       	and	r24, r24
    170a:	91 f1       	breq	.+100    	; 0x1770 <MS_Device_USBTask+0x230>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    170c:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    170e:	21 e0       	ldi	r18, 0x01	; 1
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	c9 01       	movw	r24, r18
    1714:	04 2e       	mov	r0, r20
    1716:	02 c0       	rjmp	.+4      	; 0x171c <MS_Device_USBTask+0x1dc>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <MS_Device_USBTask+0x1d8>
    1720:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1724:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1728:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    172a:	09 2e       	mov	r0, r25
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <MS_Device_USBTask+0x1f2>
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <MS_Device_USBTask+0x1ee>
    1736:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    173a:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    173e:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1742:	80 91 eb 00 	lds	r24, 0x00EB
    1746:	80 61       	ori	r24, 0x10	; 16
    1748:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    174c:	80 91 eb 00 	lds	r24, 0x00EB
    1750:	88 60       	ori	r24, 0x08	; 8
    1752:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1756:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    175a:	80 91 eb 00 	lds	r24, 0x00EB
    175e:	80 61       	ori	r24, 0x10	; 16
    1760:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1764:	80 91 eb 00 	lds	r24, 0x00EB
    1768:	88 60       	ori	r24, 0x08	; 8
    176a:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    176e:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	cf 90       	pop	r12
    1784:	08 95       	ret

00001786 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    178e:	0a 96       	adiw	r24, 0x0a	; 10
    1790:	fc 01       	movw	r30, r24
    1792:	8d e2       	ldi	r24, 0x2D	; 45
    1794:	df 01       	movw	r26, r30
    1796:	1d 92       	st	X+, r1
    1798:	8a 95       	dec	r24
    179a:	e9 f7       	brne	.-6      	; 0x1796 <MS_Device_ConfigureEndpoints+0x10>
    179c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	18 17       	cp	r17, r24
    17a2:	29 f4       	brne	.+10     	; 0x17ae <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    17a4:	6a 81       	ldd	r22, Y+2	; 0x02
    17a6:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	30 e8       	ldi	r19, 0x80	; 128
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	18 17       	cp	r17, r24
    17b2:	f9 f4       	brne	.+62     	; 0x17f2 <MS_Device_ConfigureEndpoints+0x6c>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    17b4:	6e 81       	ldd	r22, Y+6	; 0x06
    17b6:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    17b8:	88 85       	ldd	r24, Y+8	; 0x08
    17ba:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    17bc:	88 23       	and	r24, r24
    17be:	11 f4       	brne	.+4      	; 0x17c4 <MS_Device_ConfigureEndpoints+0x3e>
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <MS_Device_ConfigureEndpoints+0x40>
    17c4:	44 e0       	ldi	r20, 0x04	; 4
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	88 e0       	ldi	r24, 0x08	; 8
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    17d4:	86 17       	cp	r24, r22
    17d6:	97 07       	cpc	r25, r23
    17d8:	d0 f3       	brcs	.-12     	; 0x17ce <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	31 11       	cpse	r19, r1
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	60 68       	ori	r22, 0x80	; 128
    17e2:	42 60       	ori	r20, 0x02	; 2
    17e4:	22 95       	swap	r18
    17e6:	20 7f       	andi	r18, 0xF0	; 240
    17e8:	42 2b       	or	r20, r18
    17ea:	81 2f       	mov	r24, r17
    17ec:	3e d9       	rcall	.-3460   	; 0xa6a <Endpoint_ConfigureEndpoint_Prv>
    17ee:	88 23       	and	r24, r24
    17f0:	21 f0       	breq	.+8      	; 0x17fa <MS_Device_ConfigureEndpoints+0x74>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    17f2:	1f 5f       	subi	r17, 0xFF	; 255
    17f4:	17 30       	cpi	r17, 0x07	; 7
    17f6:	99 f6       	brne	.-90     	; 0x179e <MS_Device_ConfigureEndpoints+0x18>
    17f8:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	08 95       	ret

00001802 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1808:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    180c:	83 ff       	sbrs	r24, 3
    180e:	2f c0       	rjmp	.+94     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1810:	88 81       	ld	r24, Y
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	20 91 77 01 	lds	r18, 0x0177
    1818:	30 91 78 01 	lds	r19, 0x0178
    181c:	28 17       	cp	r18, r24
    181e:	39 07       	cpc	r19, r25
    1820:	31 f5       	brne	.+76     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1822:	80 91 74 01 	lds	r24, 0x0174
    1826:	8e 3f       	cpi	r24, 0xFE	; 254
    1828:	79 f0       	breq	.+30     	; 0x1848 <MS_Device_ProcessControlRequest+0x46>
    182a:	8f 3f       	cpi	r24, 0xFF	; 255
    182c:	01 f5       	brne	.+64     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    182e:	80 91 73 01 	lds	r24, 0x0173
    1832:	81 32       	cpi	r24, 0x21	; 33
    1834:	e1 f4       	brne	.+56     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1836:	80 91 e8 00 	lds	r24, 0x00E8
    183a:	87 7f       	andi	r24, 0xF7	; 247
    183c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1840:	49 d9       	rcall	.-3438   	; 0xad4 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	8e ab       	std	Y+54, r24	; 0x36
    1846:	13 c0       	rjmp	.+38     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1848:	80 91 73 01 	lds	r24, 0x0173
    184c:	81 3a       	cpi	r24, 0xA1	; 161
    184e:	79 f4       	brne	.+30     	; 0x186e <MS_Device_ProcessControlRequest+0x6c>
    1850:	80 91 e8 00 	lds	r24, 0x00E8
    1854:	87 7f       	andi	r24, 0xF7	; 247
    1856:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    185a:	89 85       	ldd	r24, Y+9	; 0x09
    185c:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    185e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1862:	80 91 e8 00 	lds	r24, 0x00E8
    1866:	8e 77       	andi	r24, 0x7E	; 126
    1868:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    186c:	33 d9       	rcall	.-3482   	; 0xad4 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <__subsf3>:
    1874:	50 58       	subi	r21, 0x80	; 128

00001876 <__addsf3>:
    1876:	bb 27       	eor	r27, r27
    1878:	aa 27       	eor	r26, r26
    187a:	0e d0       	rcall	.+28     	; 0x1898 <__addsf3x>
    187c:	08 c1       	rjmp	.+528    	; 0x1a8e <__fp_round>
    187e:	f9 d0       	rcall	.+498    	; 0x1a72 <__fp_pscA>
    1880:	30 f0       	brcs	.+12     	; 0x188e <__addsf3+0x18>
    1882:	fe d0       	rcall	.+508    	; 0x1a80 <__fp_pscB>
    1884:	20 f0       	brcs	.+8      	; 0x188e <__addsf3+0x18>
    1886:	31 f4       	brne	.+12     	; 0x1894 <__addsf3+0x1e>
    1888:	9f 3f       	cpi	r25, 0xFF	; 255
    188a:	11 f4       	brne	.+4      	; 0x1890 <__addsf3+0x1a>
    188c:	1e f4       	brtc	.+6      	; 0x1894 <__addsf3+0x1e>
    188e:	ee c0       	rjmp	.+476    	; 0x1a6c <__fp_nan>
    1890:	0e f4       	brtc	.+2      	; 0x1894 <__addsf3+0x1e>
    1892:	e0 95       	com	r30
    1894:	e7 fb       	bst	r30, 7
    1896:	e4 c0       	rjmp	.+456    	; 0x1a60 <__fp_inf>

00001898 <__addsf3x>:
    1898:	e9 2f       	mov	r30, r25
    189a:	0a d1       	rcall	.+532    	; 0x1ab0 <__fp_split3>
    189c:	80 f3       	brcs	.-32     	; 0x187e <__addsf3+0x8>
    189e:	ba 17       	cp	r27, r26
    18a0:	62 07       	cpc	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	18 f0       	brcs	.+6      	; 0x18b0 <__addsf3x+0x18>
    18aa:	71 f4       	brne	.+28     	; 0x18c8 <__addsf3x+0x30>
    18ac:	9e f5       	brtc	.+102    	; 0x1914 <__addsf3x+0x7c>
    18ae:	22 c1       	rjmp	.+580    	; 0x1af4 <__fp_zero>
    18b0:	0e f4       	brtc	.+2      	; 0x18b4 <__addsf3x+0x1c>
    18b2:	e0 95       	com	r30
    18b4:	0b 2e       	mov	r0, r27
    18b6:	ba 2f       	mov	r27, r26
    18b8:	a0 2d       	mov	r26, r0
    18ba:	0b 01       	movw	r0, r22
    18bc:	b9 01       	movw	r22, r18
    18be:	90 01       	movw	r18, r0
    18c0:	0c 01       	movw	r0, r24
    18c2:	ca 01       	movw	r24, r20
    18c4:	a0 01       	movw	r20, r0
    18c6:	11 24       	eor	r1, r1
    18c8:	ff 27       	eor	r31, r31
    18ca:	59 1b       	sub	r21, r25
    18cc:	99 f0       	breq	.+38     	; 0x18f4 <__addsf3x+0x5c>
    18ce:	59 3f       	cpi	r21, 0xF9	; 249
    18d0:	50 f4       	brcc	.+20     	; 0x18e6 <__addsf3x+0x4e>
    18d2:	50 3e       	cpi	r21, 0xE0	; 224
    18d4:	68 f1       	brcs	.+90     	; 0x1930 <__addsf3x+0x98>
    18d6:	1a 16       	cp	r1, r26
    18d8:	f0 40       	sbci	r31, 0x00	; 0
    18da:	a2 2f       	mov	r26, r18
    18dc:	23 2f       	mov	r18, r19
    18de:	34 2f       	mov	r19, r20
    18e0:	44 27       	eor	r20, r20
    18e2:	58 5f       	subi	r21, 0xF8	; 248
    18e4:	f3 cf       	rjmp	.-26     	; 0x18cc <__addsf3x+0x34>
    18e6:	46 95       	lsr	r20
    18e8:	37 95       	ror	r19
    18ea:	27 95       	ror	r18
    18ec:	a7 95       	ror	r26
    18ee:	f0 40       	sbci	r31, 0x00	; 0
    18f0:	53 95       	inc	r21
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__addsf3x+0x4e>
    18f4:	7e f4       	brtc	.+30     	; 0x1914 <__addsf3x+0x7c>
    18f6:	1f 16       	cp	r1, r31
    18f8:	ba 0b       	sbc	r27, r26
    18fa:	62 0b       	sbc	r22, r18
    18fc:	73 0b       	sbc	r23, r19
    18fe:	84 0b       	sbc	r24, r20
    1900:	ba f0       	brmi	.+46     	; 0x1930 <__addsf3x+0x98>
    1902:	91 50       	subi	r25, 0x01	; 1
    1904:	a1 f0       	breq	.+40     	; 0x192e <__addsf3x+0x96>
    1906:	ff 0f       	add	r31, r31
    1908:	bb 1f       	adc	r27, r27
    190a:	66 1f       	adc	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	88 1f       	adc	r24, r24
    1910:	c2 f7       	brpl	.-16     	; 0x1902 <__addsf3x+0x6a>
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <__addsf3x+0x98>
    1914:	ba 0f       	add	r27, r26
    1916:	62 1f       	adc	r22, r18
    1918:	73 1f       	adc	r23, r19
    191a:	84 1f       	adc	r24, r20
    191c:	48 f4       	brcc	.+18     	; 0x1930 <__addsf3x+0x98>
    191e:	87 95       	ror	r24
    1920:	77 95       	ror	r23
    1922:	67 95       	ror	r22
    1924:	b7 95       	ror	r27
    1926:	f7 95       	ror	r31
    1928:	9e 3f       	cpi	r25, 0xFE	; 254
    192a:	08 f0       	brcs	.+2      	; 0x192e <__addsf3x+0x96>
    192c:	b3 cf       	rjmp	.-154    	; 0x1894 <__addsf3+0x1e>
    192e:	93 95       	inc	r25
    1930:	88 0f       	add	r24, r24
    1932:	08 f0       	brcs	.+2      	; 0x1936 <__addsf3x+0x9e>
    1934:	99 27       	eor	r25, r25
    1936:	ee 0f       	add	r30, r30
    1938:	97 95       	ror	r25
    193a:	87 95       	ror	r24
    193c:	08 95       	ret

0000193e <__cmpsf2>:
    193e:	6c d0       	rcall	.+216    	; 0x1a18 <__fp_cmp>
    1940:	08 f4       	brcc	.+2      	; 0x1944 <__cmpsf2+0x6>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	08 95       	ret

00001946 <__fixunssfsi>:
    1946:	bc d0       	rcall	.+376    	; 0x1ac0 <__fp_splitA>
    1948:	88 f0       	brcs	.+34     	; 0x196c <__fixunssfsi+0x26>
    194a:	9f 57       	subi	r25, 0x7F	; 127
    194c:	90 f0       	brcs	.+36     	; 0x1972 <__fixunssfsi+0x2c>
    194e:	b9 2f       	mov	r27, r25
    1950:	99 27       	eor	r25, r25
    1952:	b7 51       	subi	r27, 0x17	; 23
    1954:	a0 f0       	brcs	.+40     	; 0x197e <__fixunssfsi+0x38>
    1956:	d1 f0       	breq	.+52     	; 0x198c <__fixunssfsi+0x46>
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	1a f0       	brmi	.+6      	; 0x1968 <__fixunssfsi+0x22>
    1962:	ba 95       	dec	r27
    1964:	c9 f7       	brne	.-14     	; 0x1958 <__fixunssfsi+0x12>
    1966:	12 c0       	rjmp	.+36     	; 0x198c <__fixunssfsi+0x46>
    1968:	b1 30       	cpi	r27, 0x01	; 1
    196a:	81 f0       	breq	.+32     	; 0x198c <__fixunssfsi+0x46>
    196c:	c3 d0       	rcall	.+390    	; 0x1af4 <__fp_zero>
    196e:	b1 e0       	ldi	r27, 0x01	; 1
    1970:	08 95       	ret
    1972:	c0 c0       	rjmp	.+384    	; 0x1af4 <__fp_zero>
    1974:	67 2f       	mov	r22, r23
    1976:	78 2f       	mov	r23, r24
    1978:	88 27       	eor	r24, r24
    197a:	b8 5f       	subi	r27, 0xF8	; 248
    197c:	39 f0       	breq	.+14     	; 0x198c <__fixunssfsi+0x46>
    197e:	b9 3f       	cpi	r27, 0xF9	; 249
    1980:	cc f3       	brlt	.-14     	; 0x1974 <__fixunssfsi+0x2e>
    1982:	86 95       	lsr	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b3 95       	inc	r27
    198a:	d9 f7       	brne	.-10     	; 0x1982 <__fixunssfsi+0x3c>
    198c:	3e f4       	brtc	.+14     	; 0x199c <__fixunssfsi+0x56>
    198e:	90 95       	com	r25
    1990:	80 95       	com	r24
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	08 95       	ret

0000199e <__floatunsisf>:
    199e:	e8 94       	clt
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <__floatsisf+0x12>

000019a2 <__floatsisf>:
    19a2:	97 fb       	bst	r25, 7
    19a4:	3e f4       	brtc	.+14     	; 0x19b4 <__floatsisf+0x12>
    19a6:	90 95       	com	r25
    19a8:	80 95       	com	r24
    19aa:	70 95       	com	r23
    19ac:	61 95       	neg	r22
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	8f 4f       	sbci	r24, 0xFF	; 255
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	99 23       	and	r25, r25
    19b6:	a9 f0       	breq	.+42     	; 0x19e2 <__floatsisf+0x40>
    19b8:	f9 2f       	mov	r31, r25
    19ba:	96 e9       	ldi	r25, 0x96	; 150
    19bc:	bb 27       	eor	r27, r27
    19be:	93 95       	inc	r25
    19c0:	f6 95       	lsr	r31
    19c2:	87 95       	ror	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f1 11       	cpse	r31, r1
    19cc:	f8 cf       	rjmp	.-16     	; 0x19be <__floatsisf+0x1c>
    19ce:	fa f4       	brpl	.+62     	; 0x1a0e <__floatsisf+0x6c>
    19d0:	bb 0f       	add	r27, r27
    19d2:	11 f4       	brne	.+4      	; 0x19d8 <__floatsisf+0x36>
    19d4:	60 ff       	sbrs	r22, 0
    19d6:	1b c0       	rjmp	.+54     	; 0x1a0e <__floatsisf+0x6c>
    19d8:	6f 5f       	subi	r22, 0xFF	; 255
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	8f 4f       	sbci	r24, 0xFF	; 255
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <__floatsisf+0x6c>
    19e2:	88 23       	and	r24, r24
    19e4:	11 f0       	breq	.+4      	; 0x19ea <__floatsisf+0x48>
    19e6:	96 e9       	ldi	r25, 0x96	; 150
    19e8:	11 c0       	rjmp	.+34     	; 0x1a0c <__floatsisf+0x6a>
    19ea:	77 23       	and	r23, r23
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <__floatsisf+0x54>
    19ee:	9e e8       	ldi	r25, 0x8E	; 142
    19f0:	87 2f       	mov	r24, r23
    19f2:	76 2f       	mov	r23, r22
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <__floatsisf+0x5e>
    19f6:	66 23       	and	r22, r22
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <__floatsisf+0x74>
    19fa:	96 e8       	ldi	r25, 0x86	; 134
    19fc:	86 2f       	mov	r24, r22
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	2a f0       	brmi	.+10     	; 0x1a0e <__floatsisf+0x6c>
    1a04:	9a 95       	dec	r25
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	da f7       	brpl	.-10     	; 0x1a04 <__floatsisf+0x62>
    1a0e:	88 0f       	add	r24, r24
    1a10:	96 95       	lsr	r25
    1a12:	87 95       	ror	r24
    1a14:	97 f9       	bld	r25, 7
    1a16:	08 95       	ret

00001a18 <__fp_cmp>:
    1a18:	99 0f       	add	r25, r25
    1a1a:	00 08       	sbc	r0, r0
    1a1c:	55 0f       	add	r21, r21
    1a1e:	aa 0b       	sbc	r26, r26
    1a20:	e0 e8       	ldi	r30, 0x80	; 128
    1a22:	fe ef       	ldi	r31, 0xFE	; 254
    1a24:	16 16       	cp	r1, r22
    1a26:	17 06       	cpc	r1, r23
    1a28:	e8 07       	cpc	r30, r24
    1a2a:	f9 07       	cpc	r31, r25
    1a2c:	c0 f0       	brcs	.+48     	; 0x1a5e <__fp_cmp+0x46>
    1a2e:	12 16       	cp	r1, r18
    1a30:	13 06       	cpc	r1, r19
    1a32:	e4 07       	cpc	r30, r20
    1a34:	f5 07       	cpc	r31, r21
    1a36:	98 f0       	brcs	.+38     	; 0x1a5e <__fp_cmp+0x46>
    1a38:	62 1b       	sub	r22, r18
    1a3a:	73 0b       	sbc	r23, r19
    1a3c:	84 0b       	sbc	r24, r20
    1a3e:	95 0b       	sbc	r25, r21
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <__fp_cmp+0x38>
    1a42:	0a 26       	eor	r0, r26
    1a44:	61 f0       	breq	.+24     	; 0x1a5e <__fp_cmp+0x46>
    1a46:	23 2b       	or	r18, r19
    1a48:	24 2b       	or	r18, r20
    1a4a:	25 2b       	or	r18, r21
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <__fp_cmp+0x3e>
    1a4e:	08 95       	ret
    1a50:	0a 26       	eor	r0, r26
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <__fp_cmp+0x3e>
    1a54:	a1 40       	sbci	r26, 0x01	; 1
    1a56:	a6 95       	lsr	r26
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	81 1d       	adc	r24, r1
    1a5c:	81 1d       	adc	r24, r1
    1a5e:	08 95       	ret

00001a60 <__fp_inf>:
    1a60:	97 f9       	bld	r25, 7
    1a62:	9f 67       	ori	r25, 0x7F	; 127
    1a64:	80 e8       	ldi	r24, 0x80	; 128
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	08 95       	ret

00001a6c <__fp_nan>:
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	80 ec       	ldi	r24, 0xC0	; 192
    1a70:	08 95       	ret

00001a72 <__fp_pscA>:
    1a72:	00 24       	eor	r0, r0
    1a74:	0a 94       	dec	r0
    1a76:	16 16       	cp	r1, r22
    1a78:	17 06       	cpc	r1, r23
    1a7a:	18 06       	cpc	r1, r24
    1a7c:	09 06       	cpc	r0, r25
    1a7e:	08 95       	ret

00001a80 <__fp_pscB>:
    1a80:	00 24       	eor	r0, r0
    1a82:	0a 94       	dec	r0
    1a84:	12 16       	cp	r1, r18
    1a86:	13 06       	cpc	r1, r19
    1a88:	14 06       	cpc	r1, r20
    1a8a:	05 06       	cpc	r0, r21
    1a8c:	08 95       	ret

00001a8e <__fp_round>:
    1a8e:	09 2e       	mov	r0, r25
    1a90:	03 94       	inc	r0
    1a92:	00 0c       	add	r0, r0
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <__fp_round+0xc>
    1a96:	88 23       	and	r24, r24
    1a98:	52 f0       	brmi	.+20     	; 0x1aae <__fp_round+0x20>
    1a9a:	bb 0f       	add	r27, r27
    1a9c:	40 f4       	brcc	.+16     	; 0x1aae <__fp_round+0x20>
    1a9e:	bf 2b       	or	r27, r31
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__fp_round+0x18>
    1aa2:	60 ff       	sbrs	r22, 0
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__fp_round+0x20>
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	08 95       	ret

00001ab0 <__fp_split3>:
    1ab0:	57 fd       	sbrc	r21, 7
    1ab2:	90 58       	subi	r25, 0x80	; 128
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	59 f0       	breq	.+22     	; 0x1ad0 <__fp_splitA+0x10>
    1aba:	5f 3f       	cpi	r21, 0xFF	; 255
    1abc:	71 f0       	breq	.+28     	; 0x1ada <__fp_splitA+0x1a>
    1abe:	47 95       	ror	r20

00001ac0 <__fp_splitA>:
    1ac0:	88 0f       	add	r24, r24
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <__fp_splitA+0x20>
    1ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aca:	79 f0       	breq	.+30     	; 0x1aea <__fp_splitA+0x2a>
    1acc:	87 95       	ror	r24
    1ace:	08 95       	ret
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	14 06       	cpc	r1, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	f2 cf       	rjmp	.-28     	; 0x1abe <__fp_split3+0xe>
    1ada:	46 95       	lsr	r20
    1adc:	f1 df       	rcall	.-30     	; 0x1ac0 <__fp_splitA>
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <__fp_splitA+0x30>
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	18 06       	cpc	r1, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	f1 cf       	rjmp	.-30     	; 0x1acc <__fp_splitA+0xc>
    1aea:	86 95       	lsr	r24
    1aec:	71 05       	cpc	r23, r1
    1aee:	61 05       	cpc	r22, r1
    1af0:	08 94       	sec
    1af2:	08 95       	ret

00001af4 <__fp_zero>:
    1af4:	e8 94       	clt

00001af6 <__fp_szero>:
    1af6:	bb 27       	eor	r27, r27
    1af8:	66 27       	eor	r22, r22
    1afa:	77 27       	eor	r23, r23
    1afc:	cb 01       	movw	r24, r22
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret

00001b02 <__gesf2>:
    1b02:	8a df       	rcall	.-236    	; 0x1a18 <__fp_cmp>
    1b04:	08 f4       	brcc	.+2      	; 0x1b08 <__gesf2+0x6>
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	08 95       	ret

00001b0a <__mulsf3>:
    1b0a:	0b d0       	rcall	.+22     	; 0x1b22 <__mulsf3x>
    1b0c:	c0 cf       	rjmp	.-128    	; 0x1a8e <__fp_round>
    1b0e:	b1 df       	rcall	.-158    	; 0x1a72 <__fp_pscA>
    1b10:	28 f0       	brcs	.+10     	; 0x1b1c <__mulsf3+0x12>
    1b12:	b6 df       	rcall	.-148    	; 0x1a80 <__fp_pscB>
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <__mulsf3+0x12>
    1b16:	95 23       	and	r25, r21
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <__mulsf3+0x12>
    1b1a:	a2 cf       	rjmp	.-188    	; 0x1a60 <__fp_inf>
    1b1c:	a7 cf       	rjmp	.-178    	; 0x1a6c <__fp_nan>
    1b1e:	11 24       	eor	r1, r1
    1b20:	ea cf       	rjmp	.-44     	; 0x1af6 <__fp_szero>

00001b22 <__mulsf3x>:
    1b22:	c6 df       	rcall	.-116    	; 0x1ab0 <__fp_split3>
    1b24:	a0 f3       	brcs	.-24     	; 0x1b0e <__mulsf3+0x4>

00001b26 <__mulsf3_pse>:
    1b26:	95 9f       	mul	r25, r21
    1b28:	d1 f3       	breq	.-12     	; 0x1b1e <__mulsf3+0x14>
    1b2a:	95 0f       	add	r25, r21
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	55 1f       	adc	r21, r21
    1b30:	62 9f       	mul	r22, r18
    1b32:	f0 01       	movw	r30, r0
    1b34:	72 9f       	mul	r23, r18
    1b36:	bb 27       	eor	r27, r27
    1b38:	f0 0d       	add	r31, r0
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	63 9f       	mul	r22, r19
    1b3e:	aa 27       	eor	r26, r26
    1b40:	f0 0d       	add	r31, r0
    1b42:	b1 1d       	adc	r27, r1
    1b44:	aa 1f       	adc	r26, r26
    1b46:	64 9f       	mul	r22, r20
    1b48:	66 27       	eor	r22, r22
    1b4a:	b0 0d       	add	r27, r0
    1b4c:	a1 1d       	adc	r26, r1
    1b4e:	66 1f       	adc	r22, r22
    1b50:	82 9f       	mul	r24, r18
    1b52:	22 27       	eor	r18, r18
    1b54:	b0 0d       	add	r27, r0
    1b56:	a1 1d       	adc	r26, r1
    1b58:	62 1f       	adc	r22, r18
    1b5a:	73 9f       	mul	r23, r19
    1b5c:	b0 0d       	add	r27, r0
    1b5e:	a1 1d       	adc	r26, r1
    1b60:	62 1f       	adc	r22, r18
    1b62:	83 9f       	mul	r24, r19
    1b64:	a0 0d       	add	r26, r0
    1b66:	61 1d       	adc	r22, r1
    1b68:	22 1f       	adc	r18, r18
    1b6a:	74 9f       	mul	r23, r20
    1b6c:	33 27       	eor	r19, r19
    1b6e:	a0 0d       	add	r26, r0
    1b70:	61 1d       	adc	r22, r1
    1b72:	23 1f       	adc	r18, r19
    1b74:	84 9f       	mul	r24, r20
    1b76:	60 0d       	add	r22, r0
    1b78:	21 1d       	adc	r18, r1
    1b7a:	82 2f       	mov	r24, r18
    1b7c:	76 2f       	mov	r23, r22
    1b7e:	6a 2f       	mov	r22, r26
    1b80:	11 24       	eor	r1, r1
    1b82:	9f 57       	subi	r25, 0x7F	; 127
    1b84:	50 40       	sbci	r21, 0x00	; 0
    1b86:	8a f0       	brmi	.+34     	; 0x1baa <__mulsf3_pse+0x84>
    1b88:	e1 f0       	breq	.+56     	; 0x1bc2 <__mulsf3_pse+0x9c>
    1b8a:	88 23       	and	r24, r24
    1b8c:	4a f0       	brmi	.+18     	; 0x1ba0 <__mulsf3_pse+0x7a>
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	bb 1f       	adc	r27, r27
    1b94:	66 1f       	adc	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	91 50       	subi	r25, 0x01	; 1
    1b9c:	50 40       	sbci	r21, 0x00	; 0
    1b9e:	a9 f7       	brne	.-22     	; 0x1b8a <__mulsf3_pse+0x64>
    1ba0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	70 f0       	brcs	.+28     	; 0x1bc2 <__mulsf3_pse+0x9c>
    1ba6:	5c cf       	rjmp	.-328    	; 0x1a60 <__fp_inf>
    1ba8:	a6 cf       	rjmp	.-180    	; 0x1af6 <__fp_szero>
    1baa:	5f 3f       	cpi	r21, 0xFF	; 255
    1bac:	ec f3       	brlt	.-6      	; 0x1ba8 <__mulsf3_pse+0x82>
    1bae:	98 3e       	cpi	r25, 0xE8	; 232
    1bb0:	dc f3       	brlt	.-10     	; 0x1ba8 <__mulsf3_pse+0x82>
    1bb2:	86 95       	lsr	r24
    1bb4:	77 95       	ror	r23
    1bb6:	67 95       	ror	r22
    1bb8:	b7 95       	ror	r27
    1bba:	f7 95       	ror	r31
    1bbc:	e7 95       	ror	r30
    1bbe:	9f 5f       	subi	r25, 0xFF	; 255
    1bc0:	c1 f7       	brne	.-16     	; 0x1bb2 <__mulsf3_pse+0x8c>
    1bc2:	fe 2b       	or	r31, r30
    1bc4:	88 0f       	add	r24, r24
    1bc6:	91 1d       	adc	r25, r1
    1bc8:	96 95       	lsr	r25
    1bca:	87 95       	ror	r24
    1bcc:	97 f9       	bld	r25, 7
    1bce:	08 95       	ret

00001bd0 <_exit>:
    1bd0:	f8 94       	cli

00001bd2 <__stop_program>:
    1bd2:	ff cf       	rjmp	.-2      	; 0x1bd2 <__stop_program>
